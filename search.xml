<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Web API</title>
      <link href="/2019/12/01/web-api/"/>
      <url>/2019/12/01/web-api/</url>
      
        <content type="html"><![CDATA[<h4 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h4><ul><li>ECMAScript</li><li>DOM<ol><li>其实时我们操作页面元素的各种方法的集合，也可以称为是方法集合的对象。（操作页面的方法包括：让元素显示隐藏、改变元素的宽高颜色等）</li></ol></li><li>BOM</li></ul><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><ul><li>API(Application Programming Interface,应用程序编程接口)是一些<strong>预先定义的函数</strong>，目的</li></ul><h4 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h4><ul><li>Web API是浏览器提供的一套操作浏览器功能和页面元素的接口</li></ul><h4 id="API-和-Web-API-总结"><a href="#API-和-Web-API-总结" class="headerlink" title="API 和 Web API 总结"></a>API 和 Web API 总结</h4><p>API 是为我们程序员提供的一个接口，帮助我们</p><p>API 其实就是一组方法的集合体</p><p>Web API 就是浏览器中的一组方法的集合体，我们 JS 程序运行在浏览器中的时候，就可以调用Web API 中的各种方法，如果运行在其他环境中，就需要调用其他环境提供的API方法。（比如让js程序）</p><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><ol><li><p>DOM(Document Object Model,文档对象模型)，是W3C组织推荐的处理</p></li><li><p>DOM树（节点树）</p><p>在DOM中，我们认为每一个标签都是节点，我们整个页面都是由各种节点组成，因此，我们整个页面也可以被称为节点树或者DOM树。</p></li></ol><h3 id="DOM-获取元素"><a href="#DOM-获取元素" class="headerlink" title="DOM 获取元素"></a>DOM 获取元素</h3><h4 id="获取页面中元素的几种方法"><a href="#获取页面中元素的几种方法" class="headerlink" title="获取页面中元素的几种方法"></a>获取页面中元素的几种方法</h4><ol><li><p>根据 ID 获取</p><p>使用 getElementById()</p><ol><li>因为我们文档页面从上往下加载，所以先要有标签，所以我们script写到对应的标签下面</li><li>get （获得）Element （元素） By （通过） 驼峰命名法</li><li>参数是大小写敏感的字符串</li><li>返回的是一个元素对象</li></ol></li></ol><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>me<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个打印文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> d <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"me"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><p>通过标签名获取</p><p>使用getElement<strong>s</strong>ByTagName()</p></li></ol><p>拓展：具有数组的形态，但是不具备数组的方法或者属性的数据集合被称为伪数组或者类数组</p><ol start="3"><li><p>通过类名获取</p><p>使用getElementsByClassName()</p></li><li><p>全局获取</p><p>使用querySelector()</p><p>使用querySelectorAll()</p></li></ol><p><strong>Array.from(伪数组);可以把伪数组转化成真实的数组，参数就是伪数组中的元素。</strong></p><h3 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h3><ol><li>事件源</li><li>事件类型</li><li>事件处理程序</li></ol><p>innerText：非标准 不识别html标签，去除空格和换行</p><p>innerHTML：W3C 识别html标签，保留空格和换行（用的多）</p><p>以上两个属性，都是可读写的，并且向内部添加内容时，会覆盖原有内容，如需保留原有内容，则需要拼接原有的内容</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"要添加的内容"</span><span class="token punctuation">;</span></code></pre><p>事件驱动函数中的this永远指向当前时间函数所挂载的那个DOM对象，简单的来说，就是给哪个元素添加了事件，那么这个事件中的this就指向这个元素。</p><p>定位会影响他的层级，所以鼠标事件可能会受到影响</p><p>style对象里面保存了所有的css样式，作为他的属性名，任何一个元素都拥有style对象，对象中的属性都是一样的，如果当前没有默认的行内样式，则当前样式的属性值为空。</p><p>style对象的作用原理，就是但我们使用style给元素添加样式的时候，他会默认给元素添加一个行内样式，因此达到改变元素样式的效果。</p><p>我们可以通过修改元素的className更改元素的样式，从而达到更改样式的效果（适合样式较多或者功能复杂的情况）</p><p>class是个保留字，因此使用className</p><p>className属性会覆盖元素原有的class</p><h3 id="onkeydown、onkeypress、onkeyup三个事件有什么区别？"><a href="#onkeydown、onkeypress、onkeyup三个事件有什么区别？" class="headerlink" title="onkeydown、onkeypress、onkeyup三个事件有什么区别？"></a>onkeydown、onkeypress、onkeyup三个事件有什么区别？</h3><p>onmouseover onmousemove的区别</p><p>onmouseout</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>留言板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ww<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"textarea"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> u <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">.</span>onclick<span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入留言内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lis<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            u<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>链接不需要跳转（阻止链接跳转）：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>&lt;a href="javascript:void(0);"/a></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>自动填充表格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">table </span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>            <span class="token property">border-spacing</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">border-collapse</span><span class="token punctuation">:</span>collapse<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">thead </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">td </span><span class="token punctuation">{</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid gray<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>科目<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>分数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"唐三"</span><span class="token punctuation">,</span>            course<span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">,</span>            score<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"小舞"</span><span class="token punctuation">,</span>            course<span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">,</span>            score<span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"沐白"</span><span class="token punctuation">,</span>            course<span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">,</span>            score<span class="token punctuation">:</span> <span class="token number">92</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"大师"</span><span class="token punctuation">,</span>            course<span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">,</span>            score<span class="token punctuation">:</span> <span class="token number">190</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> tb <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"tbody"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> tr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//行</span>        <span class="token keyword">var</span> trs <span class="token operator">=</span> tb<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组中有几个对象，则生成多少行</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> td <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//列</span>            td<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组中对象的元素值插入td中</span>            trs<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>td<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> del <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        del<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;a class='del' href='javascript:;'>删除&lt;/a>"</span><span class="token punctuation">;</span>        trs<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tb<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="解除事件绑定的方式"><a href="#解除事件绑定的方式" class="headerlink" title="解除事件绑定的方式"></a>解除事件绑定的方式</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.设置事件触发源的事件为空</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.解除相应的绑定事件</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当发生事件的时候，事件流始终存在，与文档元素是否存在相应的事件无关</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web API </tag>
            
            <tag> DOM&amp;BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5与CSS3权威指南</title>
      <link href="/2019/11/29/du-shu-bi-ji-html-yu-css3-quan-wei-zhi-nan-shang-xia/"/>
      <url>/2019/11/29/du-shu-bi-ji-html-yu-css3-quan-wei-zhi-nan-shang-xia/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/HTML5%E4%B8%8ECSS3.jpg" alt="HTML5与CSS3权威指南.jpg"></p><h1 id="前言-此版本为第三版"><a href="#前言-此版本为第三版" class="headerlink" title="前言 此版本为第三版"></a>前言 此版本为第三版</h1><p>技术范围：截止2015年5月前</p><p><strong>HTML5：</strong>基于2014年10月28日，W3C的HTML工作组正式发布的HTML5的正式推荐标准。</p><p>增加了支持web应用开发者的许多新特性，以及更符合开发者使用习惯的新元素，并重点关注定义<strong>清晰的、一致的准则</strong>，以确保web应用和内容在不同用户代理（浏览器）中的互操作性。</p><p>HTML5是构建<strong>开放web平台</strong>的核心。</p><p><strong>CSS3:</strong> 2015年4月9日，W3C的CSS工作组发布CSS基本用户接口模块（CSS Basic User Interface Module Level 3,CSS3 UI）的标准工作草案。该文档描述了CSS3中对HTML、XML（包括 XHTML）进行样式处理所需的与用户界面相关的CSS选择器（selectors）、属性及属性值。它包含并扩展了在CSS Level 2 及 Selector 规范中定义的与用户接口有关的特性。</p><p><strong>新体验：</strong>web的音频和视频不再需要插件，通过Canvas更灵活地完成图像绘制，而不必考虑屏幕的分辨率，浏览器对<strong>可扩展矢量图</strong>（SVG）和数学标记语言(MathML)的本地支持，通过引入新的注释信息以增强对东亚文字呈现（Ruby）的支持，对富web应用信息无障碍新特性的支持，等等。</p><h1 id="拓展-SGML-XML-HTML"><a href="#拓展-SGML-XML-HTML" class="headerlink" title="拓展 SGML XML HTML"></a>拓展 SGML XML HTML</h1><h2 id="HTML-5-已经不是-SGML-的子集，那么-SGML-、XML-、-HTML-之间有什么关联与区别呢"><a href="#HTML-5-已经不是-SGML-的子集，那么-SGML-、XML-、-HTML-之间有什么关联与区别呢" class="headerlink" title="HTML 5 已经不是 SGML 的子集，那么 SGML 、XML 、 HTML 之间有什么关联与区别呢?"></a>HTML 5 已经不是 SGML 的子集，那么 SGML 、XML 、 HTML 之间有什么关联与区别呢?</h2><p><strong>SGML</strong>是指“标准通用标记语言”(Standard Generalized Markup Language), 是1986年出版发布的一个信息管理方面的国际标准(ISO 8879)，它是国际上定义电子文件结构和内容描述的标准，是一种非常复杂的文档的结构，主要用于大量高度结构化数据的防卫区和其他各种工业领域，利于分类和索引。SGML规定了在文档中嵌入描述标记的标准格式，指定了描述文档结构的标准方法，目前在WEB上使用的HTML格式便是使用固定标签集的一种SGML文档。由于SGML可以支持无数的文档结构类型，并且可以创建与特定的软硬件无关的文档，因此很容易与使用不同计算机系统的用户交换文档。同XML相比，定义的功能很强大，缺点是它不适用于Web数据描述，而且SGML软件价格非常价格昂贵。 </p><p><strong>HTML</strong>即“HyperText Markup Language” （超文本标记语言）,它的优点是比较适合web 页面的开发。但它有一个缺点是标记相对较少，只有固定的标记集如<code>&lt;p&gt; &lt;strong&gt;</code> 等。缺少 SGML  的柔性和适应性。不能支持特定领域的标记语言，如对数学、化学、音乐等领域的表示支持较少。</p><p>所谓的XML（Extensible Markup Language）, 翻译成中文就是“可扩展标识语言“，在国内很多人理解<code>xml</code>为<code>html</code>的简单扩展，这实际上是一种误解。尽管 <code>xml</code> 同 <code>html</code> 关系非常密切。 它由万维网协会（W3C）创建，用来克服  HTML 的局限。和 HTML 一样，XML 也基于 SGML。XML 是为 Web 设计的。  <strong>XML 实际上是Web上表示结构化信息的一种标准文本格式</strong>，它没有复杂的语法和包罗万象的数据定义。</p><p><strong>SGML</strong> 是一种在Web发明之前就早已存在的用标记来描述文档资料的通用语言。但SGML<strong>十分庞大且难于学习和使用</strong>。鉴于此，人们提出了HTML语言。但近年来，随着Web应用的不断深入，HTML在需求广泛的应用中已显得捉襟见肘，有人建议直接使用 SGML 作为Web语言。但SGML太庞大了，学用两难尚且不说，就是全面实现SGML的浏览器也非常困难。于是Web标准化组织W3C建议使用一种精简的SGML版本——XML。XML与SGML一样，是一个用来定义其他语言的元语言。与SGML相比，XML规范不到SGML规范的1/10，简单易懂，是一门既无标签集也无语法的新一代标记语言。</p><h1 id="第一章-HTML-5-的优势"><a href="#第一章-HTML-5-的优势" class="headerlink" title="第一章 HTML 5 的优势"></a>第一章 HTML 5 的优势</h1><h2 id="HTML-5-为什么如此受欢迎？"><a href="#HTML-5-为什么如此受欢迎？" class="headerlink" title="HTML 5 为什么如此受欢迎？"></a>HTML 5 为什么如此受欢迎？</h2><ol><li><p>时代的要求</p><p>现在时代迫切要求有一个统一的互联网通用标准，以往由于各浏览器之间的不统一，所以<strong>解决浏览器之间的兼容性问题</strong>成为了开发者最为头疼的问题。</p><p>而HTML 5 的目标就是将Web带入一个成熟的应用平台，在HTML 5 平台上，视频、音频、图像、动画，以及同电脑的交互都被标准化。</p></li><li><p>Internet Explorer 8 以上的版本对HTML 5 的支持，随着其他浏览器针对此次 HTML 5 的更新的改变，抢占了许多市场份额，所以IE 8 以上版本，都对HTML 5 做了相应的支持，所以 HTML 5 在市场上大面积推广的势头是非常猛的。</p></li></ol><h2 id="为何可以放心使用-HTML-5-技术"><a href="#为何可以放心使用-HTML-5-技术" class="headerlink" title="为何可以放心使用 HTML 5 技术"></a>为何可以放心使用 HTML 5 技术</h2><ol><li><p>兼容性：HTML 4 在<strong>新版本的浏览器上</strong>也可以正常运行。（本书写的是HTML 5 在<strong>老版本的浏览器上</strong>也可以正常运行。觉得稍有问题，还是需要针对兼容性，做些调整的）</p></li><li><p>实用性：HTML 5 内部并没有封装什么很复杂的、不切实际的功能，而只是封装了简单实用的功能。</p></li><li><p>并非革命性的发展：HTML 5 的内部功能不是革命性的，只是发展性的。</p><p>以上三点就是所谓的“HTML 设计原则”，HTML 5 也是以该设计原则为基本原则而开发出来的，各主流浏览器使用 HTML 5 的前提也就是要求 HTML 5 能够符合这些原则，今后也将以此为前提来支持 HTML 5.</p></li></ol><h2 id="HTML-5-版本之前的Web技术存在的问题"><a href="#HTML-5-版本之前的Web技术存在的问题" class="headerlink" title="HTML 5 版本之前的Web技术存在的问题"></a>HTML 5 版本之前的Web技术存在的问题</h2><ol><li><p>Web 浏览器之间的兼容性很低（即规范不统一）</p></li><li><p>文档结构不够明确（即语义化不明确）</p></li><li><p>Web 应用程序的功能受到了限制（Web应用程序的功能实现无保障）</p><p>HTML 5 针对以上问题，统一了一个通用标准，追加了许多结构相关的语义化元素，并结合了包括<strong>微格式、无障碍应用</strong>在内的各种各样的周边技术。同时 HTML 5 开始提供各种各样Web应用上的新API，各浏览器也在快速地封装着这些API，HTML 5 已经使富Web应用地实现变成了可能。</p></li></ol><h1 id="第二章-HTML-5-与-HTML-4-的区别"><a href="#第二章-HTML-5-与-HTML-4-的区别" class="headerlink" title="第二章 HTML 5 与 HTML 4 的区别"></a>第二章 HTML 5 与 HTML 4 的区别</h1><h2 id="从-HTML-5-开始，对于文件的字符编码，推荐使用UTF-8。"><a href="#从-HTML-5-开始，对于文件的字符编码，推荐使用UTF-8。" class="headerlink" title="从 HTML 5 开始，对于文件的字符编码，推荐使用UTF-8。"></a>从 HTML 5 开始，对于文件的字符编码，推荐使用UTF-8。</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/*HTML 4 中指定文档的字符编码*/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/*HTML 5 中指定文档的字符编码*//*以上两种方法都可以使用，但是不可以同时混合使用，如像下面使用是错误的*/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标签插件</title>
      <link href="/2019/11/28/index/"/>
      <url>/2019/11/28/index/</url>
      
        <content type="html"><![CDATA[<h1 id="标签插件（Tag-Plugins）"><a href="#标签插件（Tag-Plugins）" class="headerlink" title="标签插件（Tag Plugins）"></a>标签插件（Tag Plugins）</h1><p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p><h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><p>在文章中插入引言，可包含作者、来源和标题。</p><p><strong>别号：</strong> quote</p><pre><code>{% blockquote [author[, source]] [link] [source_link_title] %}content{% endblockquote %}```### 样例**没有提供参数，则只输出普通的 blockquote**```{% blockquote %}Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.{% endblockquote %}</code></pre><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><p><strong>引用书上的句子</strong></p><pre><code>{% blockquote David Levithan, Wide Awake %}Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.{% endblockquote %}```> Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.>> **David Levithan**Wide Awake**引用 Twitter**```{% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %}NEW: DevDocs now comes with syntax highlighting. http://devdocs.io{% endblockquote %}</code></pre><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io/" target="_blank" rel="noopener">http://devdocs.io</a></p><p><strong>@DevDocs</strong><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="noopener">twitter.com/devdocs/status/356095192085962752</a></p></blockquote><p><strong>引用网络上的文章</strong></p><pre><code>{% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %}Every interaction is both precious and an opportunity to delight.{% endblockquote %}</code></pre><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><p><strong>Seth Godin</strong><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="noopener">Welcome to Island Marketing</a></p></blockquote><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>在文章中插入代码。</p><p><strong>别名：</strong> code</p><pre><code>{% codeblock [title] [lang:language] [url] [link text] %}code snippet{% endcodeblock %}```### 样例**普通的代码块**```{% codeblock %}alert('Hello World!');{% endcodeblock %}alert(&#39;Hello World!&#39;);</code></pre><p><strong>指定语言</strong></p><pre><code>{% codeblock lang:objc %}[rectangle setX: 10 y: 10 width: 20 height: 20];{% endcodeblock %}[rectangle setX: 10 y: 10 width: 20 height: 20];```**附加说明**```{% codeblock Array.map %}array.map(callback[, thisArg]){% endcodeblock %}Array.maparray.map(callback[, thisArg])</code></pre><p><strong>附加说明和网址</strong></p><pre><code>{% codeblock _.compact http://underscorejs.org/#compact Underscore.js %}_.compact([0, 1, false, 2, '', 3]);=> [1, 2, 3]{% endcodeblock %}_.compactUnderscore.js_.compact([0, 1, false, 2, &#39;&#39;, 3]);=&gt; [1, 2, 3]</code></pre><h2 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a>反引号代码块</h2><p>另一种形式的代码块，不同的是它使用三个反引号来包裹。</p><p>``` [language] [title] [url] [link text] code snippet ```</p><h2 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h2><p>在文章中插入 Pull quote。</p><pre><code>{% pullquote [class] %}content{% endpullquote %}</code></pre><h2 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h2><p>在文章中嵌入 jsFiddle。</p><pre><code>{% jsfiddle shorttag [tabs] [skin] [width] [height] %}</code></pre><h2 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h2><p>在文章中嵌入 Gist。</p><pre><code>{% gist gist_id [filename] %}</code></pre><h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><p>在文章中插入 iframe。</p><pre><code>{% iframe url [width] [height] %}</code></pre><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><p>在文章中插入指定大小的图片。</p><pre><code>{% img [class names] /path/to/image [width] [height] "title text 'alt text'" %}</code></pre><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p>在文章中插入链接，并自动给外部链接添加 <code>target=&quot;_blank&quot;</code> 属性。</p><pre><code>{% link text url [external] [title] %}</code></pre><h2 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h2><p>插入 <code>source/downloads/code</code> 文件夹内的代码文件。<code>source/downloads/code</code> 不是固定的，取决于你在配置文件中 <code>code_dir</code> 的配置。</p><pre><code>{% include_code [title] [lang:language] [from:line] [to:line] path/to/file %}</code></pre><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><strong>嵌入 test.js 文件全文</strong></p><pre><code>{% include_code lang:javascript test.js %}</code></pre><p><strong>只嵌入第 3 行</strong></p><pre><code>{% include_code lang:javascript from:3 to:3 test.js %}</code></pre><p><strong>嵌入第 5 行至第 8 行</strong></p><pre><code>{% include_code lang:javascript from:5 to:8 test.js %}</code></pre><p><strong>嵌入第 5 行至文件结束</strong></p><pre><code>{% include_code lang:javascript from:5 test.js %}</code></pre><p><strong>嵌入第 1 行至第 8 行</strong></p><pre><code>{% include_code lang:javascript to:8 test.js %}</code></pre><h2 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h2><p>在文章中插入 Youtube 视频。</p><pre><code>{% youtube video_id %}</code></pre><h2 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h2><p>在文章中插入 Vimeo 视频。</p><pre><code>{% vimeo video_id %}</code></pre><h2 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h2><p>引用其他文章的链接。</p><pre><code>{% post_path filename %}{% post_link filename [title] [escape] %}</code></pre><p>在使用此标签时可以忽略文章文件所在的路径或者文章的永久链接信息、如语言、日期。</p><p>例如，在文章中使用 <code>{% post_link how-to-bake-a-cake %}</code> 时，只需有一个名为 <code>how-to-bake-a-cake.md</code> 的文章文件即可。即使这个文件位于站点文件夹的 <code>source/posts/2015-02-my-family-holiday</code>目录下、或者文章的永久链接是 <code>2018/en/how-to-bake-a-cake</code>，都没有影响。</p><p>默认链接文字是文章的标题，你也可以自定义要显示的文本。此时不应该使用 Markdown 语法 <code>[]()</code>。</p><p>默认对文章的标题和自定义标题里的特殊字符进行转义。可以使用<code>escape</code>选项，禁止对特殊字符进行转义。</p><p><strong>链接使用文章的标题</strong></p><pre><code>{% post_link hexo-3-8-released %}</code></pre><p><a href="https://hexo.io/news/2018/10/19/hexo-3-8-released/" target="_blank" rel="noopener">Hexo 3.8.0 Released</a></p><p><strong>链接使用自定义文字</strong></p><pre><code>{% post_link hexo-3-8-released '通往文章的链接' %}</code></pre><p><a href="https://hexo.io/news/2018/10/19/hexo-3-8-released/" target="_blank" rel="noopener">通往文章的链接</a></p><p><strong>对标题的特殊字符进行转义</strong></p><pre><code>{% post_link hexo-4-released 'How to use <b> tag in title' %}</code></pre><p><a href="https://hexo.io/news/2019/10/14/hexo-4-released/" target="_blank" rel="noopener">How to use  tag in title</a></p><p><strong>禁止对标题的特殊字符进行转义</strong></p><pre><code>{% post_link hexo-4-released '<b>bold</b> custom title' false %}</code></pre><p><a href="https://hexo.io/news/2019/10/14/hexo-4-released/" target="_blank" rel="noopener"><strong>bold</strong> custom title</a></p><h2 id="引用资源"><a href="#引用资源" class="headerlink" title="引用资源"></a>引用资源</h2><p>引用文章的资源。</p><pre><code>{% asset_path filename %}{% asset_img filename [title] %}{% asset_link filename [title] [escape] %}</code></pre><h2 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h2><p>如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。</p><pre><code>{% raw %}content{% endraw %}</code></pre><h2 id="文章摘要和截断"><a href="#文章摘要和截断" class="headerlink" title="文章摘要和截断"></a>文章摘要和截断</h2><p>在文章中使用 <code>，那么</code> 之前的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。</p><p>例如：</p><pre><code>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;!-- more --&gt;Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</code></pre><p>首页中将只会出现</p><pre><code>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</code></pre><p>正文中则会出现</p><pre><code>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</code></pre><p>注意，摘要可能会被 Front Matter 中的 <code>excerpt</code> 覆盖。</p><p>属性<br>文章可以拥有如下属性：</p><table><thead><tr><th>Setting</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td>layout</td><td>Layout</td><td>post或page</td></tr><tr><td>title</td><td>文章的标题</td><td></td></tr><tr><td>date</td><td>创建日期</td><td>文件的创建日期</td></tr><tr><td>updated</td><td>修改日期</td><td>文件的修改日期</td></tr><tr><td>comments</td><td>是否开启评论</td><td>true</td></tr><tr><td>tags</td><td>标签</td><td></td></tr><tr><td>categories</td><td>分类</td><td></td></tr><tr><td>permalink</td><td>url中的名字</td><td>文件名</td></tr></tbody></table><p>动态博客中通过发布文章页面设置的各种属性，在hexo里要这样设置。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github+Matery 主题配置</title>
      <link href="/2019/11/28/hexo-github-matery-zhu-ti-pei-zhi/"/>
      <url>/2019/11/28/hexo-github-matery-zhu-ti-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="HexoMatery-主题配置"><a href="#HexoMatery-主题配置" class="headerlink" title="HexoMatery 主题配置"></a>HexoMatery 主题配置</h1><h1 id="Matery"><a href="#Matery" class="headerlink" title="Matery"></a>Matery</h1><p><a href="http://hits.dwyl.io/blinkfox/hexo-theme-matery" target="_blank" rel="noopener"><img src="http://hits.dwyl.io/blinkfox/hexo-theme-matery.svg" alt="HitCount"></a> <a href="https://gitter.im/hexo-theme-matery/Lobby?utm_source=badge" target="_blank" rel="noopener"><img src="https://img.shields.io/gitter/room/blinkfox/hexo-theme-matery.svg" alt="Gitter"></a> <a href="https://github.com/blinkfox/hexo-theme-matery/issues" target="_blank" rel="noopener"><img src="https://img.shields.io/github/issues/blinkfox/hexo-theme-matery.svg" alt="GitHub issues"></a> <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/LICENSE" target="_blank" rel="noopener"><img src="https://img.shields.io/github/license/blinkfox/hexo-theme-matery.svg" alt="GitHub license"></a> <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/downloads-master-green.svg" alt="Download"></a> <a href="http://hexo.io" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/hexo-%3E%3D%203.0-blue.svg" alt="Hexo Version"></a> <a href="https://github.com/blinkfox/hexo-theme-matery/network" target="_blank" rel="noopener"><img src="https://img.shields.io/github/forks/blinkfox/hexo-theme-matery.svg" alt="GitHub forks"></a> <a href="https://github.com/blinkfox/hexo-theme-matery/stargazers" target="_blank" rel="noopener"><img src="https://img.shields.io/github/stars/blinkfox/hexo-theme-matery.svg" alt="GitHub stars"></a></p><p><a href="README.md">English Document</a> | <a href="https://blinkfox.github.io/" target="_blank" rel="noopener">演示示例</a> | </p><blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown</a> 来写博客和文章。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master" target="_blank" rel="noopener">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"ttps://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  custom_css<span class="token punctuation">:</span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h3 id="中文链接转拼音（可选的）"><a href="#中文链接转拼音（可选的）" class="headerlink" title="中文链接转拼音（可选的）"></a>中文链接转拼音（可选的）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（可选的）"><a href="#文章字数统计插件（可选的）" class="headerlink" title="文章字数统计插件（可选的）"></a>文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 将这个值设置为 true 即可.</span>  <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://github.com/blinkfox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fa-facebook</code></li><li>Twitter: <code>fa-twitter</code></li><li>Google-plus: <code>fa-google-plus</code></li><li>Linkedin: <code>fa-linkedin</code></li><li>Tumblr: <code>fa-tumblr</code></li><li>Medium: <code>fa-medium</code></li><li>Slack: <code>fa-slack</code></li><li>新浪微博: <code>fa-weibo</code></li><li>微信: <code>fa-wechat</code></li><li>QQ: <code>fa-qq</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>4.7.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"五月雨变奏电音"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"AnimeVibe"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music1.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover1.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Take me hand"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"DAISHI DANCE,Cecile Corbel"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/medias/music/music2.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"/medias/music/cover2.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Shape of You"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"J.Fla"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music3.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover3.png"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><blockquote><p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p></blockquote><p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 是否在首页显示音乐.</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span> <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'list'</span> <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span> <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7 </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 列表默认折叠</span>  <span class="token key atrule">listMaxHeight</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 列表最大高度</span></code></pre><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 和背景颜色相同的文字颜色，目前仅在首页一个地方使用到，你也可以将此样式应用到其他地方. */</span><span class="token selector"><span class="token class">.text-color</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#0f9d58</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本记录"><a href="#版本记录" class="headerlink" title="版本记录"></a>版本记录</h2><ul><li>v1.0.0<ul><li>新增了所有基础功能；</li></ul></li><li>v1.0.1<ul><li>调整 <code>css</code>、<code>js</code> 的文件请求路径在主题的<code>_config.yml</code>中配置，便于你更快捷的配置自己的 CDN；</li><li>新增代码是否折行为可配置，默认为折行；</li><li>默认激活 <code>TOC</code> 功能，并新增为某篇文章关闭 <code>TOC</code> 的 <code>Front-matter</code> 配置选项；</li><li>修复文章滚动时，高亮的目录选项不准确的问题；</li><li><code>IOS</code>下移除搜索框自动获得焦点属性，防止自动获得焦点后导致视图上移；</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo主题 </tag>
            
            <tag> github </tag>
            
            <tag> github命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript面向对象</title>
      <link href="/2019/11/28/js-mian-xiang-dui-xiang/"/>
      <url>/2019/11/28/js-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript-面向对象-精选"><a href="#JavaScript-面向对象-精选" class="headerlink" title="JavaScript 面向对象 精选"></a>JavaScript 面向对象 精选</h3><p>模拟京东倒计时</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">countTime</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> nowTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> inputTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> countSum <span class="token operator">=</span> <span class="token punctuation">(</span>inputTime <span class="token operator">-</span> nowTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出秒数</span>    <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countSum <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出剩余天数</span>    d <span class="token operator">=</span> d <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> d <span class="token punctuation">:</span> d<span class="token punctuation">;</span>    <span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countSum <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出剩余小时数</span>    h <span class="token operator">=</span> h <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> h <span class="token punctuation">:</span> h<span class="token punctuation">;</span>    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countSum <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出剩余分钟数</span>    m <span class="token operator">=</span> m <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> m <span class="token punctuation">:</span> m<span class="token punctuation">;</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countSum <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出剩余秒数</span>    s <span class="token operator">=</span> s <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> s <span class="token punctuation">:</span> s<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"剩余时间为："</span> <span class="token operator">+</span> d <span class="token operator">+</span> <span class="token string">"天 "</span> <span class="token operator">+</span> h <span class="token operator">+</span> <span class="token string">"小时 "</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">"分钟 "</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"现在时间为："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token function">countTime</span><span class="token punctuation">(</span><span class="token string">"2019-11-29 19:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>添加 删除数组元素的方法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1.尾部追加数组元素  push2.头部追加数组元素  unshift*/</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vaar arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span><span class="token string">"是个帅哥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>数组排序 翻转数组&amp;升序、降序</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//reverse() 翻转数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"pink"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sort() 升降序</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//升序</span>    <span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//降序</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//面试的话使用冒泡排序</span></code></pre><p>数组索引读取  <strong>有面试点</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*数组去重面试重点目标：把旧数组里面不重复的元素取出来放到新数组中，重复的元素只保留一个，放到新数组中去重；核心算法：我们遍历旧数组元素，在新数组查看是否存在此元素，存在舍弃，不存在就在新数组追加此元素*/</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span><span class="token string">"Coder"</span><span class="token punctuation">,</span><span class="token string">"Rat"</span><span class="token punctuation">,</span><span class="token string">"coder"</span><span class="token punctuation">,</span><span class="token string">"rat"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arrNew <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arrNew<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arrNew<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arrNew<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>基本包装类型 和 复杂数据类型的区别</p><p>基本包装类型 也属于对象，只不过，后来销毁了他的对象内存指向，（即有生命周期）</p><p>调用方法的时候 相当于对象 不调用方法和属性，仅是简单的赋值操作，则不会执行包装成对象再销毁的过程。</p><p>var  str = “angy”; //简单过程</p><p>var l = str.length;=&gt;</p><p>字符串的不可变性：</p><p>当重新赋值字符串，会开辟新的内存空间 原来的地址保留</p><p>因为<strong>数组</strong>的重新赋值 会把之前的干掉 不会重新开辟内存地址</p><pre class=" language-javascript"><code class="language-javascript"></code></pre><p>自调用函数</p><pre class=" language-js"><code class="language-js"></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"aoccdrrojkokdopp"</span><span class="token punctuation">;</span><span class="token keyword">var</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    num<span class="token operator">++</span><span class="token punctuation">;</span>    index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础初识</title>
      <link href="/2018/12/07/javascript-ji-chu-chu-shi/"/>
      <url>/2018/12/07/javascript-ji-chu-chu-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h1><h2 id="1-程序运行之内存条"><a href="#1-程序运行之内存条" class="headerlink" title="1. 程序运行之内存条"></a>1. 程序运行之内存条</h2><ol><li><p>打开某个程序时，先从硬盘中把程序的代码加载到内存中</p></li><li><p>CPU执行内存中的代码（此时读取的应该是机器码<code>0</code>，<code>1</code>）</p><p>之所以要内存的一个重要原因，是因为CPU运行太快了，如果只从硬盘中读取数据会浪费CPU性能，所以，才使用存取速度更快的内存来保存<strong>运行时</strong>的数据。（内存是电，硬盘是机械）</p></li></ol><h2 id="2-JavaScript-是什么"><a href="#2-JavaScript-是什么" class="headerlink" title="2. JavaScript 是什么"></a>2. JavaScript 是什么</h2><ol><li><p>JavaScript 是运行在客户端的脚本语言 (script 脚本的意思)，运行过程中不需要编译，由 JS 解释器（如chrome V8引擎）<strong>逐行解释</strong>执行（<strong>如果执行到错误代码，直接报错，后面不再执行</strong>）</p><p>浏览器本身并不会执行JS代码，而是通过内置JavaScript引擎（解释器）来执行JS代码。JS引擎执行代码时逐行解释每一句源码（转为机器语言），然后由计算机去执行，所以JavaScript语言归为脚本语言，会逐行解释执行。</p></li><li><p>现在也可以基于Node.js实现服务器端编程</p></li></ol><h2 id="3-JavaScript-的作用"><a href="#3-JavaScript-的作用" class="headerlink" title="3. JavaScript 的作用"></a>3. JavaScript 的作用</h2><ol><li><p>表单动态校验（<strong>密码强度检测</strong>）(JS产生的最初目的)</p></li><li><p>页面特效</p></li><li><p>服务端开发（Node.js）</p><p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p><p>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</p><p>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p></li><li><p>桌面程序 （Electron）</p></li><li><p>APP（Cordova）</p></li><li><p>控制硬件-物联网（Ruff）</p></li><li><p>游戏开发（cocos2d-js）</p></li></ol><h2 id="4-JavaScript-与-HTML-与-CSS-之间的关系"><a href="#4-JavaScript-与-HTML-与-CSS-之间的关系" class="headerlink" title="4. JavaScript 与 HTML 与 CSS 之间的关系"></a>4. JavaScript 与 HTML 与 CSS 之间的关系</h2><ol><li><strong>HTML</strong> 定义了网页的内容</li><li><strong>CSS</strong> 描述了网页的布局</li><li><strong>JavaScript</strong> 网页的行为</li></ol><h2 id="5-Javascript-的组成"><a href="#5-Javascript-的组成" class="headerlink" title="5. Javascript 的组成"></a>5. Javascript 的组成</h2><ol><li><p><code>ECMAScript</code>  JavaScript语法</p><p>ECMAScript 是由ECMA国际（原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为<code>JavaScript</code>（网景公司）或<code>JScript</code>（微软公司），但实际上后两者是ECMAScript语言的实现和扩展。</p><p>ECMAScript规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</p></li><li><p><code>DOM</code>  页面文档对象模型 Document Object Model</p><p>是W3C组织推荐的处理可扩展标记语言的<strong>标准编程接口</strong>，通过DOM提供的接口可以对页面中各种元素进行操作（大小、位置、颜色等）；</p></li><li><p><code>BOM</code>  浏览器对象模型 Browser Object Model</p><p>他提供了独立于内容的、可以与<strong>浏览器窗口进行互动</strong>的对象结构。通过BOM可以<strong>操作浏览器窗口</strong>，比如：弹出框、控制浏览器跳转、获取分辨率等。</p></li></ol><h2 id="6-JavaScript-的三种引入方式"><a href="#6-JavaScript-的三种引入方式" class="headerlink" title="6. JavaScript 的三种引入方式"></a>6. JavaScript 的三种引入方式</h2><ol><li><p>行内式的 JS</p></li><li><p>内嵌式的 JS</p></li><li><p>外部式的 JS 双标签</p><p><code>&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</code></p></li></ol><h2 id="7-JavaScript-输入输出语句"><a href="#7-JavaScript-输入输出语句" class="headerlink" title="7. JavaScript 输入输出语句"></a>7. JavaScript 输入输出语句</h2><table><thead><tr><th>方法</th><th>说明</th><th>归属</th><th>返回值</th></tr></thead><tbody><tr><td>aler(msg)</td><td>浏览器弹出警示框</td><td>浏览器</td><td>undefined</td></tr><tr><td>console.log(msg)</td><td>浏览器控制台打印输出信息</td><td>浏览器</td><td>undefined</td></tr><tr><td>prompt(info)</td><td>浏览器弹出输入框，用户可以输入</td><td>浏览器</td><td>输入的内容</td></tr></tbody></table><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>复习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p><strong>控制台结果分析</strong></p><p><code>输入的内容</code> prompt的返回值<br><code>undefined</code>  alert不属于JavaScript的内部函数，属于web API<br><code>请输入</code>  console.log()执行的结果<br><code>undefined</code>  console.log()不属于JavaScript的内部函数，属于web API</p></blockquote><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>白话说：装东西的盒子</p><p>通俗：<strong>变量是用于存放数据的容器</strong>。我们通过变量名获取数据，数据可以修改。</p><p>本质：变量是程序在<strong>内存</strong>中申请一块用来存放数据的空间。</p><h2 id="1-变量的使用"><a href="#1-变量的使用" class="headerlink" title="1. 变量的使用"></a>1. 变量的使用</h2><ol><li><p>声明变量</p><p><code>var 变量名;</code></p><p><code>var</code> 是 JS 关键字，用来声明变量（variable）。使用该关键字声明变量后，计算机会自动为变量分配内存空间。</p><p><code>变量名</code> 是我们定义的变量名，我们需要通过变量名访问内存中分配的空间。</p></li><li><p>赋值</p><p>变量名 = 10;</p></li><li><p>变量初始化</p><p>声明一个变量并赋值，称之为<code>变量的初始化</code>。</p><p>var 变量名 = 值；</p></li></ol><blockquote><p>变量名的命名规则遵循小驼峰命名法</p></blockquote><ol start="4"><li><p>更新变量（同一作用域内）</p><p>一个变量被重新赋值后，它的原有值会被覆盖，变量值以最后一次付的值为准。</p></li><li><p>同时声明/初始化多个变量</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span>    address <span class="token operator">=</span> <span class="token string">"中国安徽"</span><span class="token punctuation">,</span>    salary <span class="token operator">=</span> <span class="token number">8000</span><span class="token punctuation">;</span></code></pre></li><li><p>声明变量的特殊情况</p><table><thead><tr><th>情况</th><th>consol.log()的结果是</th></tr></thead><tbody><tr><td>只声明 不赋值</td><td>undefined</td></tr><tr><td>不声明 不赋值</td><td>报错</td></tr><tr><td>不声明 直接赋值</td><td>正常输出（默认加上var关键字，为全局变量，即使在函数中，也提升为全局变量）</td></tr></tbody></table></li></ol><h2 id="2-变量的命名规范"><a href="#2-变量的命名规范" class="headerlink" title="2. 变量的命名规范"></a>2. 变量的命名规范</h2><ol><li>字母 数字 下划线 <code>_</code> 美元符号 <code>$</code>（不能有空格）</li><li><strong>严格区分大小写</strong></li><li><strong>不能以数字开头</strong></li><li><strong>不能是关键字、保留字</strong>：var for while等 及特殊含义的<code>name</code></li><li>变量名必须有意义，最好转化为对应的单词，或者单词简写</li><li>遵循小驼峰命名法：首字母小写，后面单词的首字母需要大写。如<code>myFirstName</code></li></ol><h2 id="3-练习：简单交换变量"><a href="#3-练习：简单交换变量" class="headerlink" title="3. 练习：简单交换变量"></a>3. 练习：简单交换变量</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//思想：（新声明一个临时变量，作为交换媒介）</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>结果</p><p>(2) [“age”, 10]*</p><ol><li><p>0: “age”</p></li><li><p>1: 10</p></li><li><p>length: 2</p></li></ol></blockquote><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>变量是用来存储值的，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。<strong>JavaScript是一种弱类型或者动态语言</strong>。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定，而且数据类型是可以变化的。</p><h2 id="1-数据类型的分类"><a href="#1-数据类型的分类" class="headerlink" title="1. 数据类型的分类"></a>1. 数据类型的分类</h2><ol><li><p>简单数据类型</p><p>Number,String,Boolean,Undefined,Null</p></li><li><p>复杂数据类型</p><p>Object</p></li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> boo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> boo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>0 false 0 undefined null  第一个值是Number的默认值<code>0</code>；第二个值是Boolean的默认值<code>false</code>;第三个值是String的默认值为<code>“”</code>的索引。</p></blockquote><h3 id="1-1-Number-数字型"><a href="#1-1-Number-数字型" class="headerlink" title="1.1 Number 数字型"></a>1.1 Number 数字型</h3><blockquote><p><strong>进制</strong></p><p>八进制：<code>0</code>开头  0~7     <code>8 = 010；</code></p><p>十六进制：<code>0x</code>开头 0-9  a~f  <code>16 = 0x10;</code></p></blockquote><blockquote><p><strong>数字型范围</strong></p><p>最大值：<code>Number.MAX_VALUE</code></p><p>最小值：<code>Number.MIN_VALUE</code></p></blockquote><blockquote><p><strong>数字型三个特殊值</strong></p><ol><li><p><code>Infinity</code> 无穷大，大于任何值</p><p><code>console.log(Number.MAX_VALUE * 2);</code></p></li><li><p><code>-Infinity</code> 无穷小，小于任何值</p><p><code>console.log(-Number.MAX_VALUE * 2);</code></p></li><li><p><code>NaN</code> Not a Number，非数值（用了数学运算符，无法算出内容）</p><p><code>console.log(&quot;Coder Rat&quot; - 20);</code></p></li></ol></blockquote><blockquote><p><strong>isNaN()</strong></p><p>用来判断一个变量是否为<strong>非数字</strong>的类型，返回true或者false</p><p>用法：<code>isNaN(a);</code> </p><p>如果a为数字  则返回 false</p><p>如果a为非数字  则返回 true</p><p>可以用来判断用户输入的是否为数字</p><pre class=" language-js"><code class="language-js"><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// strings</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"37"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// false: 可以被转换成数值37</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"37.37"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// false: 可以被转换成数值37.37</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"37,5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'123ABC'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true:  parseInt("123ABC")的结果是 123, 但是Number("123ABC")结果是 NaN</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// false: 空字符串被转换成0</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// false: 包含空格的字符串被转换成0</span><span class="token comment" spellcheck="true">// dates</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"blabla"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// true: "blabla"不能转换成数值</span>                  <span class="token comment" spellcheck="true">// 转换成数值失败， 返回NaN</span></code></pre></blockquote><blockquote><p><strong><code>isNaN</code> 函数的必要性</strong></p><p>与 JavaScript 中其他的值不同，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN" target="_blank" rel="noopener"><code>NaN</code></a>不能通过相等操作符（== 和 ===）来判断 ，因为 <code>NaN == NaN</code> 和 <code>NaN === NaN</code> 都会返回 <code>false</code>。 因此，<code>isNaN</code> 就很有必要了。</p></blockquote><blockquote><p> <strong><code>NaN值</code>的产生</strong></p><p>当算术运算返回一个未定义的或无法表示的值时，<code>NaN</code>就产生了。但是，<code>NaN</code>并不一定用于表示某些值超出表示范围的情况。将某些不能强制转换为数值的非数值转换为数值的时候，也会得到<code>NaN</code>。</p><p>例如，0 除以0会返回<code>NaN</code>—— 但是其他数除以0则不会返回<code>NaN</code>。</p></blockquote><h3 id="1-2-String-字符串型"><a href="#1-2-String-字符串型" class="headerlink" title="1.2 String 字符串型"></a>1.2 String 字符串型</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'我是字符串'</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'我是"Coder Rat",是个程序员'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//嵌套使用的话，遵循外单内双，或者外双内单</span></code></pre><h4 id="1-2-1-字符串转义字符"><a href="#1-2-1-字符串转义字符" class="headerlink" title="1.2.1 字符串转义字符"></a>1.2.1 字符串转义字符</h4><ol><li><code>\n</code>  换行符，newline</li><li><code>\\</code>  斜杠</li><li><code>\&#39;</code>  单引号</li><li><code>\&quot;</code>  双引号</li><li><code>\t</code>  tab缩进，制表符</li><li><code>\b</code>  空格，b是blank的意思 一个空格的话等同于直接空格</li></ol><pre class=" language-js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'酷热难耐，火辣的太阳底下，我挺拔的身姿，成为了最独特的风景。\n我审视四周，这里，是我的舞台，我就是天地间的王者。\n这一刻，我豪气冲天，大喊一声："收破烂啦~"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="1-2-2-字符串长度-length"><a href="#1-2-2-字符串长度-length" class="headerlink" title="1.2.2 字符串长度 length"></a>1.2.2 字符串长度 length</h4><p>用于检测字符串的长度</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> strMsg <span class="token operator">=</span> <span class="token string">"I am Coder Rat."</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strMsg <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> strMsg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>I am Coder Rat.<br>15</p><!--注意：空格和符号也占字符串长度--></blockquote><h4 id="1-2-3-字符串的拼接"><a href="#1-2-3-字符串的拼接" class="headerlink" title="1.2.3 字符串的拼接"></a>1.2.3 字符串的拼接</h4><p>多个字符串之间可以使用 <code>+</code> 进行拼接，其拼接方式为 :</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//拼接后的新字符串 = 字符串 + 任何类型;</span><span class="token keyword">var</span> strNew <span class="token operator">=</span> <span class="token string">"我是Coder Rat，我"</span> <span class="token operator">+</span> <span class="token number">18</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">"岁了"</span><span class="token punctuation">,</span><span class="token string">"你呢？"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"不告诉你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token boolean">false</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strNew<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"12"</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"1212"</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"1212" 这就是正常的数字相加，数字+数字+String</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//24 这就是正常的数字相加，数字+数字</span></code></pre><blockquote><p> 我是Coder Rat，我18岁了,你呢？Thu Dec 05 2018 21:16:36 GMT+0800 (中国标准时间)function () {<br>        alert(“不告诉你”);<br>    }false<br>null</p></blockquote><!-- 注意：拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串，函数的话也不会执行，直接返回函数体，方法调用会执行，将结果转为字符串以供拼接 --><h3 id="1-3-Boolean-布尔型"><a href="#1-3-Boolean-布尔型" class="headerlink" title="1.3 Boolean 布尔型"></a>1.3 Boolean 布尔型</h3><p>布尔型有两个值：<code>true</code> <code>false</code>，其中true表示真（对），false表示假（错）</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*Boolean类型的值，可以参与数学运算true === 1false === 0*/</span><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">var</span> flag1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> flag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> flag1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> flag <span class="token operator">+</span> flag1<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>2<br>1<br>1</p></blockquote><h3 id="1-4-Undefined-amp-Null"><a href="#1-4-Undefined-amp-Null" class="headerlink" title="1.4 Undefined &amp; Null"></a>1.4 Undefined &amp; Null</h3><p>一个声明变量，没赋值，则这个变量为undefined类型</p><p>一个声明的变量，赋值为null，则此类型变量为Null类型的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> variable <span class="token operator">=</span> undefined <span class="token operator">+</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为undefinedCoder Rat</span><span class="token keyword">var</span> variable1 <span class="token operator">=</span> undefined <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为NaN 因为undefined == NaN</span><span class="token keyword">var</span> variable2 <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">+</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为nullCoder Rat</span><span class="token keyword">var</span> variable3 <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为 1 null为空，相当于向内存中填充了1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>undefinedCoder Rat<br>NaN<br>nullCoder Rat<br>1</p></blockquote><h2 id="2-typeof-获取变量数据类型"><a href="#2-typeof-获取变量数据类型" class="headerlink" title="2. typeof 获取变量数据类型"></a>2. typeof 获取变量数据类型</h2><p>用法：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//返回值为变量的数据类型</span><span class="token keyword">typeof</span> 变量<span class="token punctuation">;</span></code></pre><h2 id="3-字面量"><a href="#3-字面量" class="headerlink" title="3. 字面量"></a>3. 字面量</h2><p>字面量是在代源码中，一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span><span class="token keyword">var</span> boo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">var</span> und <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token keyword">var</span> nul <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是匿名函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="4-数据类型转换"><a href="#4-数据类型转换" class="headerlink" title="4. 数据类型转换"></a>4. 数据类型转换</h2><p><strong>变量的数据类型为什么需要进行转换？</strong></p><p>使用表单、prompt获取过来的数据默认是字符串类型的，此时就不能直接简单地进行数学运算，而需要转换变量的数据类型，从而达到目的。</p><p>通俗来说：数据类型转换就是把一种数据类型的变量转换成另一种想要的数据类型。</p><p><strong>常用的转换</strong></p><ol><li>转换为字符串类型</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*--调用对象的内置方法--变量/(字面量).toString();*/</span><span class="token comment" spellcheck="true">/*-- 强制转换方法 --String(变量/字面量); 调用String构造器interface StringConstructor {    new(value?: any): String;    (value?: any): string;    readonly prototype: String;    fromCharCode(...codes: number[]): string;}*/</span><span class="token comment" spellcheck="true">/*字面量的话，使用.toString()最好是加上括号，比如数字.toString();不加括号就会报错*/</span><span class="token comment" spellcheck="true">/*-- 隐式转换 --  最常用的方法加号拼接字符串任何类型的数据与字符串以 + 号相连，则数据会被先强制转换为字符串，再和字符串相连*/</span></code></pre><ol start="2"><li>转换为数字型</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. parseInt();  将String类型转换为整数数值型2. parseFloat(); 将String类型转换为浮点数型3. Number(); 强制转换4. - * / 隐式转换 通过数学运算符，不包括 +*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"18.18"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"rem12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"18.18"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"rem12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"12px"</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"12"</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"126"</span> <span class="token operator">-</span> <span class="token string">"120"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>18<br />18<br />12<br />NaN<br />18.18<br />12<br />NaN<br />NaN<br />12<br />NaN<br />12<br />6</p></blockquote><pre class=" language-js"><code class="language-js">简单的加法器<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入第一个值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入第二个值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> b <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// var sum = Number(a) + Number(b);</span><span class="token comment" spellcheck="true">// var sum = parseFloat(a) + parseFloat(b);</span><span class="token function">alert</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>转换为布尔型</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*方法：Boolean()函数代表空、否定的值会被转为false如 ""、0、NaN、null、undefined其余的值都会被转换为true*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"Coder Rat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"NaN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span></code></pre><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="1-解释型语言和编译型语言"><a href="#1-解释型语言和编译型语言" class="headerlink" title="1. 解释型语言和编译型语言"></a>1. 解释型语言和编译型语言</h3><p>计算机不能直接理解任何除机器语言以外的其他语言，所以必须要把程序员所编写的程序语言翻译成机器语言才能执行程序。程序语言翻译成机器语言的工具，被称为翻译器。</p><p>编程语言 :point_right:翻译器:point_right:机器语言（二进制）</p><p>翻译器翻译的方式有两种：一个是<strong>编译</strong>，另外一个是<strong>解释</strong>。</p><p>两者的区别在于：<strong>翻译的时间点不同</strong></p><p>编译器：是在代码执行之前进行编译，生成中间代码文件</p><p>解释器：是在运行时进行及时解释，并立即执行（当编译器以解释方式运行的时候，也称之为解释器，如Java的 JIT 机制）</p><h3 id="JIT概念"><a href="#JIT概念" class="headerlink" title="JIT概念"></a>JIT概念</h3><p>JIT：Just In Time Compiler，一般翻译为即时编译器，这是是针对解释型语言而言的，而且并非虚拟机必须，是一种优化手段，Java的商用虚拟机HotSpot就有这种技术手段，Java虚拟机标准对JIT的存在没有作出任何规范，所以这是虚拟机实现的自定义优化技术。</p><p>  HotSpot虚拟机的执行引擎在执行Java代码是可以采用【解释执行】和【编译执行】两种方式的，如果采用的是编译执行方式，那么就会使用到JIT，而解释执行就不会使用到JIT，所以，早期说Java是解释型语言，是没有任何问题的，而在拥有JIT的Java虚拟机环境下，说Java是解释型语言严格意义上已经不正确了。</p><p>  HotSpot中的编译器是javac，他的工作是将源代码编译成字节码，这部分工作是完全独立的，完全不需要运行时参与，所以Java程序的编译是半独立的实现。有了字节码，就有解释器来进行解释执行，这是早期虚拟机的工作流程，后来，虚拟机会将执行频率高的方法或语句块通过JIT编译成本地机器码，提高了代码执行的效率，至此你已经了解了JIT在Java虚拟机中所处的地位和工作的主要内容。</p><p><strong>1.JIT的工作原理图</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2hpLmNzZG4ubmV0L2F0dGFjaG1lbnQvMjAxMTA5LzE2LzBfMTMxNjE1OTYwNGRTNjAuZ2lm" alt="img"><br>工作原理<br>当JIT编译启用时（默认是启用的），JVM读入.class文件解释后，将其发给JIT编译器。JIT编译器将字节码编译成本机机器代码。 </p><p>通常javac将程序源码编译，转换成java字节码，JVM通过解释字节码将其翻译成相应的机器指令，逐条读入，逐条解释翻译。非常显然，经过解释运行，其运行速度必定会比可运行的二进制字节码程序慢。为了提高运行速度，引入了JIT技术。 </p><p>在执行时JIT会把翻译过的机器码保存起来，已备下次使用，因此从理论上来说，採用该JIT技术能够，能够接近曾经纯编译技术。 </p><p><strong>2.相关知识</strong><br>JIT是just in time,即时编译技术。使用该技术，可以加速java程序的运行速度。 </p><p>JIT并不总是奏效，不能期望JIT一定可以加速你代码运行的速度，更糟糕的是她有可能减少代码的运行速度。这取决于你的代码结构，当然非常多情况下我们还是可以如愿以偿的。 </p><p>从上面我们知道了之所以要关闭JITjava.lang.Compiler.disable(); 是由于加快运行的速度。由于JIT对每条字节码都进行编译，造成了编译过程负担过重。为了避免这样的情况，当前的JIT仅仅对常常运行的字节码进行编译，如循环等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 初识JS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
