<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VUE全家桶</title>
      <link href="/2020/02/12/vue-quan-jia-tong/"/>
      <url>/2020/02/12/vue-quan-jia-tong/</url>
      
        <content type="html"><![CDATA[<p>作者： 尤雨溪</p><h2 id="Vue-渐进式JavaScript框架"><a href="#Vue-渐进式JavaScript框架" class="headerlink" title="Vue: 渐进式JavaScript框架"></a>Vue: 渐进式JavaScript框架</h2><p>目前框架和库的界限并不明显</p><blockquote><p>声明式渲染→组件系统→客户端路由→集中式状态管理→项目构建</p><p>可以使用VUE全家桶中的一个或多个功能</p><p>学习VUE对微信小程序的开发有一定的帮助</p></blockquote><h3 id="VUE-基础使用"><a href="#VUE-基础使用" class="headerlink" title="VUE 基础使用"></a>VUE 基础使用</h3><pre class=" language-html"><code class="language-html">1.创建模板 插值表达式 放在模板的内部2.导入vue.js库文件3.通过vue渲染模板- 创建vue实例let vm = new Vue({    el: '#app', // 设置vue实例控制的模板    data: { // data属性：保存vue实例的数据        msg: 'vue 渲染数据'，     }})</code></pre><p>Vue.js模板语法  类似于art-template</p><h5 id="什么是前端渲染："><a href="#什么是前端渲染：" class="headerlink" title="什么是前端渲染："></a>什么是前端渲染：</h5><p>把数据填充到模板再渲染到HTML的过程</p><h5 id="前端渲染的方式"><a href="#前端渲染的方式" class="headerlink" title="前端渲染的方式"></a>前端渲染的方式</h5><ol><li><p>原生js拼接字符串</p><p>基本上就是将字符串和html标签进行拼接，然后再通过DOM操作渲染到页面中</p><p>缺点：没有统一的规则</p></li><li><p>art-template</p></li><li><p>Vue模板语法</p><p>模板语法概览：</p><ul><li>插值表达式</li><li>指令</li><li>事件绑定</li><li>属性绑定</li></ul></li></ol><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>什么是指令？</p><ol><li>什么是自定义属性 data_id=””</li><li>指令的本质就是自定义属性</li><li>指令的格式：以<code>v-</code>开头</li></ol><p>vue的编译过程：先显示插值表达式，再渲染</p><p><code>v-cloak</code>指令的用法</p><pre class=" language-html"><code class="language-html">1. 提供样式 通过属性选择器选择附带v-cloak属性的标签，在渲染之前，不显示此标签，渲染完成之后再显示  以解决页面渲染的闪动问题 因为解析完成或去除v-cloak属性[v-cloak]{    display: none;}2. 添加v-cloak属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-cloak</span><span class="token punctuation">></span></span>    {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><code>v-text</code> 填充纯文本  不会出现闪动问题</p><blockquote><p>类似 </p><p>1.原生js的 dom.innerText = `${data.msg}` </p></blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 插值表达式的方式 如果需要解决闪动问题 就需要 v-cloak 指令 配合属性选择器设置隐藏元素的样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>msg<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><code>v-html</code>填充HTML片段  存在安全问题  [XSS 攻击]</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!-</span> <span class="token attr-name">原则：本网站的内容可以使用，第三方等跨域访问的数据不可使用</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><code>v-pre</code>不渲染当前元素 直接原文输出</p><p>注意 setInterval会影响v-pre的渲染，只有首次正确</p><p><code>v-onece</code> 让vue框架只渲染一次，不在监听数据更新</p><p><code>v-model</code>   双向数据绑定 （只能绑定到表单元素上）  – 渲染到页面的过程本质上是单向数据更新 –</p><ul><li><p><strong>限制</strong></p><ul><li><code>&lt;input&gt;</code></li><li><code>&lt;select&gt;</code></li><li><code>&lt;textarea&gt;</code></li><li><code>components</code></li></ul></li><li><p><strong>修饰符</strong>：</p><ul><li><a href="https://cn.vuejs.org/v2/guide/forms.html#lazy" target="_blank" rel="noopener"><code>.lazy</code></a> - 取代 <code>input</code> 监听 <code>change</code> 事件</li><li><a href="https://cn.vuejs.org/v2/guide/forms.html#number" target="_blank" rel="noopener"><code>.number</code></a> - 输入字符串转为有效的数字</li><li><a href="https://cn.vuejs.org/v2/guide/forms.html#trim" target="_blank" rel="noopener"><code>.trim</code></a> - 输入首尾空格过滤</li></ul></li><li><p><strong>用法</strong>：</p><p>在表单控件或者组件上创建双向绑定。</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 用户更改页面中的表单元素的值，也会更改绑定数据源的值 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        {{msg}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'Vue data'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>双向数据绑定的设计思想</p><h3 id="MVVM设计思想（分而治之）"><a href="#MVVM设计思想（分而治之）" class="headerlink" title="MVVM设计思想（分而治之）"></a>MVVM设计思想（分而治之）</h3><p>① M(Model)</p><p>② V(View)</p><p>③ VM(View-Model)</p><p>Model： 数据源 data:{ msg: “vue data”}</p><p>View：页面视图  页面内容，无论是页面自有的还是渲染的</p><p>View-Model：同步M与V的模块 <code>DOM Listenner</code>  <code>Data Bindings</code></p><h4 id="设置v-model指令"><a href="#设置v-model指令" class="headerlink" title="设置v-model指令"></a><code>设置v-model</code>指令</h4><p>会给对应的页面元素或者组件绑定监听事件（双向） 如input事件</p><h4 id="v-on-事件绑定"><a href="#v-on-事件绑定" class="headerlink" title="v-on @ 事件绑定"></a><code>v-on</code> <code>@</code> 事件绑定</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 用法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        {{num}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num++<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>加1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num++<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>加1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>加1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>加1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subtraction<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>减1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subtraction($event)<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>减1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 事件函数用法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">"vue data"</span><span class="token punctuation">,</span>            num<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            add<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            subtraction<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">--</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><p>.stop 阻止事件冒泡</p><p>.prevent 阻止默认行为</p><h4 id="按键事件修饰符"><a href="#按键事件修饰符" class="headerlink" title="按键事件修饰符"></a>按键事件修饰符</h4><pre><code>@keyup.enterv-on:keyup.delete// 自定义按键修饰符Vue.config.keyCodes.diykey = 68;@keyup.diykey = &quot;函数名称/函数调用&quot;</code></pre><h4 id="v-model实现双向数据绑定的底层原理"><a href="#v-model实现双向数据绑定的底层原理" class="headerlink" title="v-model实现双向数据绑定的底层原理"></a><code>v-model</code>实现双向数据绑定的底层原理</h4><p>将页面中的</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>handle<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>msg<span class="token punctuation">=</span>$event.target.value<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>msg<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'绑定的数据'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">handle</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="Object-propertyDefined"><a href="#Object-propertyDefined" class="headerlink" title="Object.propertyDefined"></a>Object.propertyDefined</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"lee"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * Object.defineProperty：设置对象属性的         * 参数1：设置的对象         * 参数2：设置的对象属性名         * 参数3：设置对象属性的配置         * 注意：（value\writable）和（get()/set()）         * 这两对属性是互斥的，只能使用其中的一对        */</span>       Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//    value:18, // 设置属性值</span>        <span class="token comment" spellcheck="true">//    writable: false, // 是否允许重置属性值 </span>        <span class="token comment" spellcheck="true">//    configurable: false, // 是否允许属性被删除</span>        <span class="token comment" spellcheck="true">//    enumerable: false, // 设置对象属性是否能被遍历</span>        <span class="token keyword">get</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"触发了get方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 通过形参可以获取已经存在的值</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"触发了set方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过形参可以获取设置（赋）的值</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>       obj<span class="token punctuation">.</span>age  <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    delete obj.age;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="通过v-bind操作元素的类名"><a href="#通过v-bind操作元素的类名" class="headerlink" title="通过v-bind操作元素的类名"></a>通过<code>v-bind</code>操作元素的类名</h4><pre class=" language-html"><code class="language-html">1.对象绑定类名2.数组绑定类名样式绑定相关语法细节：1.对象绑定和数组绑定可以结合使用2.class绑定的值可以简化操作3.默认已有的类名如何处理</code></pre><h4 id="控制元素的显示与隐藏v-show-v-if"><a href="#控制元素的显示与隐藏v-show-v-if" class="headerlink" title="控制元素的显示与隐藏v-show v-if"></a>控制元素的显示与隐藏<code>v-show</code> <code>v-if</code></h4><pre><code>v-show: 通过操作元素的样式，控制元素的显示与隐藏注意：如果频繁的控制元素的显示与隐藏，请使用v-showv-if: 通过恢复或者删除元素的方式，控制元素的显示或者隐藏注意：在不频繁显示或者隐藏元素的前提下，如果在页面加载时不希望显示该元素，请使用v-if</code></pre><h4 id="key的作用"><a href="#key的作用" class="headerlink" title=":key的作用"></a><code>:key</code>的作用</h4><p>是vue中的一个标记，让vue区分不同的元素，这样vue解析的时候就不会复用元素。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isFlag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lable</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nickName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nickName<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>nickNameKey<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lable</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>ageKey<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>所以在遍历（v-for）的时候最好加上:key=”item.id”</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 点击按钮，将文本框的内容添加到数组中，并将数组内容展示到页面 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- key：区分不同元素 :key="item.index" 也会出现复用的现象 导致unshift添加数组元素的时候，已勾选的元素出错 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,i) in arr<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      id:{{item.id}} -- name:{{item.name}} -- 索引:{{i}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        arr<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'a'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'b'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'c'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'d'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'e'</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          obj<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将元素添加到数组的最前面</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p><strong>自定义全局指令</strong></p><p><strong>指令的作用：</strong>相当于操作页面元素的vue默认指令</p><p><strong>钩子函数：</strong>在某个时机执行的函数</p><p>bind执行时机：当指定绑定的元素时，但是元素还没有渲染到页面，所以在该函数内只能用来操作元素的样式，才能生效，js效果不能生效。</p><p>inserted执行时机：添加指令的元素追加到父元素，但是父元素未必追加到页面，所以inserted中的js效果未必生效。(仅保证父节点存在，但不一定已被插入到父节点中)</p><p>以上两种钩子函数，尽量不要操作js效果，可以相当于自定义样式</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 全局定义</span>    Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    bind<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>binding<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// el.style.color = binding.value;</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>background<span class="token punctuation">;</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- &lt;input type="text" v-color="'red'"/> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{color: white,background: red}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>el 参数：所绑定的元素，相当于dom对象，可以直接进行dom操作</p><p><strong>Vue实例对象就是一个组件</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 该组件应用于 #app 的模板内 局部生效</span><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>            color<span class="token punctuation">:</span> <span class="token string">'red'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    directives<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 局部定义 只针对"#app"的vue模板生效</span>        focus<span class="token punctuation">:</span> <span class="token punctuation">{</span>            inserted<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">{</span>                el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>binding<span class="token punctuation">)</span><span class="token punctuation">{</span>                el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>全局指令 作用域所有Vue模板</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>binding<span class="token punctuation">)</span><span class="token punctuation">{</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="如何原生js实现-v-model-指令"><a href="#如何原生js实现-v-model-指令" class="headerlink" title="如何原生js实现 v-model 指令"></a>如何原生js实现 <code>v-model</code> 指令</h4><p>原理：数据劫持 + 发布订阅者 的模式</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    更新数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 通过js实现数据的双向绑定 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> ipt <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    ipt<span class="token punctuation">.</span>oninput <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        data<span class="token punctuation">.</span>name <span class="token operator">=</span> ipt<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 数据订阅</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> ipt<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 数据劫持</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> value<span class="token punctuation">;</span>        ipt<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="计算属性-directives"><a href="#计算属性-directives" class="headerlink" title="计算属性 directives"></a>计算属性 <code>directives</code></h4><p>当一个数据的结果需要依赖多个其他数据时，例如：商品总价格需要依赖商品单价 商品数量 两个可变数据</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            price<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            total<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>                color<span class="token punctuation">:</span> <span class="token string">'red'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>            focus<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 实现js效果 可以使用inserted</span>                inserted<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">{</span>                    el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            color<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 控制样式可以用bind</span>                <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>binding<span class="token punctuation">)</span><span class="token punctuation">{</span>                    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        computed<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 计算属性</span>            sum<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>total<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="计算属性与方法的区别"><a href="#计算属性与方法的区别" class="headerlink" title="计算属性与方法的区别"></a>计算属性与方法的区别</h5><blockquote><p>计算属性，存在缓存机制（基于依赖进行缓存，因为计算逻辑是不变的，如果依赖的数据改变，缓存的结果才会改变），因此在处理复杂耗时的计算逻辑，又有可能多次复用的时候，使用计算属性要更加节省性能。</p></blockquote><pre class=" language-js"><code class="language-js">属性：<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> 计算结果<span class="token punctuation">;</span><span class="token punctuation">}</span>变成了： 属性 ： 计算结果</code></pre><p>所以，在依赖数据未更新之前，多次调用，只会执行一次计算属性对应的计算逻辑。</p><p>方法：不存在缓存机制，每次调用，都会重新执行，无论依赖的数据是否更新。</p><h3 id="侦听器-–-监听器-watch"><a href="#侦听器-–-监听器-watch" class="headerlink" title="侦听器 – 监听器  watch"></a>侦听器 – 监听器  watch</h3><p><strong>数据侦听  同步处理</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>price<span class="token punctuation">"</span></span> <span class="token attr-name">v-focus</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-color</span><span class="token punctuation">></span></span>总价格：{{sum}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                price<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                total<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                firstName<span class="token punctuation">:</span> <span class="token string">"Joins"</span><span class="token punctuation">,</span>                lastName<span class="token punctuation">:</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span>                fullName<span class="token punctuation">:</span> <span class="token string">"Jack Joins"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            directives<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 自定义指令</span>                focus<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                color<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            computed<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 计算属性</span>                sum<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>total<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            watch<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 侦听器</span>                firstName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> val<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                lastName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> val <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>表单校验案例</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nickName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{tips}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                nickName<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                tips<span class="token punctuation">:</span> <span class="token string">""</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>                nickName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>tips <span class="token operator">=</span> <span class="token string">"正在校验..."</span><span class="token punctuation">;</span>                    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>tips <span class="token operator">=</span> <span class="token string">"此用户可用"</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>tips <span class="token operator">=</span> <span class="token string">"用户被占用，请更换用户名"</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><h4 id="1-过滤器的作用是什么？"><a href="#1-过滤器的作用是什么？" class="headerlink" title="1.过滤器的作用是什么？"></a>1.过滤器的作用是什么？</h4><p>格式化数据  在数据渲染的时候 给用户更好的体验度</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{msg | upper}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{msg | upper | lower}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:abc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg | upper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'upper'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 首字母大写</span>            <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'lower'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 首字母小写</span>            <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="2-自定义过滤器"><a href="#2-自定义过滤器" class="headerlink" title="2.自定义过滤器"></a>2.自定义过滤器</h4><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'过滤器名称'</span>，<span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>arg<span class="token punctuation">,</span>arg1<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    过滤逻辑<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'upper'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="案例-动态处理响应式数据"><a href="#案例-动态处理响应式数据" class="headerlink" title="(案例)动态处理响应式数据"></a>(案例)动态处理响应式数据</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.grid</span> </span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">530</span>px<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid</span> table </span><span class="token punctuation">{</span>            <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#C2D89A</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid</span> th,        td </span><span class="token punctuation">{</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px dashed <span class="token hexcode">#F3DCAB</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid</span> th </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F3DCAB</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid</span> <span class="token class">.book</span> </span><span class="token punctuation">{</span>            <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F3DCAB</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid</span> <span class="token class">.total</span> </span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F3DCAB</span><span class="token punctuation">;</span>            <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#C2D89A</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>图书管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            编号：                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book.id<span class="token punctuation">"</span></span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            名称：                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handle<span class="token punctuation">"</span></span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isDisabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>图书总数：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{books.length}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, index) in books<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{item.id}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{item.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{item.date | format('yyyy-MM-dd hh:mm:ss')}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toEdit(item.id)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteBook(item.id)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/time.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 添加日期时间格式化 过滤器</span>        Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'format'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">,</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// console.log(val, arg);</span>            <span class="token keyword">return</span> <span class="token function">dateFormat</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                flag<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                isDisabled<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                book<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    id<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                    date<span class="token punctuation">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                books<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">'三国演义'</span><span class="token punctuation">,</span>                    date<span class="token punctuation">:</span> <span class="token number">2525609975000</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">'水浒传'</span><span class="token punctuation">,</span>                    date<span class="token punctuation">:</span> <span class="token number">2525609975000</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">'红楼梦'</span><span class="token punctuation">,</span>                    date<span class="token punctuation">:</span> <span class="token number">2525609975000</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">'西游记'</span><span class="token punctuation">,</span>                    date<span class="token punctuation">:</span> <span class="token number">2525609975000</span>                <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                handle<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">let</span> editItem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>book<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                val<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>book<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>book <span class="token operator">=</span> <span class="token punctuation">{</span>                        id<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                        name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                        date<span class="token punctuation">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>book <span class="token operator">=</span> <span class="token punctuation">{</span>                            id<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                            name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                            date<span class="token punctuation">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                toEdit<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> editBook <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> items<span class="token punctuation">.</span>id <span class="token operator">==</span> id<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>editBook<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>book<span class="token punctuation">.</span>id <span class="token operator">=</span> editBook<span class="token punctuation">.</span>id<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>book<span class="token punctuation">.</span>name <span class="token operator">=</span> editBook<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                deleteBook<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">let</span> leaveBooks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> items<span class="token punctuation">.</span>id <span class="token operator">!=</span> id<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> leaveBooks<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'book.name'</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// console.log(val)</span>                    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> item<span class="token punctuation">.</span>name <span class="token operator">==</span> val<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// console.log(flag)</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>isDisabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// console.log(this.isDisabled)</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>isDisabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// console.log(this.isDisabled)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// time.js</span><span class="token comment" spellcheck="true">/**  * 对日期进行格式化，  * @param date 要格式化的日期  * @param format 进行格式化的模式字符串 *     支持的模式字母有：  *     y:年,  *     M:年中的月份(1-12),  *     d:月份中的天(1-31),  *     h:小时(0-23),  *     m:分(0-59),  *     s:秒(0-59),  *     S:毫秒(0-999), *     q:季度(1-4) * @return String * @author yanis.wang * @see http://yaniswang.com/frontend/2013/02/16/dateformat-performance/ */</span><span class="token keyword">function</span> <span class="token function">dateFormat</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> format<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> date <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> mts <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/(\/Date\((\d+)\)\/)/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mts <span class="token operator">&amp;&amp;</span> mts<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            date <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>mts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>date <span class="token operator">||</span> date<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"Invalid Date"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"M"</span><span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//月份 </span>        <span class="token string">"d"</span><span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//日 </span>        <span class="token string">"h"</span><span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//小时 </span>        <span class="token string">"m"</span><span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//分 </span>        <span class="token string">"s"</span><span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//秒 </span>        <span class="token string">"q"</span><span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//季度 </span>        <span class="token string">"S"</span><span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//毫秒 </span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    format <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/([yMdhmsqS])+/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>all<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> v <span class="token operator">=</span> map<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>all<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                v <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token operator">+</span> v<span class="token punctuation">;</span>                v <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> v<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">===</span> <span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> all<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> all<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> format<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Vue实例的生命周期"><a href="#Vue实例的生命周期" class="headerlink" title="Vue实例的生命周期"></a>Vue实例的生命周期</h3><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="img"></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改msg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>销毁Vue实例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// el: '#app',</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">:</span> <span class="token string">"生命周期函数"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                handle<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"数据修改"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 在初始化vue实例 上的属性和方法之前</span>            <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeCreate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handle<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 在created中初始化的页面，如果数据复杂，可能</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'created'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handle<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 内存中的模板渲染到页面之前</span>            <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeMount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 内存中的模板渲染到页面之后</span>            <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mounted"</span><span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 当修改数据时 Vue将内存中的模板重新渲染之前</span>            <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeUpdate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 当修改数据时 Vue将内存中的模板重新渲染之后</span>            <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'updated'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeDestroy'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'destroy Vue实例已销毁'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class=" language-面试"><code class="language-面试">面试：关于Vue生命周期 可能会问到1.会问，vue的生命周期有几个2.分别是什么3.有什么作用4.你用过哪几个？怎么用的？5.created和mounted有什么区别6.为什么在created和mounted中发送请求比较合适？</code></pre><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"obj"</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向调用者 obj.f();</span>            <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Window.fn1()  this指向Window</span>            <span class="token keyword">let</span> fn2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 箭头函数的this 与声明的作用域有关</span>            <span class="token punctuation">}</span>            <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span>fn3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 此时this指向Window</span>        <span class="token punctuation">}</span>        obj<span class="token punctuation">.</span><span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="指定条件遍历数组的方法整理"><a href="#指定条件遍历数组的方法整理" class="headerlink" title="指定条件遍历数组的方法整理"></a>指定条件遍历数组的方法整理</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// forEach: 遍历每个数组元素，没有返回值</span>        <span class="token comment" spellcheck="true">// filter: 将满足过滤条件的元素，保存到新数组中 返回值为此新数组</span>        <span class="token comment" spellcheck="true">//some：查看数组中是否有符合条件的元素，回调函数中return true时，终止循环，返回一个bool值 有true 无 false 可用于判断用户名是否存在，数据是否重复</span>        <span class="token comment" spellcheck="true">//find：查找第一个符合条件的数组元素，回调函数中return true时，终止循环，返回值为数组元素 -- 查找符合条件的数组元素</span>        <span class="token comment" spellcheck="true">//findIndex：查找符合条件的数组元素索引，回调函数中return true时，终止循环，返回值为索引 -- 查找数组元素的索引</span>        <span class="token comment" spellcheck="true">// forEach</span>        <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a0"</span><span class="token punctuation">,</span> <span class="token string">"b1"</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">,</span> <span class="token string">"d3"</span><span class="token punctuation">,</span> <span class="token string">"e4"</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>        <span class="token keyword">let</span> salary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// filter</span>        <span class="token keyword">let</span> res2 <span class="token operator">=</span> salary<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [200, 150, 230, 350]</span>        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录循环次数</span>        <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// some</span>        <span class="token keyword">let</span> res3 <span class="token operator">=</span> salary<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> item <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true  有符合条件的元素存在 第1个</span>        <span class="token keyword">let</span> res4 <span class="token operator">=</span> salary<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> item <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对应的满足条件的元素值</span>        <span class="token keyword">let</span> res5 <span class="token operator">=</span> salary<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> item <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0  对应的索引</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h3><h4 id="组件化的开发思想"><a href="#组件化的开发思想" class="headerlink" title="组件化的开发思想"></a>组件化的开发思想</h4><ol><li>统一的标准</li><li>分而治之  不同组件分别实现不同功能</li><li>重用（复用）</li><li>组合  组件之间通过组合 可以形成相对成熟的项目</li></ol><p><img src="/images/image-20200216093836217.png" alt="image-20200216093836217"></p><p>组件化规范：Web Components</p><ul><li>我们希望尽可能多的重用代码</li><li>自定义组件的方式不太容易（html\css\js）</li><li>多次使用组件可能导致冲突</li></ul><p><img src="/images/image-20200216094134190.png" alt="image-20200216094134190"></p><p>官网：</p><p>组件：是一个vue实例容器，包含了重用的html\css\js</p><h4 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>components</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>components</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'components'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    count<span class="token punctuation">:</span> <span class="token number">0</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                    &lt;div>                        &lt;button @click="handle">{{count}}&lt;/button>                    &lt;/div>`</span></span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="组件命名方法"><a href="#组件命名方法" class="headerlink" title="组件命名方法"></a>组件命名方法</h4><ol><li>组件的命名方式 短横线方式 大驼峰方式</li><li>短横线的方式可以应用于根组件和其他组件的模板中</li><li>大驼峰命名法 应用在根组件模板中 会被当成element解析成 全小写的，</li><li>因为html的解析标签不区分大小写，但是js是区分大小写的，所以找不到对应的定义</li><li>但是可以应用在其他组件的模板中</li></ol><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-add</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-add</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">/**            组件的命名方式 短横线方式 大驼峰方式            短横线的方式可以应用于根组件和其他组件的模板中            大驼峰命名法 应用在根组件模板中 会被当成element解析成 全小写的，            因为html的解析标签不区分大小写，但是js是区分大小写的，所以找不到对应的定义            但是可以应用在其他组件的模板中        */</span>        <span class="token comment" spellcheck="true">// 全局组件</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'component-add'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    count<span class="token punctuation">:</span> <span class="token number">0</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 组件模板中只能包含一个根元素</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                &lt;div>                    &lt;button @click="handle">{{count}}&lt;/button>                    &lt;ComponentAdd>&lt;/ComponentAdd>                &lt;/div>`</span></span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'ComponentAdd'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// data 为function 返回值为一个对象 此对象为data的值</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    count<span class="token punctuation">:</span> <span class="token number">0</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 组件模板中只能包含一个根元素</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>            &lt;button @click="handle">{{count}}&lt;/button>        &lt;/div>`</span></span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 所有的子组件都包含在根组件内 Vue实例对象即为根组件 data可以为对象</span>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="Vue调试工具的用法"><a href="#Vue调试工具的用法" class="headerlink" title="Vue调试工具的用法"></a>Vue调试工具的用法</h4><p>chrome插件 方便查看组件之间的关系 及其数据展示</p><h4 id="组件间的数据交互-（重点）"><a href="#组件间的数据交互-（重点）" class="headerlink" title="组件间的数据交互 （重点）"></a>组件间的数据交互 （重点）</h4><h5 id="在父组件模板中-向子组件传值"><a href="#在父组件模板中-向子组件传值" class="headerlink" title="在父组件模板中 向子组件传值"></a>在父组件模板中 向子组件传值</h5><pre><code>在父组件模板中 为子组件添加属性（:属性名=&quot;数据&quot;） 绑定传送的数据在子组件中 通过 props属性接收。可以设置为数组或者对象，推荐使用对象的方式，因为可以过滤数据的类型。</code></pre><h5 id="子组件控制父组件行为及传递参数"><a href="#子组件控制父组件行为及传递参数" class="headerlink" title="子组件控制父组件行为及传递参数"></a>子组件控制父组件行为及传递参数</h5><pre><code>子组件触发：因为是dom,bom元素才能触发事件 而子组件上的元素又在  template 上，template上的元素 又可以通过v-on 的方式绑定了事件触发函数   事件触发函数可以调用当前子组件的data  同时可以通过this.$emit(&#39;父组件的Vue模板中子组件的实现元素上的v-on的事件名&#39;,需要传递的参数) 触发父组件的相应的绑定事件，并且可以传递参数，同步参数到父组件的事件触发函数中，从而在父组件中的handle(val){}中处理子组件传递过来的参数，同步更新或修改到父组件的data中。</code></pre><h5 id="兄弟组件之间的传值"><a href="#兄弟组件之间的传值" class="headerlink" title="兄弟组件之间的传值"></a>兄弟组件之间的传值</h5><pre><code>创建数据中心： var eventHub = new Vue();数据中心负责监听、销毁、触发创建两个全局组件，设置为兄弟关系为这两个兄弟组件的template上的元素绑定触发事件在绑定的事件函数中 调用数据处理中心的触发函数  enventHub.$emit(&#39;需要触发的已被数据处理中心监听的事件名称&#39;,传递的参数)同时在生命周期钩子函数mounted()中，指定当前组件需要被数据中心监听的事件名称和处理函数mounted(){    enventHub.$on(&#39;事件名称&#39;,(接收传递过来的数据的形参)=&gt;{        处理（如通过传递过来的数据修改当前组件的data）    })}通过enventHub.$on()监听的组件事件，就可以在当前组件或者其他兄弟组件中通过 enventHub.$emit(&quot;需调用的数据处理名&quot;，参数)进行调用，从而操作组件自身 或者兄弟组件enventHub.off(&quot;绑定的数据处理事件1&quot;,&quot;绑定的数据处理事件2&quot;...);可以销毁相应的时间处理事件</code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- :content 动态绑定父组件中的值 title 静态绑定父组件中的值             title是处于父组件的template中，所以也属于父组件中的值 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-add</span> <span class="token attr-name">:my-content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg+<span class="token punctuation">'</span>父组件绑定的值<span class="token punctuation">'</span><span class="token punctuation">"</span></span>  <span class="token attr-name">my-title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>父组件绑定的值<span class="token punctuation">"</span></span> <span class="token attr-name">:arr-data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arrData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-add</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">fontSize</span><span class="token punctuation">:</span>fontSize + <span class="token string">'px'</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>效果展示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hello-a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hello-a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-b</span> <span class="token attr-name">@fa-click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleFa($event)<span class="token punctuation">"</span></span> <span class="token attr-name">:arr-data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arrData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-b</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 创建数据事件中心</span>        <span class="token keyword">var</span> eventHub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**            组件的命名方式 短横线方式 大驼峰方式            短横线的方式可以应用于根组件和其他组件的模板中            大驼峰命名法 应用在根组件模板中 会被当成element解析成 全小写的，            因为html的解析标签不区分大小写，但是js是区分大小写的，所以找不到对应的定义            但是可以应用在其他组件的模板中        */</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'component-add'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 组件中传递数据的值的命名规范 遵循驼峰命名规范 字符串模板中引用也是如此，</span>            <span class="token comment" spellcheck="true">// Vue实例模板中用"-"连接 改为全小写</span>            <span class="token comment" spellcheck="true">// props 单项数据流传递</span>            <span class="token comment" spellcheck="true">// props: ['myTitle','myContent'],</span>            props<span class="token punctuation">:</span> <span class="token punctuation">{</span>                myTitle<span class="token punctuation">:</span> String<span class="token punctuation">,</span>                myContent<span class="token punctuation">:</span> String<span class="token punctuation">,</span>                arrData<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                    addNum<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 组件模板中只能包含一个根元素</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                &lt;div>                    &lt;button @click="handle">兄-兄A{{count}}{{myTitle}}{{myContent}}&lt;/button>                    &lt;ul>                        &lt;li :key="index" v-for="(item,index) in arrData">{{item}}&lt;/li>                        &lt;/ul>                    &lt;ComponentAdd>&lt;/ComponentAdd>                &lt;/div>`</span></span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>                    eventHub<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'event-b'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>addNum<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                eventHub<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'event-a'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token operator">=</span>val<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 此组件作为component-add组件的子组件</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'ComponentAdd'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    count<span class="token punctuation">:</span> <span class="token number">0</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 组件模板中只能包含一个根元素</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                &lt;div>                    &lt;button @click="handle">{{count}}&lt;/button>                &lt;/div>`</span></span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ComponentB <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                    addFontSize<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                    addNum<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            props<span class="token punctuation">:</span> <span class="token punctuation">{</span>                arrData<span class="token punctuation">:</span> Array            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 组件模板中只能包含一个根元素</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                &lt;div>                    &lt;button @click="handle">兄-兄B{{count}}{{arrData}}&lt;/button>                    &lt;ComponentAdd>&lt;/ComponentAdd>                &lt;/div>`</span></span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// this.count++;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>arrData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"fa-click"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>addFontSize<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>addFontSize<span class="token punctuation">,</span>arrDataChange<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>arrData<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    eventHub<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'event-a'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>addNum<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            mounted<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                eventHub<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'event-b'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token operator">=</span>val<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 所有的子组件都包含在根组件内 Vue实例对象即为根组件 data可以为对象</span>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">:</span> <span class="token string">"Vue Data"</span><span class="token punctuation">,</span>                arrData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                objData<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span> <span class="token string">'coder rat'</span><span class="token punctuation">,</span>                    age<span class="token punctuation">:</span> <span class="token number">25</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                fontSize<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">handleFa</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>fontSize <span class="token operator">+</span><span class="token operator">=</span> value<span class="token punctuation">.</span>addFontSize<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>arrData <span class="token operator">=</span> value<span class="token punctuation">.</span>arrDataChange<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 局部组件 只能在#app的页面模板中使用</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'hello-a'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token punctuation">{</span>                            count<span class="token punctuation">:</span> <span class="token number">0</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// 组件模板中只能包含一个根元素</span>                    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                                &lt;div>                                    &lt;button @click="handle">{{count}}&lt;/button>                                    &lt;ComponentAdd>&lt;/ComponentAdd>                                &lt;/div>`</span></span><span class="token punctuation">,</span>                    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token string">'component-b'</span><span class="token punctuation">:</span> ComponentB            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><hr><h5 id="其他传值方式（获取相应组件，以赋值的形式进行同步）"><a href="#其他传值方式（获取相应组件，以赋值的形式进行同步）" class="headerlink" title="其他传值方式（获取相应组件，以赋值的形式进行同步）"></a>其他传值方式（获取相应组件，以赋值的形式进行同步）</h5><pre><code>this.$children.属性this.$parent.属性</code></pre><p><strong>父向子传值的其它方式</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 父向子传值的其它方式 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handle1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>父向子传值 -- 方式1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handle2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>父向子传值 -- 方式2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- ref 是vue中的标记属性，方便父组件快速获取元素或组件的 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com-son1</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comson1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com-son1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>para<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'com-son1'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>      &lt;h3>com-son1组件&lt;/h3>      &lt;p>展示父组件数据：{{son}}&lt;/p>    &lt;/div>`</span></span><span class="token punctuation">,</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          son<span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        fa<span class="token punctuation">:</span> <span class="token string">'我是霸霸'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//通过获取子组件，给子组件赋值的方式，将父组件的值设置到子组件中</span>        <span class="token function">handle1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// this.$children 保存所有的子组件</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>son <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fa<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//第一种父向子传值</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">handle2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>comson1<span class="token punctuation">.</span>son <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fa<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//第二种父向子传值</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>子向父传值的其它方式</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>展示来自子组件的内容:{{fa}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com-son1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com-son1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'com-son1'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          son<span class="token punctuation">:</span><span class="token string">'儿砸'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>        &lt;h3>com-son1组件&lt;/h3>        &lt;button @click="handle">子向父&lt;/button>      &lt;/div>`</span></span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>fa <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>son<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        fa<span class="token punctuation">:</span><span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre><code>理解什么是父组件 什么是子组件组件间的传值父 → 子 传值子 → 父 传值兄弟 → 兄弟 传值插槽</code></pre>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FormData()的使用</title>
      <link href="/2020/02/11/formdata-de-shi-yong/"/>
      <url>/2020/02/11/formdata-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="FormData使用方法详解"><a href="#FormData使用方法详解" class="headerlink" title="FormData使用方法详解"></a>FormData使用方法详解</h1><p>FormData的主要用途有两个：**</p><h6 id="1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。"><a href="#1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。" class="headerlink" title="1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。"></a>1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。</h6><h6 id="2、异步上传文件"><a href="#2、异步上传文件" class="headerlink" title="2、异步上传文件"></a>2、异步上传文件</h6><h4 id="一、创建formData对象"><a href="#一、创建formData对象" class="headerlink" title="一、创建formData对象"></a>一、创建formData对象</h4><h6 id="1、创建一个空对象："><a href="#1、创建一个空对象：" class="headerlink" title="1、创建一个空对象："></a>1、创建一个空对象：</h6><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过FormData构造函数创建一个空对象</span><span class="token keyword">var</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以通过append()方法来追加数据</span>formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laotie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过get方法对值进行读取</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//laotie</span><span class="token comment" spellcheck="true">//通过set方法对值进行设置formdata.set("name","laoliu");</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//laoliu</span></code></pre><h6 id="2、通过表单对formData进行初始化"><a href="#2、通过表单对formData进行初始化" class="headerlink" title="2、通过表单对formData进行初始化"></a>2、通过表单对formData进行初始化</h6><p>创建表单：</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>广告名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xixi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>广告类别：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>轮播图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>轮播图底部广告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>热门回收广告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>优品精选广告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>添加<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>通过表单元素作为参数，实现对formData的初始化：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//获得表单按钮元素</span><span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为按钮添加点击事件</span>btn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//根据ID获得页面当中的form表单元素</span>    <span class="token keyword">var</span> form<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#advForm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将获得的表单元素作为参数，对formData进行初始化</span>    <span class="token keyword">var</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过get方法获得name为advName元素的value值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"advName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//xixi</span>    <span class="token comment" spellcheck="true">//通过get方法获得name为advType元素的value值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"advType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span><span class="token punctuation">}</span></code></pre><h4 id="二、操作方法"><a href="#二、操作方法" class="headerlink" title="二、操作方法"></a>二、操作方法</h4><h6 id="1、通过get-key-与getAll-key-来获取相对应的值"><a href="#1、通过get-key-与getAll-key-来获取相对应的值" class="headerlink" title="1、通过get(key)与getAll(key)来获取相对应的值"></a>1、通过get(key)与getAll(key)来获取相对应的值</h6><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取key为age的第一个值</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取key为age的所有值，返回值为数组类型</span>formdata<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="2、通过append-key-value-在数据末尾追加数据"><a href="#2、通过append-key-value-在数据末尾追加数据" class="headerlink" title="2、通过append(key,value)在数据末尾追加数据"></a>2、通过append(key,value)在数据末尾追加数据</h6><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过FormData构造函数创建一个空对象</span><span class="token keyword">var</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过append()方法在末尾追加key为name值为laoliu的数据</span>formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laoliu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过append()方法在末尾追加key为name值为laoli的数据</span>formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laoli"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过append()方法在末尾追加key为name值为laotie的数据</span>formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laotie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过get方法读取key为name的第一个值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//laoliu//通过getAll方法读取key为name的所有</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["laoliu", "laoli", "laotie"]</span></code></pre><h6 id="3、通过set-key-value-来设置修改数据"><a href="#3、通过set-key-value-来设置修改数据" class="headerlink" title="3、通过set(key, value)来设置修改数据"></a>3、通过set(key, value)来设置修改数据</h6><p>key的值不存在，会添加一条数据</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过FormData构造函数创建一个空对象</span><span class="token keyword">var</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果key的值不存在会为数据添加一个key为name值为laoliu的数据</span>formdata<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laoli"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过get方法读取key为name的第一个值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//laoli</span></code></pre><p>key的值存在，会修改对应的value值</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过FormData构造函数创建一个空对象</span><span class="token keyword">var</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过append()方法在末尾追加key为name值为laoliu的数据</span>formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laoliu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过append()方法在末尾追加key为name值为laoliu2的数据</span>formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laoliu2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过get方法读取key为name的第一个值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//laoliu</span><span class="token comment" spellcheck="true">//通过getAll方法读取key为name的所有值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["laoliu", "laoliu2"]</span><span class="token comment" spellcheck="true">//将存在的key为name的值修改为laoli</span>formdata<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laoli"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过get方法读取key为name的第一个值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//laoli</span><span class="token comment" spellcheck="true">//通过getAll方法读取key为name的所有值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["laoli"]</span></code></pre><h6 id="4、通过has-key-来判断是否存在对应的key值"><a href="#4、通过has-key-来判断是否存在对应的key值" class="headerlink" title="4、通过has(key)来判断是否存在对应的key值"></a>4、通过has(key)来判断是否存在对应的key值</h6><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过FormData构造函数创建一个空对象</span><span class="token keyword">var</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过append()方法在末尾追加key为name值为laoliu的数据</span>formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laoliu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断是否包含key为name的数据</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true//判断是否包含key为age的数据</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre><h6 id="5、通过delete-key-可以删除数据"><a href="#5、通过delete-key-可以删除数据" class="headerlink" title="5、通过delete(key)可以删除数据"></a>5、通过delete(key)可以删除数据</h6><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过FormData构造函数创建一个空对象</span><span class="token keyword">var</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过append()方法在末尾追加key为name值为laoliu的数据</span>formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laoliu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//laoliu</span><span class="token comment" spellcheck="true">//删除key为name的值</span>formdata<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//null</span></code></pre><h4 id="三、通过XMLHttpRequest发送数据"><a href="#三、通过XMLHttpRequest发送数据" class="headerlink" title="三、通过XMLHttpRequest发送数据"></a>三、通过XMLHttpRequest发送数据</h4><p>创建表单：</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>广告名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xixi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>广告类别：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>轮播图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>轮播图底部广告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>热门回收广告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>优品精选广告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>广告图片：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advPic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>广告地址：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>广告排序：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderBy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>添加<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>发送数据：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"advForm"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">,</span><span class="token string">"http://127.0.0.1/adv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>formdata<span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//...</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>本文引自：<a href="https://www.cnblogs.com/clj2017/p/9321652.html" target="_blank" rel="noopener">https://www.cnblogs.com/clj2017/p/9321652.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>art-template模板引擎</title>
      <link href="/2020/02/06/art-template-mo-ban-yin-qing/"/>
      <url>/2020/02/06/art-template-mo-ban-yin-qing/</url>
      
        <content type="html"><![CDATA[<h2 id="ART-Template-模板引擎"><a href="#ART-Template-模板引擎" class="headerlink" title="ART-Template 模板引擎"></a>ART-Template 模板引擎</h2><p>为了解决哪些问题？</p><p>渲染模板</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/template-web.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>uname<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>        uname<span class="token punctuation">:</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">26</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'tpl'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>原文输出</p><p>我们希望模板引擎识别html标签的话，就可以进行原文输出</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/template-web.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 模板 要设置id template() 方法的第一个参数就是指定模板id从而指定渲染的模板 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span>姓名：<span class="token punctuation">{</span><span class="token punctuation">{</span>uname<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span>年龄：<span class="token punctuation">{</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>@ title<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// data为一个对象类型数据，template的第二个参数为对象类型，模板可以直接调用对象的属性</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>            uname<span class="token punctuation">:</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span> <span class="token string">"&lt;h2>我是标题&lt;/h2>"</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'tpl'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意写法 innerHTML not a function,是一个属性</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="images/image-20200206094014172.png" alt="image-20200206094014172"></p><p>判断</p><pre class=" language-伪代码"><code class="language-伪代码">if判断{{if 判断条件}}执行代码{{/if}}{{if 判断条件}}执行代码{{else}}执行代码{{/if}}{{if 判断条件}}执行代码{{else if 判断条件2}}if else 执行代码{{else}}else 执行代码{{/if}}</code></pre><p>循环</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 模板 要设置id template() 方法的第一个参数就是指定模板id从而指定渲染的模板 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token punctuation">{</span><span class="token punctuation">{</span>each data<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>索引：<span class="token punctuation">{</span><span class="token punctuation">{</span>$index<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>姓名：<span class="token punctuation">{</span><span class="token punctuation">{</span>$value<span class="token punctuation">.</span>uname<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>年龄：<span class="token punctuation">{</span><span class="token punctuation">{</span>$value<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>@ $value<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">/</span>each<span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// data为一个对象类型数据，template的第二个参数为对象类型，模板可以直接调用对象的属性</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        uname<span class="token punctuation">:</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">"&lt;h2>我是标题1&lt;/h2>"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        uname<span class="token punctuation">:</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">"&lt;h2>我是标题2&lt;/h2>"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        uname<span class="token punctuation">:</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">"&lt;h2>我是标题3&lt;/h2>"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'tpl'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>data<span class="token punctuation">:</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注意写法 innerHTML not a function,是一个属性</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="/images/image-20200206101025078.png" alt="image-20200206101025078"></p><p>向模板中导入变量</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>$imports.dataFormat(time)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'tpl'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h1 id="Template-variable"><a href="#Template-variable" class="headerlink" title="Template variable"></a>Template variable</h1><pre class=" language-js"><code class="language-js">template<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>imports</code></pre><p>Template can access global variable outside it and imported variable through <code>$imports</code>.</p><h2 id="Import-variable"><a href="#Import-variable" class="headerlink" title="Import variable"></a>Import variable</h2><pre class=" language-html"><code class="language-html">template.defaults.imports.log = console.log;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">$imports.log('hello</span> <span class="token attr-name">world')</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ART-Template 模板引擎 </tag>
            
            <tag> 页面渲染库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2020/01/11/ajax/"/>
      <url>/2020/01/11/ajax/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是Ajax？"><a href="#什么是Ajax？" class="headerlink" title="什么是Ajax？"></a>什么是Ajax？</h4><p>是浏览器提供的一套方法，是一门发送请求的技术，可以在不整体刷新网页的情况下向服务器发送请求，用来提升用户体验</p><h4 id="Ajax-的应用场景"><a href="#Ajax-的应用场景" class="headerlink" title="Ajax 的应用场景"></a>Ajax 的应用场景</h4><ol><li><p>页面上拉加载更多数据</p></li><li><p>列表数据无刷新分页</p></li><li><p>表单项离开焦点数据验证</p></li><li><p>搜索框提示文字下拉列表</p><p>以上是基础应用场景</p></li></ol><h4 id="Ajax-的运行环境"><a href="#Ajax-的运行环境" class="headerlink" title="Ajax 的运行环境"></a>Ajax 的运行环境</h4><p>Ajax技术需要在运行在<strong>网站环境</strong>中才能生效，所以需要在<strong>开启的服务中运行</strong>。如node服务 开启后 通过<strong>localhost:端口号/路由或者文件名</strong>访问  ！！！切勿直接双击打开文件执行，也不能通过IDE右键在浏览器打开，这两种方式都是打开的静态资源，不能访问服务，相应的请求也无法实现。</p><p>Ajax 的实现步骤</p><ol><li><p>开启node服务 express 第三方模块</p></li><li><p>开启静态资源访问  express 模块中开放的方法express。static(“开放的绝对路径”) —实质上是express模块导入了server-</p><p>中间件：拦截所有请求，交由express.static()处理请求</p><p>app.use(express.static(path.join(__dirname,”public”)))</p><p><strong>这样我们就可以通过localhost:3000/文件名 的方式访问HTML页面了</strong></p></li><li><p>app.listen(3000) 监听端口</p></li></ol><p>以下代码需要写在</p><ol><li><p>创建Ajax对象  （代替浏览器发送请求的代理人，因为浏览器发送请求，要么需要刷新，要么需要转跳，这不是我们期望的）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>告诉Ajax请求地址以及请求方式（告诉Ajax实例对象要想哪发送请求，用什么方式发送请求）</p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token string">'http://www.example.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>发送请求（get方式的请求，send中不用传参，post需要传请求的参数）</p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>获取服务器端给客户端的相应数据（响应需要一定时间，才能拿到响应的数据，当Ajax对象接收完成响应数据的时候，会触发xhr.onload()事件，所以将响应数据写在onload事件中）</p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token function">functon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>JSON对象的获取</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"zs"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// JSON字符串生成</span><span class="token keyword">let</span> strJ <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strJ<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// JSON字符串转JSON对象</span><span class="token keyword">let</span> objJ <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strJ<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objJ<span class="token punctuation">)</span></code></pre></li><li></li></ol><p>Ajax运行原理</p><p>浏览器端 —  服务器端  （开发人员不可控）</p><p>浏览器端   —  Ajax —  服务器端 （开发人员可控）</p><p>函数封装的建议</p><p>封装方法的时候，传入的参数可以是一个对象或者是一个数组，这样方便在赋值的时候区分各个参数的意义</p><pre><code>function ajax(options) {    let xhr = new XMLHttpRequest();    xhr.open(options.type,options.url);    xhr.send();    xhr.onload = () =&gt; {        options.success(xhr.responseText)    }}ajax({    type: &quot;get&quot;,    url: &quot;http://localhost:3000/first&quot;,    success(data) {        console.log(data)    },    data: {        name: &quot;COder Rat&quot;,        age: 25    }})</code></pre><p>请求参数要考虑的问题</p><ol><li><p>请求参数位置的问题</p><p>将请求参数传递到Ajax函数内部，在函数内部根据请求方式的不同，参数的添加位置不同</p><p>get 放在请求地址后面</p><p>post 放在send方法中</p></li><li><p>请求参数格式的问题</p><p>application/x-www-form-urlencoded</p><p>​    参数名称 </p></li></ol><blockquote><p>.后面不能加变量 a.b —&gt; a[b] </p></blockquote><h4 id="跨域请求的解决方案"><a href="#跨域请求的解决方案" class="headerlink" title="跨域请求的解决方案"></a>跨域请求的解决方案</h4><ol><li>通过script的src属性 进行请求，绕过浏览器的同源策略</li><li>设置服务器允许跨域访问</li><li>通过自身服务器，访问目标服务器</li></ol><h4 id="cookie-session"><a href="#cookie-session" class="headerlink" title="cookie session"></a>cookie session</h4><p>是一个容器，保存到客户端或服务器端一些客户信息等等</p><p>在http协议中规定，客户端与服务器端之间是无状态性的</p><h3 id="弄清接口文档-amp-后端接口之间的联系"><a href="#弄清接口文档-amp-后端接口之间的联系" class="headerlink" title="弄清接口文档 &amp; 后端接口之间的联系"></a>弄清接口文档 &amp; 后端接口之间的联系</h3><hr><p>以上为原生ajax的使用 目前JQuery提供的$.ajax()是用的比较多的，功能更加强大，使用更加便捷。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常见使用配置及流程</title>
      <link href="/2020/01/09/git-chang-jian-shi-yong-pei-zhi-ji-liu-cheng/"/>
      <url>/2020/01/09/git-chang-jian-shi-yong-pei-zhi-ji-liu-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>github提供了github pages服务，可以进行个人博客搭建，使用GitHub托管的网站，全是静态文件，访问的速度非常快（但是由于github是国外服务器，所以带宽速度不够的话，还是请求传输不快），github pages不需要购买服务器，后台管理，相当于本地管理，通过git工具和github进行同步更新，而且基于github的版本管理，可以很方便地进行版本的恢复。博客的内容，可以轻松打包、发布、迁移到其他平台。也可以轻松绑定自己的域名。 </p></blockquote><p> 为方便自己后期使用，简单做一些mark</p><h4 id="github的使用"><a href="#github的使用" class="headerlink" title="github的使用"></a>github的使用</h4><ol><li><p>github注册：</p><p><a href="http://www.github.com" target="_blank" rel="noopener">www.github.com</a></p><p>点击Sign up 可以进行github账号的注册</p><p>点击Sign in 可以进行github的登录</p><p>注册流程不再赘述 </p></li></ol><h4 id="github更新或者上传整个项目"><a href="#github更新或者上传整个项目" class="headerlink" title="github更新或者上传整个项目"></a>github更新或者上传整个项目</h4><ol><li>本地新建文件夹 作为git初始化根目录</li><li>进入此文件夹 右键  git bash here<pre class=" language-git"><code class="language-git">// 初始化git目录，会在根目录下创建.git文件夹，里面包含git的基本配置文件git init// git远程添加源点为：别名 origin == https://github.com/github名/项目文件夹.gitgit remote add origin https://github.com/github名/项目文件夹.git// 保持master分支与源点同步git pull origin master// ...</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub基本使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级</title>
      <link href="/2019/12/24/javascript-gao-ji/"/>
      <url>/2019/12/24/javascript-gao-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="什么是ES6"></a>什么是ES6</h3><p>ES的全称是ECMAScript，它是由ECMA国际标准化组织指定的<strong>一项脚本语言的标准化规范</strong>。</p><table><thead><tr><th>年份</th><th>版本</th></tr></thead><tbody><tr><td>2015年6月</td><td>ES2015</td></tr><tr><td>2016年6月</td><td>ES2016</td></tr><tr><td>2017年6月</td><td>ES2017</td></tr><tr><td>2018年6月</td><td>ES2018</td></tr><tr><td>…</td><td>ES年号</td></tr></tbody></table><p>ES6实际上是泛指ESMAScript2015及以后的版本</p><h3 id="为什么使用ES6"><a href="#为什么使用ES6" class="headerlink" title="为什么使用ES6"></a>为什么使用ES6</h3><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript语言本身也有一些令人不满意的地方</p><ul><li>变量提升特性增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li></ul><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>ES6中新增的用于声明变量的关键字。</p><ul><li><p>let声明的变量只在所处的块级有效</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// a is not defined</span><span class="token comment" spellcheck="true">//防止循环变量变成全局变量</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>不存在变量提升</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a is not defined</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></code></pre></li><li><p>const声明的是常量具有块级作用域</p></li><li><p>常量就是值（内存地址），不能变化的量</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//20</span>       <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a is not defined</span></code></pre><p>const 声明常量时 必须要赋初始值，因为他是固定了内存地址的，不能修改的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["a","b"] 被允许，地址未被改变</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Assignment to constant variable 此时报错，不允许赋值操作，因为改变了存储地址</span><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.14</span>；PI <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Assignment to constant variable 此时报错，不允许赋值操作</span></code></pre><p>对于基本数据类型：值改变地址就改变了，不被允许；</p><p>对于复杂数据类型，更改元素的值，不会改变指向的地址，所以可以对其内部的元素进行赋值，但是直接赋值的话就会改变复杂数据类型的地址指向，所以不被允许。</p></li></ul><h3 id="let、const、var的区别"><a href="#let、const、var的区别" class="headerlink" title="let、const、var的区别"></a>let、const、var的区别</h3><ol><li><p>使用var声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象。</p></li><li><p>使用let声明的变量，其作用域为该语句所在的代码块内，不存在变量提升。</p></li><li><p>使用const声明的是常量，在后面出现的代码中不能再修改该变量的值。</p><table><thead><tr><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>函数级作用域</td><td>块级作用域</td><td>块级作用域</td></tr><tr><td>变量提升</td><td>不存在变量提升</td><td>不存在变量提升</td></tr><tr><td>值可以更改</td><td>值可以更改</td><td>值不可以更改</td></tr></tbody></table><p>如果所使用的值不需要变化，使用const效率会更高，因为JavaScript引擎不需要实时监测值的变化，操作内存。</p></li></ol><p>解构赋值</p><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值</p><p>数组解构允许我们按照一一对应的关系从数组中提取值，将提取到的值赋值给变量</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*a = 1;b = 2;c = 3;*/</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>uname<span class="token punctuation">:</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span>uname<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span>uname<span class="token punctuation">:</span>myName<span class="token punctuation">,</span>age<span class="token punctuation">:</span>myAge<span class="token punctuation">,</span>sex<span class="token punctuation">:</span>mySex<span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*myName = "Coder Rat";myAge = 25;Mysex = "男";*/</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>uname<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span></code></pre><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>在箭头函数中 如果函数体中只有一句代码，并且代码的执行结果就是函数的返回值 函数的花括号可以省略</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><p>如果参数只有一个</p><p>面试题</p><p>Set方式实现数组去重</p><p>try…catch 异常捕获机制  不能捕获异步任务出现的错误</p><p>如果书写在try方法内的代码出现错误，会被catch方法捕获到，并且将错误信息保存到catch方法的第一个参数里，可以让我们的程序即便出现错误，还能继续往下执行。</p><p>finally 最终都会执行的 </p><p>在try内可以throw “自定义出错信息” 手动抛出异常 会被catch捕获异常</p><p>也可以做数据验证</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 请说出var const 和let在申明变量时候的区别？</span><span class="token comment" spellcheck="true">// var let const 都能用来声明变量，var 声明的变量 没有块级作用域 存在变量提升</span><span class="token comment" spellcheck="true">// const let 声明的变量都具有块级作用域 只能在块级作用域中进行访问 不存在变量提升 </span><span class="token comment" spellcheck="true">// const 声明的变量的内存地址是不可变的，并且需要在声明的时候就必须要赋值 var\let不需要在声明的时候赋值</span><span class="token comment" spellcheck="true">// 请书写一个箭头函数，返回1到100的数字的和</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">let</span> sumA <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> item<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sumA</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 请描述箭头函数和普通的函数的this指向的区别</span><span class="token comment" spellcheck="true">//箭头函数this指向的是当前作用域的挂载对象，普通函数中的this指向当前函数的最终调用者</span><span class="token comment" spellcheck="true">// 请描述模板字符串的用法，请自行书写一个案例，要求在模板字符串中调用一个函数</span><span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"我是模板字符串中函数的返回值"</span><span class="token punctuation">}</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`模板字符串用法</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 请用扩展字符串的方式，把两个数组合并成一个数组</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">,</span><span class="token operator">...</span>arr1<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 请用Set数据结构，来实现数组去重</span><span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript高级（ES6语法） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js基础</title>
      <link href="/2019/12/23/node-js-ji-chu/"/>
      <url>/2019/12/23/node-js-ji-chu/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么需要学习服务器开发？"><a href="#为什么需要学习服务器开发？" class="headerlink" title="为什么需要学习服务器开发？"></a>为什么需要学习服务器开发？</h3><ul><li><p>能够和后端人员更好配合</p></li><li><p>网站<strong>业务逻辑前置</strong>，学习前端技术需要后端技术支持（Ajax）</p></li><li><p>实现网站的业务逻辑</p></li><li><p>配合数据库处理一些数据请求</p></li></ul><h3 id="为什么选择Node"><a href="#为什么选择Node" class="headerlink" title="为什么选择Node"></a>为什么选择Node</h3><ul><li><p>使用JavaScript语法开发后端应用</p></li><li><p>一些公司要求前端工程师掌握Node开发</p></li><li><p>Node的生态系统活跃，有大量开源库可以使用</p></li><li><p>前端开发工具多基于Node开发（webpack）</p></li></ul><h3 id="Node是什么？"><a href="#Node是什么？" class="headerlink" title="Node是什么？"></a>Node是什么？</h3><p>Node是基于Chrome V8引擎的JavaScript代码<strong>运行环境</strong>（V8是 JavaScript 解释器）</p><p><strong>JavaScript运行环境</strong></p><p> 和 浏览器一样 Node 也是 JavaScript 代码的运行环境。</p><p><strong>Node运行环境安装失败的解决办法</strong></p><ul><li><p>错误代码 2502 2503 失败原因：系统权限不足</p><ul><li><p>解决办法</p><p>以管理员身份运行powershell</p><p>执行命令 msiexec 安装包位置+安装包名称</p></li></ul></li><li><p>安装成功 但是执行node -v 命令时报错</p><ul><li><p>解决办法</p><p>将nodejs的安装目录 加入系统变量path中</p><p><strong>环境变量的path的作用：</strong></p><p>当输入命令行命令的时候，命令行工具默认先查找当前所在目录查找对应可执行文件（命令前缀.exe），找不到的话，就会在系统环境变量path中查找，在对应目录中查找对应的可执行文件。</p></li></ul></li></ul><hr><h3 id="Node-js的组成"><a href="#Node-js的组成" class="headerlink" title="Node.js的组成"></a>Node.js的组成</h3><ul><li>JavaScript 由 ECMAScript，DOM，BOM 三个部分组成</li><li>Node.js 由ECMAScript及Node 环境提供的一些附加API组成。包括文件、网络、路径等一些更加强大的API。</li></ul><p><img src="/images/image-20200102185736248.png" alt="image-20200102185736248"></p><h3 id="Node-js全局对象–global"><a href="#Node-js全局对象–global" class="headerlink" title="Node.js全局对象–global"></a>Node.js全局对象–global</h3><p>和JavaScript中的window对象类似，global是 node.js 的内置对象，是 node.js 的顶层（全局）对象，所有的属性和方法都挂载在global上。</p><p><img src="/images/image-20200102192906972.png" alt="image-20200102192906972"></p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">var</span> global<span class="token punctuation">:</span> NodeJS<span class="token punctuation">.</span>Global<span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Global</span> <span class="token punctuation">{</span>    <span class="token keyword">Array</span><span class="token punctuation">:</span> <span class="token keyword">typeof</span> <span class="token keyword">Array</span><span class="token punctuation">;</span>    ArrayBuffer<span class="token punctuation">:</span> <span class="token keyword">typeof</span> ArrayBuffer<span class="token punctuation">;</span>    Boolean<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Boolean<span class="token punctuation">;</span>    Buffer<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Buffer<span class="token punctuation">;</span>    DataView<span class="token punctuation">:</span> <span class="token keyword">typeof</span> DataView<span class="token punctuation">;</span>    Date<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Date<span class="token punctuation">;</span>    Error<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Error<span class="token punctuation">;</span>    EvalError<span class="token punctuation">:</span> <span class="token keyword">typeof</span> EvalError<span class="token punctuation">;</span>    Float32Array<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Float32Array<span class="token punctuation">;</span>    Float64Array<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Float64Array<span class="token punctuation">;</span>    <span class="token keyword">Function</span><span class="token punctuation">:</span> <span class="token keyword">typeof</span> <span class="token keyword">Function</span><span class="token punctuation">;</span>    GLOBAL<span class="token punctuation">:</span> Global<span class="token punctuation">;</span>    <span class="token number">Infinity</span><span class="token punctuation">:</span> <span class="token keyword">typeof</span> <span class="token number">Infinity</span><span class="token punctuation">;</span>    Int16Array<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Int16Array<span class="token punctuation">;</span>    Int32Array<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Int32Array<span class="token punctuation">;</span>    Int8Array<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Int8Array<span class="token punctuation">;</span>    Intl<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Intl<span class="token punctuation">;</span>    JSON<span class="token punctuation">:</span> <span class="token keyword">typeof</span> JSON<span class="token punctuation">;</span>    Map<span class="token punctuation">:</span> MapConstructor<span class="token punctuation">;</span>    Math<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Math<span class="token punctuation">;</span>    <span class="token number">NaN</span><span class="token punctuation">:</span> <span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">;</span>    Number<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Number<span class="token punctuation">;</span>    Object<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Object<span class="token punctuation">;</span>    Promise<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Promise<span class="token punctuation">;</span>    RangeError<span class="token punctuation">:</span> <span class="token keyword">typeof</span> RangeError<span class="token punctuation">;</span>    ReferenceError<span class="token punctuation">:</span> <span class="token keyword">typeof</span> ReferenceError<span class="token punctuation">;</span>    RegExp<span class="token punctuation">:</span> <span class="token keyword">typeof</span> RegExp<span class="token punctuation">;</span>    Set<span class="token punctuation">:</span> SetConstructor<span class="token punctuation">;</span>    String<span class="token punctuation">:</span> <span class="token keyword">typeof</span> String<span class="token punctuation">;</span>    Symbol<span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">;</span>    SyntaxError<span class="token punctuation">:</span> <span class="token keyword">typeof</span> SyntaxError<span class="token punctuation">;</span>    TypeError<span class="token punctuation">:</span> <span class="token keyword">typeof</span> TypeError<span class="token punctuation">;</span>    URIError<span class="token punctuation">:</span> <span class="token keyword">typeof</span> URIError<span class="token punctuation">;</span>    Uint16Array<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Uint16Array<span class="token punctuation">;</span>    Uint32Array<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Uint32Array<span class="token punctuation">;</span>    Uint8Array<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Uint8Array<span class="token punctuation">;</span>    Uint8ClampedArray<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Uint8ClampedArray<span class="token punctuation">;</span>    WeakMap<span class="token punctuation">:</span> WeakMapConstructor<span class="token punctuation">;</span>    WeakSet<span class="token punctuation">:</span> WeakSetConstructor<span class="token punctuation">;</span>    clearImmediate<span class="token punctuation">:</span> <span class="token punctuation">(</span>immediateId<span class="token punctuation">:</span> Immediate<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span>    clearInterval<span class="token punctuation">:</span> <span class="token punctuation">(</span>intervalId<span class="token punctuation">:</span> Timeout<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span>    clearTimeout<span class="token punctuation">:</span> <span class="token punctuation">(</span>timeoutId<span class="token punctuation">:</span> Timeout<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span>    console<span class="token punctuation">:</span> <span class="token keyword">typeof</span> console<span class="token punctuation">;</span>    decodeURI<span class="token punctuation">:</span> <span class="token keyword">typeof</span> decodeURI<span class="token punctuation">;</span>    decodeURIComponent<span class="token punctuation">:</span> <span class="token keyword">typeof</span> decodeURIComponent<span class="token punctuation">;</span>    encodeURI<span class="token punctuation">:</span> <span class="token keyword">typeof</span> encodeURI<span class="token punctuation">;</span>    encodeURIComponent<span class="token punctuation">:</span> <span class="token keyword">typeof</span> encodeURIComponent<span class="token punctuation">;</span>    escape<span class="token punctuation">:</span> <span class="token punctuation">(</span>str<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span><span class="token punctuation">;</span>    eval<span class="token punctuation">:</span> <span class="token keyword">typeof</span> eval<span class="token punctuation">;</span>    global<span class="token punctuation">:</span> Global<span class="token punctuation">;</span>    isFinite<span class="token punctuation">:</span> <span class="token keyword">typeof</span> isFinite<span class="token punctuation">;</span>    isNaN<span class="token punctuation">:</span> <span class="token keyword">typeof</span> isNaN<span class="token punctuation">;</span>    parseFloat<span class="token punctuation">:</span> <span class="token keyword">typeof</span> parseFloat<span class="token punctuation">;</span>    parseInt<span class="token punctuation">:</span> <span class="token keyword">typeof</span> parseInt<span class="token punctuation">;</span>    process<span class="token punctuation">:</span> Process<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * @deprecated Use `global`.    */</span>    root<span class="token punctuation">:</span> Global<span class="token punctuation">;</span>    setImmediate<span class="token punctuation">:</span> <span class="token punctuation">(</span>callback<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Immediate<span class="token punctuation">;</span>    setInterval<span class="token punctuation">:</span> <span class="token punctuation">(</span>callback<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">,</span> ms<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Timeout<span class="token punctuation">;</span>    setTimeout<span class="token punctuation">:</span> <span class="token punctuation">(</span>callback<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">,</span> ms<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Timeout<span class="token punctuation">;</span>    queueMicrotask<span class="token punctuation">:</span> <span class="token keyword">typeof</span> queueMicrotask<span class="token punctuation">;</span>    undefined<span class="token punctuation">:</span> <span class="token keyword">typeof</span> undefined<span class="token punctuation">;</span>    unescape<span class="token punctuation">:</span> <span class="token punctuation">(</span>str<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span><span class="token punctuation">;</span>    gc<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span>    v8debug<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="Node-js模块化开发"><a href="#Node-js模块化开发" class="headerlink" title="Node.js模块化开发"></a>Node.js模块化开发</h3><h4 id="模块化开发（软件的开发方式）"><a href="#模块化开发（软件的开发方式）" class="headerlink" title="模块化开发（软件的开发方式）"></a>模块化开发（软件的开发方式）</h4><p>软件中的模块化开发：一个功能就是一个模块，多个模块可以组成完整应用，抽离一个模块不会影响其他功能的运行。</p><p><img src="/images/image-20191229202835251.png" alt="image-20191229202835251"></p><h4 id="JavaScript开发的弊端"><a href="#JavaScript开发的弊端" class="headerlink" title="JavaScript开发的弊端"></a>JavaScript开发的弊端</h4><ol><li>文件依赖不明确问题</li><li>命名冲突（存在变量覆盖等问题）</li></ol><h4 id="Node-js中的模块化开发规范"><a href="#Node-js中的模块化开发规范" class="headerlink" title="Node.js中的模块化开发规范"></a>Node.js中的模块化开发规范</h4><p><strong>Node.js规定：一个JavaScript文件就是一个模块，模块内部定义的变量和函数默认情况下在外部无法得到。</strong></p><p><strong>模块内部可以使用exports/module.exports对象对内部成员进行导出，在其他模块中，如果需要依赖此模块，访问其内部导出的成员（函数/变量），可以在其他模块使用require方法进行此模块的导入，从而访问此模块导出的内部成员</strong>（可以解决模块与模块之间的依赖不明确问题，模块之间的依赖关系，取决于是否导入其他模块）</p><p>require(‘modulePath’)的返回值，实质上是一个对象,等价于所引用模块的exports对象。</p><p><img src="/images/image-20191230103113231.png" alt="image-20191230103113231"></p><p>A模块</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"我是A模块中变量a的值"</span><span class="token punctuation">;</span><span class="token keyword">let</span> fnA <span class="token operator">=</span> param <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> objA <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"coder rat"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>    hobbies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"codding"</span><span class="token punctuation">,</span><span class="token string">"travelling"</span><span class="token punctuation">,</span><span class="token string">"sleep"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token function">fnA</span><span class="token punctuation">(</span><span class="token string">"Coder Rat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>fnA <span class="token operator">=</span> fnA<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>moduleA <span class="token operator">=</span> exports<span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>objA <span class="token operator">=</span> objA<span class="token punctuation">;</span></code></pre><p><img src="/images/image-20200102202151386.png" alt="image-20200102202151386"></p><p>由上图可以看出：module对象中包含exports属性，此属性的值为对象，包含了使用exports添加的所有的属性。</p><p>并且证明了：exports === module.exports === 导入模块中的require(‘./moduleA’)即导入模块的返回值</p><blockquote><p><strong>注意点：</strong> require()在导入模块过程中，会执行引入模块中的代码，如果被引用的模块中包含执行代码，则执行require()的时候被调用的模块中可执行的函数会整体执行。返回值为exports对象。</p></blockquote><p>B模块</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./moduleA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./moduleA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./moduleA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./moduleA"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./moduleA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>moduleA<span class="token punctuation">)</span><span class="token punctuation">;</span>moduleA<span class="token punctuation">.</span><span class="token function">fnA</span><span class="token punctuation">(</span><span class="token string">'我是调用moduleA中的fnA函数执行的参数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/images/image-20200102211947122.png" alt="image-20200102211947122"></p><p>由上图可以看出：require(“./moduleA”);执行的时候，就输出了Coder Rat，而且后面再有require(“./moduleA”)的执行，也不会重复，原因是module.loaded === true</p><blockquote><p>追附官方文档解释</p><p>模块加载的缓存机制</p><p>模块在第一次加载后会被缓存。 这也意味着（类似其他缓存机制）如果每次调用 <code>require(&#39;foo&#39;)</code> 都解析到同一文件，则返回相同的对象。</p><p>多次调用 <code>require(foo)</code> 不会导致模块的代码被执行多次。 这是一个重要的特性。 借助它, 可以返回“部分完成”的对象，从而允许加载依赖的依赖, 即使它们会导致循环依赖。</p><p>如果想要多次执行一个模块，可以导出一个函数，然后调用该函数。</p><p>拓展：</p><h2 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h2><p>Node.js 有些模块会被编译成二进制。 这些模块别的地方有更详细的描述。</p><p>核心模块定义在 Node.js 源代码的 <code>lib/</code> 目录下。</p><p><code>require()</code> 总是会优先加载核心模块。 例如， <code>require(&#39;http&#39;)</code> 始终返回内置的 HTTP 模块，即使有同名文件。</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>当循环调用 <code>require()</code> 时，一个模块可能在未完成执行时被返回。</p><p>例如以下情况:</p><p><code>a.js</code>:</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a 开始'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 上述副本 exports.done = false</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行b.js </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在 a 中，b.done = %j'</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a 结束'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>b.js</code>:</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b 开始'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a.js未完成加载，执行打印'a 开始'，并返回副本对象 exports</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在 b 中，a.done = %j'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时a.done为副本对象exports.done = false </span>exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b 结束'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印 执行完继续加载a.js</span></code></pre><p><code>main.js</code>:</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'main 开始'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在 main 中，a.done=%j，b.done=%j'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>done<span class="token punctuation">,</span> b<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// %d 为输出整数，%s 为输出字符串，%j 为输出 JSON 的字符串格式。 如把exports.done = false 改为exports.done = {a : '我是对象'}，打印结果就为 {"a":"我是对象"}</span></code></pre><p>当 <code>main.js</code> 加载 <code>a.js</code> 时， <code>a.js</code> 又加载 <code>b.js</code>。 此时， <code>b.js</code> 会尝试去加载 <code>a.js</code>。 为了防止无限的循环，会返回一个 <code>a.js</code> 的 <code>exports</code> 对象的 <strong>未完成的副本</strong> 给 <code>b.js</code> 模块。 然后 <code>b.js</code> 完成加载，并将 <code>exports</code> 对象提供给 <code>a.js</code> 模块。</p><p>当 <code>main.js</code> 加载这两个模块时，它们都已经完成加载。 因此，该程序的输出会是：</p><pre class=" language-console"><code class="language-console">$ node main.jsmain 开始a 开始b 开始在 b 中，a.done = falseb 结束在 a 中，b.done = truea 结束在 main 中，a.done=true，b.done=true</code></pre><p>需要仔细的规划, 以允许循环模块依赖在应用程序内正常工作.</p></blockquote><p><img src="/images/image-20200102212908654.png" alt="image-20200102212908654"></p><p>exports是module.exports的别名（地址引用关系），导出对象最终以module.exports为准，例如以下代码，如果为A模块代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> greeting <span class="token operator">=</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>greeting <span class="token operator">=</span> greeting<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当exports对象和module.exports对象指向的不是同一个对象时 以module.exports为准,执行下述语句之前，exports/module.exports都是{x: 100,greeting: name => `hello ${name}`</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Coder Rat'</span><span class="token punctuation">}</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Rat Guo'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在此时exports/module.exports都变成了 {name: 'Coder Rat'} 后面的exports指向 并未生效</span></code></pre><p> 综上思想：Node.js模块化开发，类似于Java中的import，只有被导入的包（jar包），其内部定义的函数接口等才能被调用。</p><p>其他补充：require()的查询规则</p><hr><h3 id="Node-js-系统模块"><a href="#Node-js-系统模块" class="headerlink" title="Node.js 系统模块"></a>Node.js 系统模块</h3><p><strong>什么是系统模块</strong></p><p>Node运行环境提供的API。因为这些API都是以模块化的方式进行开发的，所以我们又称Node运行环境提供的API为系统模块。</p><p>Node运行环境提供了很多API，所以了解NodeJS的编程风格也是很有必要的。可以通过对系统模块的使用、自定义模块加深对NodeJS的了解。</p><p>中文官方文档地址：<a href="http://nodejs.cn/api/" target="_blank" rel="noopener">http://nodejs.cn/api/</a></p><hr><h4 id="1-系统模块-–-fs-文件操作API（模块）"><a href="#1-系统模块-–-fs-文件操作API（模块）" class="headerlink" title="1. 系统模块 – fs 文件操作API（模块）"></a>1. 系统模块 – fs 文件操作API（模块）</h4><p>f: file s: system  fs:文件操作系统</p><p>官方文档说明：</p><h4 id="fs-readFile-path-options-callback"><a href="#fs-readFile-path-options-callback" class="headerlink" title="fs.readFile(path[, options],callback)"></a>fs.readFile(path[, options],callback)</h4><p><img src="/images/image-20200104112822930.png" alt="image-20200104112822930"></p><p>异步地读取文件的全部内容。</p><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>回调会传入两个参数 <code>(err, data)</code>，其中 <code>data</code> 是文件的内容。</p><p>如果没有指定 <code>encoding</code>，则返回原始的 buffer。</p><p>如果 <code>options</code> 是字符串，则它指定字符编码：</p><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当 <code>path</code> 是目录时， <code>fs.readFile()</code> 与 <code>fs.readFileSync()</code>的行为是特定于平台的。 在 Mac OS、Linux 和 Windows 上，将返回错误。 在 FreeBSD 上，将返回目录内容的表示。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在 macOS、Linux 和 Windows 上：</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'&lt;目录>'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// => [Error: EISDIR: illegal operation on a directory, read &lt;目录>]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在 FreeBSD 上：</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'&lt;目录>'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// => null, &lt;data></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>fs.readFile()</code> 函数会缓冲整个文件。 为了最小化内存成本，尽可能通过 <code>fs.createReadStream()</code> 进行流式传输。</p><h4 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h4><ol><li>任何指定的文件描述符都必须支持读取。</li><li>如果将文件描述符指定为 <code>path</code>，则不会自动关闭它。</li><li>读数将从当前位置开始。例如，如果文件已经有内容 <code>&#39;Hello World</code>‘ 并且使用文件描述符读取了六个字节，则使用相同文件描述符调用 <code>fs.readFile()</code> 将返回 <code>&#39;World&#39;</code> 而不是 <code>&#39;Hello World&#39;</code>。</li></ol><h4 id="fs-createReadStream-path-options"><a href="#fs-createReadStream-path-options" class="headerlink" title="fs.createReadStream(path[, options])"></a>fs.createReadStream(path[, options])</h4><p><img src="/images/image-20200104113401446.png" alt="image-20200104113401446"></p><p>与用于可读流的 16 kb 的默认的 <code>highWaterMark</code> 不同，此方法返回的流具有 64 kb 的默认的 <code>highWaterMark</code>。</p><p><code>options</code> 可以包括 <code>start</code> 和 <code>end</code> 值，以从文件中读取一定范围的字节而不是整个文件。 <code>start</code> 和 <code>end</code> 都包含在内并从 0 开始计数，允许的值在 [0, <a href="http://nodejs.cn/s/e9ereu" target="_blank" rel="noopener"><code>Number.MAX_SAFE_INTEGER</code></a>] 的范围内。 如果指定了 <code>fd</code> 并且省略 <code>start</code> 或为 <code>undefined</code>，则 <code>fs.createReadStream()</code> 从当前的文件位置开始顺序地读取。 <code>encoding</code> 可以是 <a href="http://nodejs.cn/s/FApxjh" target="_blank" rel="noopener"><code>Buffer</code></a> 接受的任何一种字符编码。</p><p>如果指定了 <code>fd</code>，则 <code>ReadStream</code> 将会忽略 <code>path</code> 参数并将会使用指定的文件描述符。 这意味着将不会触发 <code>&#39;open&#39;</code> 事件。 <code>fd</code> 必须是阻塞的，非阻塞的 <code>fd</code> 应该传给 <a href="http://nodejs.cn/s/wsJ1o1" target="_blank" rel="noopener"><code>net.Socket</code></a>。</p><p>如果 <code>fd</code> 指向仅支持阻塞读取的字符设备（例如键盘或声卡），则在数据可用之前，读取操作不会完成。 这可以防止进程退出并且流自然地关闭。</p><p>默认情况下，流在销毁后将不会触发 <code>&#39;close&#39;</code> 事件。 这与其他 <code>Readable</code> 流的默认行为相反。 将 <code>emitClose</code> 选项设置为 <code>true</code> 可更改此行为。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从某个字符设备创建一个流。</span><span class="token keyword">const</span> stream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'/dev/input/event0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  stream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这可能不会关闭流。</span>  <span class="token comment" spellcheck="true">// 人工标记流的结束，就像底层的资源自身已表明文件的结束一样，允许流进行关闭。</span>  <span class="token comment" spellcheck="true">// 这不会取消挂起中的读取操作，如果存在此类操作，则过程可能仍无法成功地退出，直到完成。</span>  stream<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果 <code>autoClose</code> 为 <code>false</code>，则即使出现错误，文件描述符也不会被关闭。 应用程序负责关闭它并确保没有文件描述符泄漏。 如果 <code>autoClose</code> 设为 <code>true</code>（默认的行为），则在 <code>&#39;error&#39;</code> 或 <code>&#39;end&#39;</code> 事件时文件描述符将会被自动地关闭。</p><p><code>mode</code> 用于设置文件模式（权限和粘滞位），但仅限于创建文件时。</p><p>示例，从一个大小为 100 个字节的文件中读取最后 10 个字节：</p><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'sample.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> start<span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token number">99</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果 <code>options</code> 是字符串，则它指定字符编码。</p><h4 id="fs-createWriteStream-path-options"><a href="#fs-createWriteStream-path-options" class="headerlink" title="fs.createWriteStream(path[, options])"></a>fs.createWriteStream(path[, options])</h4><p><img src="/images/image-20200104113436642.png" alt="image-20200104113436642"></p><p><code>options</code> 可以包括 <code>start</code> 选项，允许在文件的开头之后的某个位置写入数据，允许的值在 [0, <a href="http://nodejs.cn/s/e9ereu" target="_blank" rel="noopener"><code>Number.MAX_SAFE_INTEGER</code></a>] 的范围内。 若要修改文件而不是覆盖它，则 <code>flags</code> 模式需要为 <code>r+</code> 而不是默认的 <code>w</code> 模式。 <code>encoding</code> 可以是 <a href="http://nodejs.cn/s/FApxjh" target="_blank" rel="noopener"><code>Buffer</code></a> 接受的任何一种字符编码。</p><p>如果 <code>autoClose</code> 设置为 <code>true</code>（默认的行为），则在 <code>&#39;error&#39;</code> 或 <code>&#39;finish&#39;</code> 事件时文件描述符将会被自动地关闭。 如果 <code>autoClose</code> 为 <code>false</code>，则即使出现错误，文件描述符也不会被关闭。 应用程序负责关闭它并确保没有文件描述符泄漏。</p><p>默认情况下，流在销毁后将不会触发 <code>&#39;close&#39;</code> 事件。 这与其他 <code>Writable</code> 流的默认行为相反。 将 <code>emitClose</code> 选项设置为 <code>true</code> 可更改此行为。</p><p>与 <a href="http://nodejs.cn/s/C3Eioq" target="_blank" rel="noopener"><code>ReadStream</code></a> 类似，如果指定了 <code>fd</code>，则 <a href="http://nodejs.cn/s/2uZDVA" target="_blank" rel="noopener"><code>WriteStream</code></a> 将会忽略 <code>path</code> 参数并将会使用指定的文件描述符。 这意味着不会触发 <code>&#39;open&#39;</code> 事件。 <code>fd</code> 必须是阻塞的，非阻塞的 <code>fd</code> 应该传给 <a href="http://nodejs.cn/s/wsJ1o1" target="_blank" rel="noopener"><code>net.Socket</code></a>。</p><p>如果 <code>options</code> 是字符串，则它指定字符编码。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 系统模块 直接通过模块的名字fs对模块进行引用</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 通过模板内部的readFile函数读取文件内容 * 因为读取操作是从系统硬盘读取，所以不是及时反馈的， * 所以不能用fs.readFile的返回值来输出读取内容 * 所以采用了回调函数的方式，等待读取操作完成，再执行回调函数， * 返回读取结果。 */</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./demo.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> doc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 如果文件读取出错 err 是个对象，包含错误信息     * 如果文件读取正确 err 是null     * doc 是文件读取的结果     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token string">"文件读取成功！"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"文件读取失败，将创建此文件..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 应用场景：         * 在网站运行的过程中要实时监控网站的运行情况，         * 例如，在网站运行的过程中是否有报错的情况，         * 我们不能一直盯着程序后台，所以希望当程序运行         * 出错的时候，错误能被写入错误日志当中，也就是说，         * 写入到一个文件中。         */</span>        <span class="token comment" spellcheck="true">/**         * fs.writeFile('文件路径/文件名称','数据（字符串类型数据）',callback);         */</span>        <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token string">'&lt;h3>我是写入的内容&lt;/h3>'</span>        fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./demo.txt'</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">'&lt;br>文件创建失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件创建成功！'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="/images/image-20200104150312813.png" alt="image-20200104150312813"></p><p>NodeJs系统模块中的回调函数，第一个参数都是error错误信息，所以我们又称NodeJS中的回调函数为错误优先的回调函数。</p><hr><h4 id="2-系统模块-–-path-路径操作"><a href="#2-系统模块-–-path-路径操作" class="headerlink" title="2. 系统模块 – path 路径操作"></a>2. 系统模块 – path 路径操作</h4><p>为什么要进行路径拼接</p><ul><li>不同操作系统的路径分隔符不统一</li><li>/public/upload/avatar</li><li>Windows 上是 \ /</li><li>Linux 上是 /</li></ul><p>路径拼接API语法</p><pre class=" language-js"><code class="language-js">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'路径'</span><span class="token punctuation">,</span><span class="token string">'路径'</span><span class="token punctuation">,</span><span class="token string">'路径'</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 导入path模块</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 路径拼接 因为路径拼接是即时操作，所以直接接收返回值即可</span><span class="token keyword">let</span> finalPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">,</span><span class="token string">'css'</span><span class="token punctuation">,</span><span class="token string">'index.css'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印出拼接后的路径 并且path.join 会识别目前运行的系统环境 使用相应的拼接符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>finalPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用读取文件测试__dirname配合拼接路径的正确性</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"demos"</span><span class="token punctuation">,</span><span class="token string">"demo.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="/images/image-20200104153750671.png" alt="image-20200104153750671"></p><h5 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h5><p>实际开发中，相对路径和绝对路径的选择</p><ul><li>大多数的情况下使用绝对路径，因为相对路径有时候相对的是命令行工具的当前目录</li><li>在读取文件或者设置文件路径时都会选择绝对路径</li><li>使用<code>__dirname</code>可以获取当前文件的绝对路径</li></ul><p>所以我们实际开发过程中，可以结合path.join()，获取完整的绝对路径</p><pre class=" language-js"><code class="language-js">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'相对此文件的相对路径目录名称，有多个，用逗号隔开'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h3 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h3><p><strong>什么是第三方模块</strong></p><p>别人写好的、具有特定功能的、我们能直接使用的模块，即称为第三方模块，由于第三方模块通常都是由多个文件组成，并且被放置在同一个文件夹中，所以又名包。</p><p>第三方模块有两种存在形式：</p><ul><li>以JS文件的形式存在，提供实现项目具体功能的API接口。类似于JQuery。</li><li>以命令行工具的形式存在，为我们提供命令行中的命令，以辅助开发。 如：nodemon</li></ul><p>获取第三方模块的方式：</p><p>npm(node package manager)：node的第三方模块管理工具。安装node的时候就已经集成。</p><pre class=" language-npm"><code class="language-npm">下载包npm install/i 包名(mouduleName)删除npm uninstall 包名| node_moudules| package-lock.json全局安装和本地安装- 命令行工具/辅助工具：全局安装- 库文件：本地安装</code></pre><hr><h4 id="第三方模块-nodemon"><a href="#第三方模块-nodemon" class="headerlink" title="第三方模块 nodemon"></a>第三方模块 nodemon</h4><p>nodemon 是一个命令行工具模块，用于辅助项目开发。</p><p>在编写调试Node.js项目，修改代码后，需要频繁的手动Ctrl+C退出，然后再重新执行，非常麻烦。现在，我们可以使用<code>nodemon</code>这个工具，它的作用是监听代码文件的变动，当代码改变之后，自动重新执行。</p><p>以下是官方说明：</p><p>nodemon is a tool that helps develop node.js based applications by automatically restarting the node application when file changes in the directory are detected.</p><p>Cloning with <a href="https://github.com/remy/nodemon" target="_blank" rel="noopener">git</a> or by using <a href="https://www.npmjs.com/package/nodemon" target="_blank" rel="noopener"><code>npm</code></a>(推荐方式):</p><pre class=" language-npm/git"><code class="language-npm/git">npm install -g nodemon</code></pre><p>And nodemon will be installed globallyto your system path.(全局安装) </p><p>You can also install nodemon as a development dependency:（本地安装/项目安装）</p><pre class=" language-npm/git"><code class="language-npm/git">npm install --save-dev nodemon</code></pre><p>With a local installation, nodemon will not be available in your system path. Instead, the local installation of nodemon can be run by calling it from within an npm script (such as <code>npm start</code>) or using <code>npx nodemon</code>.</p><p>使用nodemon</p><pre class=" language-npm"><code class="language-npm">nodemon [your node app]  || 例如： nodemon app.js</code></pre><p>更多命令，可参考<a href="https://github.com/remy/nodemon" target="_blank" rel="noopener">git</a> or <a href="https://www.npmjs.com/package/nodemon" target="_blank" rel="noopener"><code>npm</code></a></p><hr><h4 id="第三方模块-nrm"><a href="#第三方模块-nrm" class="headerlink" title="第三方模块 nrm"></a>第三方模块 nrm</h4><p>nrm(node registry manager)：npm 下载地址切换工具（命令行工具）</p><p>npm默认的下载地址为:<a href="https://registry.npmjs.org/" target="_blank" rel="noopener">https://registry.npmjs.org/</a> 服务器位于国外，所以访问下载的速度慢，阿里巴巴淘宝镜像服务器，每10分钟就和官方服务器做一次更新同步，所以可以使用</p><pre><code>// 全局安装nrm工具npm install nrm -g// 查看npm链接源nrm ls// 切换npm下载源为 taobaonrm use taobao</code></pre><p><img src="/images/image-20200104164330865.png" alt="image-20200104164330865"></p><hr><h4 id="第三方模块-Gulp"><a href="#第三方模块-Gulp" class="headerlink" title="第三方模块 Gulp"></a>第三方模块 Gulp</h4><p>基于node开发的前端构建工具</p><p>什么是前端构件化工具呢？</p><p>实际上就是将机械化操作 编写成任务，想要执行机械化操作时执行一个命令行命令，任务就能自动执行了。</p><p>gulp可以做些什么呢？</p><ul><li>项目开发完成，需要部署上线的时候，为了加快网站的访问速度，通常要将HTML、CSS、JS文件进行压缩合并重命名等，gulp可以很方便地进行处理</li><li>语法转换（es6、less），</li><li>公共文件抽离</li><li>修改文件浏览器自动刷新</li></ul><p>Gulp的使用步骤</p><ol><li><p>使用 npm install gulp 下载gulp库文件（本地下载）</p></li><li><p>在项目根目录下建立gulpfile.js文件</p></li><li><p>重构项目的文件夹结构</p><p>新建 src 目录用于放置源代码文件</p><p>新建 dist 目录用于放置构建后文件</p></li><li><p>在gulpfile.js文件中编写任务</p></li><li><p>在命令行工具中执行gulp任务</p></li></ol><p>Gulp中提供的方法</p><ul><li>gulp.src()：获取任务要处理的文件</li><li>gulp.dest()：输出文件</li><li>gulp.task()：建立gulp任务</li><li>gulp.watch()：监控文件的变化</li></ul><pre class=" language-npm"><code class="language-npm">// 全局安装gulp-cli 命令行工具npm install gulp-cli -gnpm install gulp -Dnpx -p touch nodetouch gulpfile.jsgulp --help项目（本地）安装  最顶级文件夹直接子文件夹</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//gulpfile.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span> src<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> parallel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> pug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-pug'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> less <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-less'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> minifyCSS <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-csso'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> concat <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-concat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'client/templates/*.pug'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">pug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'build/html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'client/templates/*.less'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">minifyCSS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'build/css'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">js</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'client/javascript/*.js'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> sourcemaps<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'app.min.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'build/js'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> sourcemaps<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>js <span class="token operator">=</span> js<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>css <span class="token operator">=</span> css<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>html <span class="token operator">=</span> html<span class="token punctuation">;</span>exports<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">=</span> <span class="token function">parallel</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> css<span class="token punctuation">,</span> js<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>nodejs中的系统模块</p><p>node运行环境提供的API,因为这些模块都是模块化开发的</p><p>系统模块之 fs</p><p>f: file 文件，s: system 文件操作系统</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>读取文件语法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>mya<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>myb<span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>doc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文件读取成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"neirong"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文件写入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>模块查找规则1</p><p>模块查找规则2</p><p>当模块没有路径且没有后缀</p><ol><li>Node.js会默认为它是系统模块</li><li>Node.js会去node_modules中查找是否存在同名js文件</li><li>如果没有，就会查找node_modules下的同名文件夹中的index.js</li><li>如果有同名文件夹，但是其中不存在index.js，则查找是否有pakege.json文件，如果有就查看其中是否存在”main”: 入口对应的文件</li><li>如果也不存在，就查看</li></ol><p>Node网站服务器</p><p>localhost   本地域名</p><p>本地IP: 127.0.0.1</p><pre class=" language-tex"><code class="language-tex">按下回车以后，首先浏览器会在本地查找hosts文件，如果文件中有对应的域名，就执行本地服务，没有的话。就去公网上访问DNS解析服务，告诉我们要查找的域名，DNS服务会将域名解析成IP地址，我们拿到这个解析过的IP进行匹配，找到指定服务器的端口号进行访问http协议可以理解成客户端和服务器端之间的沟通语言，http协议包含两部分，第一部分是请求部分，第二部分是响应部分，请求部分中包含了当前客户端</code></pre><p>创建web服务器</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建web服务器的模块</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'https'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建服务器</span><span class="token keyword">const</span> app <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当客户端请求的时候</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取请求方式</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;h2>Hi,Coder Rat&lt;/h2>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"网站服务创建成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>app.on  添加事件监听</p><p>监听的事件是 ‘request’ 只要有请求就会执行</p><p>res.end();</p><p>req 请求的信息  request  请求报文</p><p>res 请求的响应事件   response  响应报文</p></blockquote><p>HTTP协议 Hyper Text Transform Protocol规定了如何从网站服务器传输超文本到本地浏览器，它基于客户端服务器架构工作，是客户端（用户）和服务器端（网站）请求和应答的标准。</p><p>报文 headers ：表现形式，以冒号分隔的键值对</p><p>General headers:</p><p>重要选项</p><p>Response headers: 响应报文</p><p>Request headers: 请求报文</p><p>请求报文：</p><ol><li><p>请求方式（Request Method）</p><ul><li>GET 请求数据   如：浏览器输入网址，表单的默认转跳（action）</li><li>POST 发送数据  如：表单提交，密码验证</li></ul><p>获取请求方式 :</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// request Method</span><span class="token comment" spellcheck="true">//创建web服务器的模块</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建服务器</span><span class="token keyword">const</span> app <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当客户端请求的时候</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取请求方式</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li></li></ol><p>mime模块，可以根据路由自动判断返回的数据应该是什么类型的文件 mime.getType(req.url);</p><p><img src="/images/image-20191229092708334.png" alt="image-20191229092708334"></p><p>Express是一个人基于Node平台的web应用开发框架，他提供了一系列强大的特性，帮助你创建各种web应用。</p><p>Express 框架的特性</p><ul><li>提供了方便简洁的路由定义方式</li><li>对获取HTTP请求参数进行了简化处理</li><li>对模板引擎支持程度高，方便渲染动态HTML界面</li></ul><p>restful风格</p><p>express 文档解析</p><p>一个路由 相当于一个简单的业务逻辑处理</p><p>登录的流程是怎么样的？</p><p>客户端通过服务端发送post请求，请求中包含email，password，后端接收到前端传递过来的email，password，首先判断email，password两个字段是否为空，如果为空，就直接返回客户端，如果不为空，就是使用客户端传递过来的email去数据库中查询当前email对应的那条数据，如果没查询到，则直接返回客户端，当前账户不存在在数据库中，如果查询到了，就取出当前这条数据里面的password，并且用它和客户端传递过来的password进行比对，如果不匹配，则返回客户端，提示错误，如果一致，则重定向到相应的登陆成功界面。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
            <tag> 前后端交互 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级-面向对象</title>
      <link href="/2019/12/19/javascript-gao-ji-mian-xiang-dui-xiang/"/>
      <url>/2019/12/19/javascript-gao-ji-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象编程介绍"><a href="#面向对象编程介绍" class="headerlink" title="面向对象编程介绍"></a>面向对象编程介绍</h2><p>两大编程思想</p><ul><li><p>面向过程编程 POP</p><p>按照分析好的过程，一步步利用函数实现</p></li><li><p>面向对象编程 OOP</p><p>以对象功能划分</p><p>面向对象的特点：</p><ul><li>封装性</li><li>继承性</li><li>多态性</li></ul></li></ul><p>ES6 中的类和对象</p><p>面向对象的思维特点：</p><ol><li><p>抽取（抽象）对象共用的属性和行为组织（封装）成一个类（模板）</p></li><li><p>对类进行实例化，获取类的对象</p></li></ol><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>在JavaScript中，对象是一组无序的相关属性和方法的集合，</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>在ES6中新增了类的概念，可以使用class关键字声明一个类，之后可以用类来实例化对象。</p><p>类抽取了对象的公共部分，他繁殖某一大类</p><p>对象特指某一个，通过类实例化一个具体的对象</p><p>面向对象的思维特点：</p><ol><li>抽取（抽象）对象共用的属性和行为组织（封装）成一个类（模板）</li><li>对类进行实例化，获取类的对象</li></ol><h3 id="创建-封装-类"><a href="#创建-封装-类" class="headerlink" title="创建(封装)类"></a>创建(封装)类</h3><p>语法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 创建类</span><span class="token keyword">class</span> <span class="token class-name">Star</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 构造函数 参数的传递 </span>    <span class="token function">constructor</span><span class="token punctuation">(</span>uname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 利用类创建对象</span><span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">"刘德华"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实例化过程</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">.</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>constructor 构造函数 会在实例化的过程，自动调用</p><p>即 new Star(“刘德华”);</p><p>new 创建对象的时候，constructor函数在调用结束以后，会默认返回一个对象，如果在constructor内手动return一个简单数据类型，则还是返回创建的对象，如果return一个对象，则返回此对象。</p><p>当constructor被调用的时候，首先会在内部创建了一个空对象，再把空对象指向this</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>nam<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> nam<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 上述过程等同于 下面的执行过程</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">this</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>nam<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> <span class="token string">"我是构造函数中的uname,我才是大名，我叫Nick，别人说我叫什么，我不听！"</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I can run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是构造函数中的sing,我最能唱，所以其他人不准唱！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果在构造器中也有同名函数，则此函数被覆盖</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I am singing a song"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    uname <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会直接</span><span class="token punctuation">}</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hoby <span class="token operator">=</span> <span class="token string">"eat"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    job <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是科学家"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hoby<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 继承过程中，如果子类没有手动书写constructor函数那么js会默认帮我们创建constructor函数，并且会在其中        调用super方法 */</span></code></pre><p>super  既是函数 也是对象</p><p>作为函数使用的时候。可以帮助子类继承父类的方法和属性</p><p>作为对象使用的时候，则代表当前子类的父类，可以直接调用父类的方法</p><p><img src="/images/image-20191219151426582.png" alt="image-20191219151426582"></p><p>constructor 里面的this【指向的是 创建的实例对象】</p><p>构造函数和原型</p><p>利用构造函数创建对象</p><pre><code>function () {}</code></pre><p>构造函数是一种特殊的函数，主要用来初始化对象，即为对象成员变量</p><p>构造函数与普通函数的区别</p><p>new 本质上是调用函数的方法之一</p><p>一个函数如果被new调用，那么这个函数就是构造函数</p><p>不能通过构造函数来访问实例成员，只能通过实例化的对象来访问。</p><p>静态成员只能通过构造函数访问，不能通过实例对象访问</p><p>构造函数原型 prototype</p><p>函数都拥有 prototype </p><p>prototype上定义的大部分都是函数，这样可以让每一个实例对象都共享这些函数</p><p>实例对象在访问方法的时候，首先在自己身上找，如果没有，就去到他的构造函数的prototype上查找，如果构造函数中的prototype上有 就访问此方法 否则继续向上查找                                                                                                                                                                                                          </p><p>constructor本质上是保存在构造函数的原型对象上的</p><p>实例对象可以通过访问他的__ proto __属性上的constructor属性来找到他的构造函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> fn <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>Fn<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Fn<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/images/image-20191220161758202.png" alt="image-20191220161758202"></p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/images/image-20191220161931502.png" alt="image-20191220161931502"></p><p>原型链</p><p><img src="/images/image-20191220162316131.png" alt="image-20191220162316131"></p><p><img src="/images/image-20191220164141324.png" alt="image-20191220164141324"></p><p>原型链查找</p><p>Javascript中内置的构造函数的prototype 不可被人为地整个替换</p><h2 id="函数的定义和调用"><a href="#函数的定义和调用" class="headerlink" title="函数的定义和调用"></a>函数的定义和调用</h2><p>函数的定义方式</p><ol><li>命名函数</li><li>匿名函数</li><li>new Function(“参数1”,”参数2”,”函数体”);</li></ol><p>所有函数都是 Function的实例，所有的函数都是对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> instanseof Object</code></pre><p>函数调用的方式</p><ol><li><p>普通函数的调用</p><p>fn();  fn.call();</p></li><li><p>对象内函数</p></li><li><p>构造函数</p></li><li><p>绑定事件函数</p></li><li><p>定时器函数</p></li><li><p>立即执行函数 </p></li></ol><p>函数内this的指向</p><p>一般指向我们的调用者</p><p>改变this指向的方法</p><p>call 的主要作用 可以实现继承 </p><p>bind传参以bind函数中的参数优先，如果bind函数中的参数不够，则以返回的新函数中的参数作为补充。</p><p>如果有的函数我们不需要立即调用，但是又想改变这个函数内部的this指向，此时用bind。</p><p>闭包的主要作用：延伸了局部变量的作用范围（return function(){</p><p>​    console.log(name);// 这个name是外层作用域里的变量</p><p>）</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript高级（面向对象） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript之数组详解</title>
      <link href="/2019/12/18/javascript-zhi-shu-zu-xiang-jie/"/>
      <url>/2019/12/18/javascript-zhi-shu-zu-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="数组的概念"><a href="#数组的概念" class="headerlink" title="数组的概念"></a>数组的概念</h2><p>数组可以把一组相关的数据一起存放，并提供方便的读、取操作。</p><p>数组是指一组数据的集合，其中的每个数据被称为<strong>元素</strong>，在数组中可以存放<strong>任意类型</strong>的元素。所以，数组是一种<strong>将一组数据</strong>存储在<strong>单个变量名</strong>下的优雅方式。</p><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><ul><li><p>利用new 关键字创建数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// new 构造器（构造函数） 创建了个空数组</span></code></pre></li><li><p>利用数组字面量创建数组 <code>[]</code> （常用方式）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建了一个空数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span>Rat<span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li></ul><blockquote><p>数组里面的元素没有类型限制，元素之间以<code>,</code>隔开。</p></blockquote><h2 id="获取数组中的元素"><a href="#获取数组中的元素" class="headerlink" title="获取数组中的元素"></a>获取数组中的元素</h2><h3 id="数组的索引"><a href="#数组的索引" class="headerlink" title="数组的索引"></a>数组的索引</h3><p><strong>索引</strong>（即<strong>下标</strong>）：是用来访问数组元素的序号，数组的下标从0开始</p><p>数组可以通过索引来访问、设置、修改对应的数组元素，我们可以通过<code>数组名[索引]</code>的形式来获取（访问）数组中的元素。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span>Rat<span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Coder Rat</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// undefined 索引超出arr.length,返回未定义</span><span class="token comment" spellcheck="true">// 一般存放一星期的周几的数组，存储方式为</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"星期日"</span><span class="token punctuation">,</span><span class="token string">"星期一"</span><span class="token punctuation">,</span><span class="token string">"星期二"</span><span class="token punctuation">,</span><span class="token string">"星期三"</span><span class="token punctuation">,</span><span class="token string">"星期四"</span><span class="token punctuation">,</span><span class="token string">"星期五"</span><span class="token punctuation">,</span><span class="token string">"星期六"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 因为new Date().getDay() 的返回值对应为[0,1,2,3,4,5,6]</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><p>遍历：就是把数组中的每个元素从头到尾都访问一次。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span>Rat<span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>数组长度：数组名.length  是<strong>动态检测</strong>数组元素个数的</p><h3 id="求数组中元素的和与平均值"><a href="#求数组中元素的和与平均值" class="headerlink" title="求数组中元素的和与平均值"></a>求数组中元素的和与平均值</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> average <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关键算法</span><span class="token punctuation">}</span>average <span class="token operator">=</span> sum <span class="token operator">/</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"和为："</span><span class="token operator">+</span> sum <span class="token operator">+</span> <span class="token string">"平均值为："</span> <span class="token operator">+</span> average<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="求数组元素中的最大值"><a href="#求数组元素中的最大值" class="headerlink" title="求数组元素中的最大值"></a>求数组元素中的最大值</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个值可以取数组中的任意元素，不可取数组外的值，以防取值大于数组内的任何元素</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 关键算法</span>        max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"最大值为："</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关键算法解读 遍历数组中所有元素，与初始max一一比较，如果比max大，则将此元素的值赋给max</span></code></pre><h3 id="数组转为分割字符串"><a href="#数组转为分割字符串" class="headerlink" title="数组转为分割字符串"></a>数组转为分割字符串</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">var</span> sep <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Codding"</span><span class="token punctuation">,</span><span class="token string">"is"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"wonderful"</span><span class="token punctuation">,</span><span class="token string">"lifestyle"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       str <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      str <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> sep<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Codding-is-a-wonderful-lifestyle</span></code></pre><h2 id="数组中新增元素"><a href="#数组中新增元素" class="headerlink" title="数组中新增元素"></a>数组中新增元素</h2><h3 id="修改数组的长度可以新增数组元素"><a href="#修改数组的长度可以新增数组元素" class="headerlink" title="修改数组的长度可以新增数组元素"></a>修改数组的长度可以新增数组元素</h3><p>因为length属性是可读写的，但是这种新增的方式新增的是<code>undefined</code>元素,也就是只实现了数组的扩容。</p><h3 id="修改索引号-追加数组元素（如果没有此索引）"><a href="#修改索引号-追加数组元素（如果没有此索引）" class="headerlink" title="修改索引号 追加数组元素（如果没有此索引）"></a>修改索引号 追加数组元素（如果没有此索引）</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Codding"</span><span class="token punctuation">,</span><span class="token string">"is"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"wonderful"</span><span class="token punctuation">,</span><span class="token string">"lifestyle"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"!"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Codding-is-a-wonderful-lifestyle-!</span></code></pre><h3 id="修改索引号-也可替换数组元素（如果已有此索引）"><a href="#修改索引号-也可替换数组元素（如果已有此索引）" class="headerlink" title="修改索引号 也可替换数组元素（如果已有此索引）"></a>修改索引号 也可替换数组元素（如果已有此索引）</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Codding"</span><span class="token punctuation">,</span><span class="token string">"is"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"wonderful"</span><span class="token punctuation">,</span><span class="token string">"lifestyle"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"!"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Codding-!-a-wonderful-lifestyle</span></code></pre><blockquote><p>不能直接给数组名赋值，否则会覆盖掉以前的数据，相当于变量的重新赋值</p></blockquote><h2 id="数组案例"><a href="#数组案例" class="headerlink" title="数组案例"></a>数组案例</h2><h3 id="循环生成数组"><a href="#循环生成数组" class="headerlink" title="循环生成数组"></a>循环生成数组</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code></pre><h3 id="将A数组中大于等于10的数据存到新数组B"><a href="#将A数组中大于等于10的数据存到新数组B" class="headerlink" title="将A数组中大于等于10的数据存到新数组B"></a>将A数组中大于等于10的数据存到新数组B</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">443</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// c 为b数组的下标初始值，配合c++运算,生成索引从零开始的数组</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         c<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [443, 33, 56, 10, 10]</span><span class="token comment" spellcheck="true">//方法2</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">443</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b<span class="token punctuation">[</span>b<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b.length是从0开始的，而且是动态检测的</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [443, 33, 56, 10, 10]</span></code></pre><h3 id="将数组中的0去掉，剩下的元素生成新数组"><a href="#将数组中的0去掉，剩下的元素生成新数组" class="headerlink" title="将数组中的0去掉，剩下的元素生成新数组"></a>将数组中的0去掉，剩下的元素生成新数组</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b<span class="token punctuation">[</span>b<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b.length是从0开始的，而且是动态检测并改变的</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="翻转数组"><a href="#翻转数组" class="headerlink" title="翻转数组"></a>翻转数组</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Programming"</span><span class="token punctuation">,</span><span class="token string">"Love"</span><span class="token punctuation">,</span><span class="token string">"Rat"</span><span class="token punctuation">,</span><span class="token string">"Coder"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ["Coder", "Rat", "Love", "Programming"]</span></code></pre><h3 id="数组排序（冒泡排序）"><a href="#数组排序（冒泡排序）" class="headerlink" title="数组排序（冒泡排序）"></a>数组排序（冒泡排序）</h3><p>冒泡排序：是一种简单的排序算法，它重复地走访要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行，直到没有再需要交换的数，也就是说该数列已经排序完成。这个算法的名字由来，是因为越小的元素会经由交换，慢慢”浮“到数列的顶端。</p><p>代码实现</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 改变大小于号，可以改变冒泡方向</span>            <span class="token keyword">var</span> mid <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 操作数组的方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript之逻辑运算与流程控制</title>
      <link href="/2019/12/18/javascript-zhi-luo-ji-yun-suan-yu-liu-cheng-kong-zhi/"/>
      <url>/2019/12/18/javascript-zhi-luo-ji-yun-suan-yu-liu-cheng-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符（operator）也被称为<strong>操作符</strong>，是用于实现赋值、比较和执行算数运算等功能的符号。</p><h3 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1. 算数运算符"></a>1. 算数运算符</h3><p>加 减 乘 除 取余（取模）%</p><pre><code>3 % 5  //3 注意！5 % 3  //2</code></pre><blockquote><p>浮点数float 在数学运算中 会有精度的问题</p><p>如console.log(0.1 + 0.2); //控制台输出为0.30000000000000004</p><p>注意：我们不能拿着浮点数作为判断依据  0.1 + 0.2 === 0.3  //false</p></blockquote><h3 id="递增和递减运算符（重点）"><a href="#递增和递减运算符（重点）" class="headerlink" title="递增和递减运算符（重点）"></a>递增和递减运算符（重点）</h3><p>为了解决变量的自加1或者自减1，如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（–）运算符来完成。</p><p>在JavaScript中，递增和递减运算符，既可以放在变量的前面，也可以放在变量的后面。放在变量的前面时，称为前置递增/递减，放在后面时，称为后置递增/递减。</p><p><strong>区别：</strong></p><p>放在前面时，变量先加/减1，然后将结果返回给表达式</p><p>放在后面时，先将变量的原值返回给表达式，变量再加/减1</p><p>共同点：表达式执行完，变量的值都会加/减1</p><p>比如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">--</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span><span class="token comment" spellcheck="true">//即 --a === 5-1 &amp;&amp; a = 5-1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span><span class="token comment" spellcheck="true">//即 b-- === 5 &amp;&amp; b = b-1</span></code></pre><h3 id="比较运算符（关系运算符）"><a href="#比较运算符（关系运算符）" class="headerlink" title="比较运算符（关系运算符）"></a>比较运算符（关系运算符）</h3><p><code>&gt;</code> <code>&lt;</code> <code>==</code> <code>&gt;=</code> <code>&lt;=</code> <code>!=</code> <code>===</code> <code>!==</code></p><p>程序里面的等于符号 是==，默认转换数据类型，会把字符串的数据类型转换为数字型（隐式转换）。只判断值是否相等</p><p>程序里面的全等===，是代表数据类型、值完全一样</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符是用来进行布尔值运算的运算符，其返回值为布尔值</p><ul><li><p><strong>逻辑与：</strong> &amp;&amp; and 两侧都为true 结果才是true,只要有一侧为false，结果就为false</p></li><li><p><strong>逻辑或：</strong> || or 两侧都为false结果才是false,只要有一侧为true，结果就为true</p></li><li><p><strong>逻辑非：</strong> ! not     也叫取反符   <code>!true == false;</code></p></li></ul><h3 id="逻辑与-或的-短路运算（逻辑中断）（重要）"><a href="#逻辑与-或的-短路运算（逻辑中断）（重要）" class="headerlink" title="逻辑与/或的 短路运算（逻辑中断）（重要）"></a>逻辑与/或的 短路运算（逻辑中断）（重要）</h3><p><strong>短路运算的原理：</strong>当有多个<strong>表达式</strong>时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*先进行Boolean强制转换 遇到"",'',NaN,0,null,undefined 转换为false只要是真，就继续向下运算，遇到假或者执行到头，则短路（中断运算）返回当前值（即找false假）*/</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//c = 456;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span> <span class="token operator">&amp;&amp;</span> <span class="token number">789</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//c = 789;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">789</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//c = 0;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span> <span class="token operator">&amp;&amp;</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//c = "";</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span> <span class="token operator">+</span> <span class="token string">"Coder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "456Coder"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">456</span> <span class="token operator">+</span> <span class="token string">"Coder"</span> <span class="token operator">&amp;&amp;</span> <span class="token string">""</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ""</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">456</span> <span class="token operator">-</span> <span class="token string">"Coder"</span> <span class="token operator">&amp;&amp;</span> <span class="token string">""</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">456</span> <span class="token operator">+</span> <span class="token string">"Coder"</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"0"</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">// 4. 逻辑或短路运算 </span><span class="token comment" spellcheck="true">/*如果表达式1 结果为真 则返回表达式1 如果表达式1 结果为假 则返回表达式2（即找true真）*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">||</span> <span class="token number">456</span> <span class="token operator">||</span> <span class="token number">456</span> <span class="token operator">+</span> <span class="token string">"Coder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "0"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">456</span> <span class="token operator">+</span> <span class="token string">"Coder"</span> <span class="token operator">||</span> <span class="token string">""</span> <span class="token operator">||</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "456Coder"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">456</span> <span class="token operator">-</span> <span class="token string">"Coder"</span> <span class="token operator">||</span> <span class="token string">""</span> <span class="token operator">||</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "0"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">456</span> <span class="token operator">-</span> <span class="token string">"Coder"</span> <span class="token operator">||</span> <span class="token string">""</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">// 逻辑中断很重要 它会影响我们程序运行结果</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">||</span> num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">//因为结果123 为真，所以 num++就不会运算了，所以还是0</span></code></pre><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p><code>=</code> <code>+=</code> <code>-=</code> <code>\=</code> <code>*=</code> <code>%=</code></p><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p><code>()</code>  &gt; <code>一元运算符++ -- !</code>  &gt;  <code>数学运算符</code>  &gt;  <code>关系运算符</code></p><h3 id="拓展：表达式和返回值"><a href="#拓展：表达式和返回值" class="headerlink" title="拓展：表达式和返回值"></a>拓展：表达式和返回值</h3><p><strong>表达式：</strong>是由<strong>数字、运算符、变量</strong>等，以能求得数值的、有意义的排列方法，所得的组合。</p><p>简单理解：由数字、运算符、变量<strong>等组成的</strong>有意义的或能求得数值的<strong>式子</strong>。</p><p><strong>表达式的特点：</strong>表达式最终都会有一个结果，返回给我们，我们称之为<strong>返回值</strong></p><p>函数（方法）的特点和表达式的特点有些类似</p><pre><code>var num = 1 + 1;/*右边表达式计算完毕，把返回值赋值给num*/</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>在一个程序执行的过程中，各条代码的执行顺序对程序的结果会有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。</p><p>简单来说：流程控制就是来控制我们代码按照什么结构顺序来执行</p><p>流程控制主要有三种结构，分别是<strong>顺序结构、分支结构和循环结构</strong></p><p><img src="/images/image-20191215184830490.png" alt="image-20191215184830490"></p><h3 id="顺序流程控制"><a href="#顺序流程控制" class="headerlink" title="顺序流程控制"></a>顺序流程控制</h3><p>顺序流程控制，是依据代码的先后顺序，依次执行，即基本流程控制，没有特定的语法结构。</p><h3 id="分支流程控制if语句"><a href="#分支流程控制if语句" class="headerlink" title="分支流程控制if语句"></a>分支流程控制if语句</h3><p>由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码（执行代码多选一的过程），从而得到不同的结果</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法结构伪代码</span><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行语句</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行语句2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果if里面的条件表达式结果为真(true) 则执行花括号里面的执行语句，如果if里面的条件表达式结果为假(false) 则执行花括号里面的执行语句2</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//执行语句1</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//执行语句2   </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行语句3</span><span class="token punctuation">}</span></code></pre><h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><p>类似于双分支语句 if…else，可以做一些简单的条件选择。由三元运算符组成的式子，称为三元表达式</p><p>条件表达式 ? 表达式1 : 表达式2</p><pre><code>var num = 9;var res = num &gt; 10 ? &quot;大于10&quot; : &quot;不大于10&quot;;console.log(res);//不大于10/*用户输入0-59之间的数字如果数字小于10，就在数字前面补一个0，加&quot;0&quot;进行拼接*/var res = &quot;&quot;;var val = prompt(&quot;请输入小于大于0小于59之间的数字&quot;);res = parseInt(val) &lt; 10 ? 0 + val : val;alert(res);</code></pre><h3 id="分支流程控制switch语句"><a href="#分支流程控制switch语句" class="headerlink" title="分支流程控制switch语句"></a>分支流程控制switch语句</h3><p>switch 转换、开关 case 小例子或者选项的意思</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*条件表达式的返回值和里面的value对应，则执行相应语句，无对应，执行default里的语句*/</span><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> value1<span class="token punctuation">:</span>        执行语句<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value2<span class="token punctuation">:</span>        执行语句<span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">break</span>    <span class="token operator">...</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        执行最后的语句<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//样例  相匹配的时候 是全等关系 值和类型都要一样 遇到break才跳出循环（重要）</span><span class="token keyword">var</span> sw <span class="token operator">=</span> <span class="token string">"匹配项"</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>sw<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是匹配项1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"匹配项"</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是匹配项2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"没找到匹配项"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果为 "我是匹配项2"</span></code></pre><blockquote><p>switch  在结果为确定值的情况下可以使用</p><p>if else if 常用在范围判断 更加灵活</p></blockquote><h3 id="循环结构-重要"><a href="#循环结构-重要" class="headerlink" title="循环结构 重要"></a>循环结构 重要</h3><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>目的：可以重复执行某些代码（相同的代码或者不同的代码，因为存在计数器，所以可以通过变量控制执行体的执行内容）</p><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><p>被重复的代码 称为循环体</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*var i = 0只会执行一次，作为启动变量，然后执行第二句进行判断，然后执行循环体，然后就是i++，然后一直判断执行循环体，第一句就不再执行，直到不满足条件，结束循环*/</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// i(index)</span>    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 循环体</span><span class="token punctuation">}</span></code></pre><blockquote><p>断点操作：F12 –&gt;source–&gt;点击对应文件–&gt;点击需要设置断点处的行号。watch可以监视变量，点击小加号可以添加需要监视的变量。</p></blockquote><h5 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a>累加器</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*sum += i;sum = sum + i;*/</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="奇数-偶数和"><a href="#奇数-偶数和" class="headerlink" title="奇数/偶数和"></a>奇数/偶数和</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> even <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> odd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        even <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        odd <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"偶数和："</span> <span class="token operator">+</span> even <span class="token operator">+</span> <span class="token string">"奇数和："</span> <span class="token operator">+</span> odd<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="打印小星星"><a href="#打印小星星" class="headerlink" title="打印小星星"></a>打印小星星</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"☆"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一行显示多个同样的内容</span></code></pre><h4 id="双重for循环"><a href="#双重for循环" class="headerlink" title="双重for循环"></a>双重for循环</h4><p><img src="/images/image-20191218101719361.png" alt="image-20191218101719361"></p><p>很多情况下，单层for 循环并不能满足我们的需求，比如我们要打印一个5行5列的图形，或者有规律的变换，可能一个for循环无法满足我们的需求，那么循环嵌套就是我们的优选了。</p><p>循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，比较典型的就是双重for循环结构。</p><p><strong>思路：</strong>我们可以把里面的循环看作是外层循环的语句，外层循环一次，里面的循环全部执行</p><h5 id="五行五列小星星"><a href="#五行五列小星星" class="headerlink" title="五行五列小星星"></a>五行五列小星星</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*需要输出五次（外层控制执行内部循环五次） 打印五个小心心在一行的语句（内部语句每次执行打印五颗小心心）*/</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"♥ "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="五行累增小星星"><a href="#五行累增小星星" class="headerlink" title="五行累增小星星"></a>五行累增小星星</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*需要输出五次（外层控制执行内部循环五次） 打印从一行一个到一行五个小心心的语句（内部语句每次执行打印从1-5颗小心心，通过外层变量控制判断条件）*/</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"♥ "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="五行累减小星星"><a href="#五行累减小星星" class="headerlink" title="五行累减小星星"></a>五行累减小星星</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 外层循环控制行数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"♥ "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*或者*/</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 外层循环控制行数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 相当于用外层变量控制了起始变量的值</span>        str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"♥ "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="九九乘法表-重要算法"><a href="#九九乘法表-重要算法" class="headerlink" title="九九乘法表 重要算法"></a>九九乘法表 重要算法</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 外层循环控制行数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 内层控制列数，以及每列的数量</span>        <span class="token keyword">var</span> tab <span class="token operator">=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>        str <span class="token operator">+</span><span class="token operator">=</span> j <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> tab <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//循环体</span>    i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 操作表达式，避免死循环（完成计数器更新）</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 可以实现比较复杂的判断，只根据判断是否成立来执行</span><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"你爱我嘛？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>message <span class="token operator">!==</span> <span class="token string">"我爱你"</span> <span class="token operator">&amp;&amp;</span> message <span class="token operator">!==</span> <span class="token string">"爱"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    message <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"你爱我嘛？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我也爱你哟~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h4><p>先执行循环体，再执行while()  至少会执行一次循环体</p><pre class=" language-js"><code class="language-js"><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//循环体</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span></code></pre><h4 id="continue-break"><a href="#continue-break" class="headerlink" title="continue break"></a>continue break</h4><p><strong>continue</strong>：跳出此次循环，继续下一次循环，本次循环continue之后的代码不会执行</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>跳出循环的条件<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果执行了这句代码，本次循环alert(i)将不会执行</span>    <span class="token punctuation">}</span>    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>break</strong>：退出并结束循环</p><h4 id="拓展：代码书写规范"><a href="#拓展：代码书写规范" class="headerlink" title="拓展：代码书写规范"></a>拓展：代码书写规范</h4><ul><li>函数的命名一般为动词，变量一般为名词</li><li>单行注释的<code>\\</code>后面一般跟个空格</li><li>多元运算符前后一般跟空格</li><li>if<code>空格</code>()<code>空格</code>{}  for<code>空格</code>()<code>空格</code>{}</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript逻辑运算 </tag>
            
            <tag> JavaScript流程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery完全解读</title>
      <link href="/2019/12/16/jquery-wan-quan-jie-du/"/>
      <url>/2019/12/16/jquery-wan-quan-jie-du/</url>
      
        <content type="html"><![CDATA[<p>JQuery  JavaScript 库：即library，是一个封装好的特定的集合（方法和函数）。</p><h2 id="JQuery时间处理"><a href="#JQuery时间处理" class="headerlink" title="JQuery时间处理"></a>JQuery时间处理</h2><h3 id="事件注册"><a href="#事件注册" class="headerlink" title="事件注册"></a>事件注册</h3><p>单个事件注册</p><p>多事件绑定</p><p>on({</p><p>})</p><p>如果给一个JQuery对象使用on()方法绑定事件，相同事件分两次绑定是可以，类似addEnventListener()，如果事件是一个事件对象的集合</p><p>使用slideDown()，这个对象的初始样式要是display:none;</p>]]></content>
      
      
      <categories>
          
          <category> 库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECharts图形图标库</title>
      <link href="/2019/12/14/echarts-tu-xing-tu-biao-ku/"/>
      <url>/2019/12/14/echarts-tu-xing-tu-biao-ku/</url>
      
        <content type="html"><![CDATA[<p>ECharts:是一款由Apache开源的图形图标库（数据可视化）</p>]]></content>
      
      
      <categories>
          
          <category> 库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据可视化库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript和Jquery事件对比，以及JQuery的底层实现原理</title>
      <link href="/2019/12/14/javascript-he-jquery-shi-jian-dui-bi-yi-ji-jquery-de-di-ceng-shi-xian-yuan-li-1/"/>
      <url>/2019/12/14/javascript-he-jquery-shi-jian-dui-bi-yi-ji-jquery-de-di-ceng-shi-xian-yuan-li-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿淘宝轮播图</title>
      <link href="/2019/12/12/fang-tao-bao-lun-bo-tu/"/>
      <url>/2019/12/12/fang-tao-bao-lun-bo-tu/</url>
      
        <content type="html"><![CDATA[<pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*index.css*/</span><span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">980</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">455</span>px<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">219</span>px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.focus</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">721</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">455</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.focus</span> ul </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.focus</span> ul li </span><span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.arrow-l</span>,<span class="token class">.arrow-r</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.arrow-r</span> </span><span class="token punctuation">{</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.circle</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.circle</span> li </span><span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*background-color: #fff;*/</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">3</span>px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*鼠标经过显示小手*/</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.current</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*清除元素默认的内外边距  */</span><span class="token selector">* </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*让所有斜体 不倾斜*/</span><span class="token selector">em,i </span><span class="token punctuation">{</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*去掉列表前面的小点*/</span><span class="token selector">li </span><span class="token punctuation">{</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*图片没有边框   去掉图片底侧的空白缝隙*/</span><span class="token selector">img </span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*ie6*/</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*让button 按钮 变成小手*/</span><span class="token selector">button </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*取消链接的下划线*/</span><span class="token selector">a </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#e33333</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button,input </span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Microsoft YaHei'</span>, <span class="token string">'Heiti SC'</span>, tahoma, arial, <span class="token string">'Hiragino Sans GB'</span>, \<span class="token entity" title="\5B8B">\5B8B</span><span class="token entity" title="\4F53">\4F53</span>, sans-serif<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*取消轮廓线 蓝色的*/</span>    <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">font</span><span class="token punctuation">:</span> <span class="token number">12</span>px/<span class="token number">1.5</span> <span class="token string">'Microsoft YaHei'</span>, <span class="token string">'Heiti SC'</span>, tahoma, arial, <span class="token string">'Hiragino Sans GB'</span>, \<span class="token entity" title="\5B8B">\5B8B</span><span class="token entity" title="\4F53">\4F53</span>, sans-serif<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.hide</span>,<span class="token class">.none</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*清除浮动*/</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"."</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>    *<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>品优购-综合网购首选-正品低价、品质保障、配送及时、轻松购物！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>品优购JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,品优购<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入facicon.ico网页图标 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>favicon.ico<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/x-icon<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入 首页的css文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 这个animate.js 必须写到 index.js的上面引入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/move.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入我们首页的js文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>focus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 左侧按钮 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arrow-l<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token entity" title="&lt;">&amp;lt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 右侧按钮 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arrow-r<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 核心的滚动区域 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload/focus.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload/focus1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload/focus2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload/focus3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 小圆圈 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*move.js*/</span><span class="token keyword">function</span> <span class="token function">css</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>currentStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> json<span class="token punctuation">,</span> during<span class="token punctuation">,</span> fx<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span>    <span class="token keyword">var</span> starttime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> d <span class="token operator">=</span> during <span class="token operator">||</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>attr <span class="token keyword">in</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>        j<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">==</span> <span class="token string">'opacity'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token function">css</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'opacity'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            j<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">css</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        j<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">=</span> json<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> currenttime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> t <span class="token operator">=</span> currenttime <span class="token operator">-</span> starttime<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">>=</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>            t <span class="token operator">=</span> d<span class="token punctuation">;</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>            callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>attr <span class="token keyword">in</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> v <span class="token operator">=</span> Tween<span class="token punctuation">[</span>fx <span class="token operator">||</span> <span class="token string">'linear'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> j<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">,</span> j<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">==</span> <span class="token string">'opacity'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> v<span class="token punctuation">;</span>                obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>filter <span class="token operator">=</span> <span class="token string">"alpha(opacity="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            obj<span class="token punctuation">.</span>style<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> v <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> Tween <span class="token operator">=</span> <span class="token punctuation">{</span>    linear<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//匀速</span>        <span class="token keyword">return</span> c <span class="token operator">*</span> t <span class="token operator">/</span> d <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    easeIn<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//加速曲线</span>        <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    easeOut<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//减速曲线</span>        <span class="token keyword">return</span> <span class="token operator">-</span>c <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    easeBoth<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//加速减速曲线</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> c <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span>c <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">--</span>t<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    easeInStrong<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//加加速曲线</span>        <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    easeOutStrong<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//减减速曲线</span>        <span class="token keyword">return</span> <span class="token operator">-</span>c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">=</span> t <span class="token operator">/</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    easeBothStrong<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//加加速减减速曲线</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> c <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span>c <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    elasticIn<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//正弦衰减曲线（弹动渐入）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p <span class="token operator">=</span> d <span class="token operator">*</span> <span class="token number">0.3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a <span class="token operator">||</span> a <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> p <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> p <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span>c <span class="token operator">/</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>a <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">*</span> d <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">/</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    elasticOut<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//正弦增强曲线（弹动渐出）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p <span class="token operator">=</span> d <span class="token operator">*</span> <span class="token number">0.3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a <span class="token operator">||</span> a <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> p <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> p <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span>c <span class="token operator">/</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">*</span> d <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">/</span> p<span class="token punctuation">)</span> <span class="token operator">+</span> c <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    elasticBoth<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p <span class="token operator">=</span> d <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0.3</span> <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a <span class="token operator">||</span> a <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> p <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> p <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span>c <span class="token operator">/</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">0.5</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span>                Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">*</span> d <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">/</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span>            Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">*</span> d <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">/</span> p<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> c <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    backIn<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//回退加速（回退渐入）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> s <span class="token operator">==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s <span class="token operator">=</span> <span class="token number">1.70158</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    backOut<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> s <span class="token operator">==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s <span class="token operator">=</span> <span class="token number">3.70158</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//回缩的距离</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">=</span> t <span class="token operator">/</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    backBoth<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> s <span class="token operator">==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s <span class="token operator">=</span> <span class="token number">1.70158</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> c <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">*</span> t <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">*</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.525</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">-</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> c <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">*</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.525</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    bounceIn<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//弹球减振（弹球渐出）</span>        <span class="token keyword">return</span> c <span class="token operator">-</span> Tween<span class="token punctuation">[</span><span class="token string">'bounceOut'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>d <span class="token operator">-</span> t<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    bounceOut<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7.5625</span> <span class="token operator">*</span> t <span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7.5625</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.5</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">2.5</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7.5625</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2.25</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">0.9375</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7.5625</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2.625</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">0.984375</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    bounceBoth<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Tween<span class="token punctuation">[</span><span class="token string">'bounceIn'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>t <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Tween<span class="token punctuation">[</span><span class="token string">'bounceOut'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>t <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> c <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*index.js*/</span>window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*获取轮播图主视口*/</span>    <span class="token keyword">var</span> focus <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".focus"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*获取左右切换按钮*/</span>    <span class="token keyword">var</span> btnNext <span class="token operator">=</span> focus<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".arrow-r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> btnPre <span class="token operator">=</span> focus<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".arrow-l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*获取轮播图胶片带 ul*/</span>    <span class="token keyword">var</span> uls <span class="token operator">=</span> focus<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*获取胶片带上的每一幅图片的承载框集合 li*/</span>    <span class="token keyword">var</span> lis <span class="token operator">=</span> uls<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*获取小圆点承载框 为后续遍历添加小圆点提供容器*/</span>    <span class="token keyword">var</span> ols <span class="token operator">=</span> focus<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".circle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*新建全局控制开关  主要用来控制动画的启停 但实质上并未停止定时器，只是控制了定时器中的执行函数*/</span>    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*声明并初始化全局 nums*/</span>    <span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*以轮播图片数量为遍历条件，向小圆点承载容器中遍历添加小圆点（即向其中添加li元素），    并且给第一个小圆点添加class的属性为"current"（在CSS里预定义好的当前选中的样式），    同时，所有添加的li标签，添加额外的对象属性为index:i 然后通过fatherNode.appendChild(sonNode)    将所有的li添加到ols中*/</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            li<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        li<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        ols<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*以下两句需要写在上述遍历完成之后，因为上述遍历的条件是i &lt; lis.length,而先执行下面两句，    上述遍历就会多一个小圆点，或者也可以通过i &lt; lis.length -1 进行修正，    克隆第一张图片，追加到轮播图胶片带的尾部，为了无缝轮播做准备*/</span>    <span class="token keyword">var</span> liEnd <span class="token operator">=</span> lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uls<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>liEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取添加完成后的ol下的小圆点的集合 li</span>    <span class="token keyword">var</span> olis <span class="token operator">=</span> ols<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历上述集合里的li元素对象，并且添加点击事件</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        olis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> olis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//遍历所有小圆点，清除所有小圆点的class值</span>                olis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//点击哪个小圆点就给哪个小圆点添加class="current"</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取当前点击小圆点的index值</span>            <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置ul的定位left值为index值乘以一个li的身位距离</span>            uls<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token operator">-</span> num <span class="token operator">*</span> lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将全局变量的nums设置为当前下标，为了让定时器与点击圆点同步</span>            nums <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//排他思想 清除所有小圆点的class属性值</span>    <span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> olis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//遍历所有小圆点，清除所有小圆点的class值</span>            olis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//轮播动画实现 -- 定时器 无缝轮播</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            nums<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*当轮播到uls.querySelectorAll("li").length-1（即最后一张的时候）*/</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">===</span> uls<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                olis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current"</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//先是500ms内切换到下一张，然后执行定位到第一张和执行</span>                <span class="token function">move</span><span class="token punctuation">(</span>uls<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"left"</span><span class="token punctuation">:</span> <span class="token operator">-</span> nums <span class="token operator">*</span> lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"easeOut"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    uls<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token function">move</span><span class="token punctuation">(</span>uls<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"left"</span><span class="token punctuation">:</span> <span class="token operator">-</span> nums <span class="token operator">*</span> lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"easeOut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                olis<span class="token punctuation">[</span>nums<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current"</span><span class="token punctuation">;</span>                <span class="token function">move</span><span class="token punctuation">(</span>uls<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"left"</span><span class="token punctuation">:</span> <span class="token operator">-</span> nums <span class="token operator">*</span> lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"easeOut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//以下通过flag控制定时器内的执行函数，来控制是否轮播</span>    <span class="token comment" spellcheck="true">//鼠标悬停 显示左右箭头</span>    focus<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseover"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        btnNext<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>        btnPre<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    focus<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseout"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        btnNext<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>        btnPre<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btnNext<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实现上一张效果</span>    btnPre<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*实现第一张到最后一张的无缝切换，原理：如果此时为第一张，点击上一张按钮，则立即        将轮播图胶片带定位到追加的最后一张（这一张和第一张相同，所以不会看出切换效果），        然后改变小圆点的当前选中为最后一张（不包含追加的那一张），然后执行move函数，切换到        最后一张（实质上是从追加的那一张切换到最后一张）*/</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            uls<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>olis<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">*</span> lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            nums <span class="token operator">=</span> olis<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            olis<span class="token punctuation">[</span>nums<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current"</span><span class="token punctuation">;</span>            <span class="token function">move</span><span class="token punctuation">(</span>uls<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"left"</span><span class="token punctuation">:</span> <span class="token operator">-</span> nums <span class="token operator">*</span> lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"easeOut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            nums <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><img src="/images/image-20191212104251554.png" alt="image-20191212104251554"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 手写轮播图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产品图片放大镜</title>
      <link href="/2019/12/09/chan-pin-tu-pian-fang-da-jing/"/>
      <url>/2019/12/09/chan-pin-tu-pian-fang-da-jing/</url>
      
        <content type="html"><![CDATA[<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>          <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>京东手机放大镜效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">* </span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">body </span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*鼠标移动事件 主体*/</span>        <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">vertical-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*可移动透明块*/</span>        <span class="token selector"><span class="token class">.moveBlock</span> </span><span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">.5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*放大镜显示块*/</span>        <span class="token selector"><span class="token class">.after</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">205</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("3.jpg")</span> no-repeat <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">600</span>px <span class="token number">600</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*放大镜遮罩层 显示JD水印*/</span>        <span class="token selector"><span class="token class">.cover</span> </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#e00000</span><span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">.4</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*播放键容器*/</span>        <span class="token selector"><span class="token class">.cover_btn</span> </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*播放键外圈*/</span>        <span class="token selector"><span class="token class">.cover_btn</span> a </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">100</span>,<span class="token number">120</span>,<span class="token number">150</span>,<span class="token number">.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid white<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">70%</span> auto <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cover_btn</span> a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*播放键 内三角*/</span>        <span class="token selector"><span class="token class">.cover_btn</span> a span </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid white<span class="token punctuation">;</span>            <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid transparent<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid transparent<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tu<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mainImg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>moveBlock<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>京东 JD.COM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cover_btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> mainView <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> moveBlock <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".moveBlock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> after <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".after"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mainView<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span>move<span class="token punctuation">)</span><span class="token punctuation">;</span>    mainView<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseout"</span><span class="token punctuation">,</span>dis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>        after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> point <span class="token operator">=</span> moveBlock<span class="token punctuation">.</span>offsetWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> maxWay <span class="token operator">=</span> mainView<span class="token punctuation">.</span>offsetWidth <span class="token operator">-</span> moveBlock<span class="token punctuation">.</span>offsetWidth <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//移动块的定位left值</span>        <span class="token keyword">var</span> lenX <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> mainView<span class="token punctuation">.</span>offsetLeft <span class="token operator">-</span> point<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//移动块的定位top值</span>        <span class="token keyword">var</span> lenY <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> mainView<span class="token punctuation">.</span>offsetTop <span class="token operator">-</span> point<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lenX <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> lenY <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lenX <span class="token operator">></span> maxWay<span class="token punctuation">)</span><span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> maxWay <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPositionX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">*</span> maxWay <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> lenX <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPositionX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">*</span> lenX <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lenY <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lenY <span class="token operator">></span> maxWay<span class="token punctuation">)</span><span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> maxWay <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPositionY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">*</span> maxWay <span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lenY <span class="token operator">></span> mainView<span class="token punctuation">)</span><span class="token punctuation">{</span>            after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> lenY <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPositionY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">*</span> lenY <span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*移出鼠标，全部隐藏*/</span>    <span class="token keyword">function</span> <span class="token function">dis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>        after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/images/image-20191209160123252.png" alt="image-20191209160123252"></p><p>效果如上图所示</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 手写JS效果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web API</title>
      <link href="/2019/12/01/web-api/"/>
      <url>/2019/12/01/web-api/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-DOM-amp-BOM"><a href="#JavaScript-DOM-amp-BOM" class="headerlink" title="JavaScript DOM&amp;BOM"></a>JavaScript DOM&amp;BOM</h1><ul><li>ECMAScript</li></ul><p><strong>Web APIs</strong>  负责页面交互效果</p><ul><li>DOM<ol><li>其实时我们操作页面元素的各种方法的集合，也可以称为是方法集合的对象。（操作页面的方法包括：让元素显示隐藏、改变元素的宽高颜色等）</li></ol></li><li>BOM</li></ul><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><ul><li>API(Application Programming Interface,应用程序编程接口)是一些<strong>预先定义的函数</strong>，目的是提供应用程序与开发人员基于某些软件或硬件得以访问一组例程的能力，但又无需访问源码或者理解内部工作机制的细节。<strong>简单来讲，API是给程序员提供的一种工具，以便能更轻松地实现想要完成的功能。</strong></li></ul><h4 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h4><ul><li>Web API是浏览器提供的一套操作<strong>浏览器功能</strong>和<strong>页面元素</strong>的API(BOM&amp;DOM)。</li></ul><h4 id="API-和-Web-API-总结"><a href="#API-和-Web-API-总结" class="headerlink" title="API 和 Web API 总结"></a>API 和 Web API 总结</h4><p>API 是为我们程序员提供的一个接口，帮助我们实现某种功能</p><p>API 其实就是一组方法的集合体</p><p>Web API 就是浏览器中的一组方法的集合体，我们 JS 程序运行在浏览器中的时候，就可以调用Web API 中的各种方法，如果运行在其他环境中，就需要调用其他环境提供的API方法。（比如让js程序在node.js环境中运行，则会报错）</p><p>Web APIs </p><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><ol><li><p>DOM(Document Object Model,文档对象模型)，是W3C组织推荐的处理可扩展标记语言（HTML或者XML）的标准编程接口。</p></li><li><p>DOM树（节点树）</p><p>在DOM中，我们认为网页中所有内容都是节点<code>node</code>（标签、属性、文本、注释等），我们整个页面都是由各种节点组成，因此，我们整个页面也可以被称为节点树或者DOM树。</p><p>DOM把以上内容都看作是对象。</p></li></ol><h2 id="一、DOM-获取元素"><a href="#一、DOM-获取元素" class="headerlink" title="一、DOM 获取元素"></a>一、DOM 获取元素</h2><h3 id="1-获取页面中元素的几种简单方法"><a href="#1-获取页面中元素的几种简单方法" class="headerlink" title="1. 获取页面中元素的几种简单方法"></a>1. 获取页面中元素的几种简单方法</h3><h4 id="1-1-根据-ID-（获取某个元素对象）"><a href="#1-1-根据-ID-（获取某个元素对象）" class="headerlink" title="1.1 根据 ID （获取某个元素对象）"></a>1.1 根据 ID （获取<strong>某个</strong>元素对象）</h4><p>使用 <code>getElementById(&quot;类选择器不带符号&quot;);</code></p><ol><li>因为我们文档页面从上往下加载，所以先要有标签，所以我们script写到对应的标签下面</li><li>get （获得）Element （元素） By （通过） 驼峰命名法</li><li>参数是大小写敏感的字符串</li><li>返回的是指定元素对象</li></ol><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>me<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个打印文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> d <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"me"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="1-2-通过标签名获取（某些元素对象的集合-同种元素对象）"><a href="#1-2-通过标签名获取（某些元素对象的集合-同种元素对象）" class="headerlink" title="1.2 通过标签名获取（某些元素对象的集合 - 同种元素对象）"></a>1.2 通过标签名获取（某些元素对象的集合 - 同种元素对象）</h4><p>使用<code>getElementsByTagName(&quot;标签选择器&quot;)</code></p><p>获取过来的是元素对象的集合，以伪数组的形式存储。HTMLCollection</p><p><img src="/images/image-20191209163814791.png" alt="image-20191209163814791"></p><h4 id="拓展1：伪数组"><a href="#拓展1：伪数组" class="headerlink" title="拓展1：伪数组"></a>拓展1：伪数组</h4><p>具有数组的形态，但是不具备数组的方法或者属性的数据集合被称为伪数组或者类数组，比较典型的有arguments还有<code>getElementsByTagName()</code>获取的页面元素的集合。</p><p>特点：有length属性且length属性的值为Number类型的对象，如果length的值不为零，则其他属性按照类似数组一样键（下标）：值对的形式存储。</p><p>这样也非常方便遍历得到获取的相应的元素对象。</p><p>Array.from(伪数组);可以把伪数组转化成真实的数组，值就是伪数组中的元素对象<code>HTMLLIElement</code>。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"con"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>我是li1<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>我是li2<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>我是li3<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>我是li4<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>我是li5<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="/images/image-20191209164920599.png" alt="image-20191209164920599"></p><h3 id="2-HTML5-新增的获取元素方法"><a href="#2-HTML5-新增的获取元素方法" class="headerlink" title="2. HTML5 新增的获取元素方法"></a>2. HTML5 新增的获取元素方法</h3><h4 id="2-1-通过类名获取（某些元素对象的集合-同类名元素对象）"><a href="#2-1-通过类名获取（某些元素对象的集合-同类名元素对象）" class="headerlink" title="2.1 通过类名获取（某些元素对象的集合 - 同类名元素对象）"></a>2.1 通过类名获取（某些元素对象的集合 - 同类名元素对象）</h4><p>使用<code>getElementsByClassName(&quot;类选择器名，不加符号&quot;)</code></p><p>获取过来的是元素对象的集合，以伪数组的形式存储。HTMLCollection</p><h4 id="2-2-全局CSS选择器获取"><a href="#2-2-全局CSS选择器获取" class="headerlink" title="2.2 全局CSS选择器获取"></a>2.2 全局CSS选择器获取</h4><p>使用</p><ol><li><p><code>querySelector(&quot;选择器加符号，标签选择器无符号&quot;)</code></p><p>返回指定选择器的第一个元素对象，类似<code>getElementById(&quot;idValue&quot;)</code></p></li><li><p><code>querySelectorAll(&quot;选择器加符号，标签选择器无符号&quot;)</code></p><p>返回指定选择器的所有元素对象的集合NodeList。</p></li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/images/image-20191209171701515.png" alt="image-20191209171701515"></p><h4 id="拓展2：NodeList"><a href="#拓展2：NodeList" class="headerlink" title="拓展2：NodeList"></a>拓展2：NodeList</h4><p><code>NodeList</code> 对象是一个节点的集合，是由 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/childNodes" target="_blank" rel="noopener"><code>Node.childNodes</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll" target="_blank" rel="noopener"><code>document.querySelectorAll</code></a> 返回的.</p><blockquote><p>NodeList<strong>不是一个数组</strong>，是一个类似数组的对象(<em>Like Array Object</em>).</p><p>虽然NodeList不是一个数组，但是可以使用forEach()对其进行迭代。</p><p>还可以使用Array.from()将其转换为实际数组。</p></blockquote><p>在一些情况下，<code>NodeList</code> 对象是一个实时集合，也就是说，如果文档中的节点树发生变化，则已经存在的实时 <code>NodeList</code> 对象也会随之变化。例如，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/childNodes" target="_blank" rel="noopener"><code>Node.childNodes</code></a> 是实时的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'parent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child_nodes <span class="token operator">=</span> parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child_nodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我们假设结果会是“2”</span>parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child_nodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 但此时的输出是“3”</span></code></pre><p>在其他情况下，<code>NodeList</code> 是一个静态集合，也就意味着随后对文档对象模型的任何改动都不会影响集合的内容。比如<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll" target="_blank" rel="noopener"><code>document.querySelectorAll</code></a> 就会返回一个静态的 <code>NodeList</code>。</p><p>最好牢记这种不同，尤其是在当你选择 <code>NodeList</code> 中所有项遍历的方式，或缓存它的长度的时候。</p><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/length" target="_blank" rel="noopener"><code>NodeList.length</code></a></p><p><code>NodeList</code> 中包含的节点个数。</p></li></ul><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for" target="_blank" rel="noopener">for</a> 循环遍历一个<code>NodeList</code> 对象中的所有的节点：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myNodeList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> item <span class="token operator">=</span> myNodeList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 调用 myNodeList.item(i) 是没有必要的</span><span class="token punctuation">}</span></code></pre><p><strong>不要尝试使用 <code>for...in</code> 或者 <code>for each...in</code> 来遍历一个 <code>NodeList</code> 对象中的元素</strong>，因为，如果你把上述两个属性也看成 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element" target="_blank" rel="noopener"><code>element</code></a> 对象的话，<code>NodeList</code> 对象中的 <code>length</code> 和 <code>item</code> 属性也会被遍历出来，这可能会导致你的脚本运行出错。此外，<code>for...in</code> 不能保证访问这些属性的顺序。</p><p><a href="https://developer.mozilla.org/zh-CN/JavaScript/Reference/Statements/for...of" target="_blank" rel="noopener">for…of</a> 循环<strong>将会</strong>正确的遍历 <code>NodeList</code> 对象：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'input[type=checkbox]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> checkbox <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>  checkbox<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最近，浏览器也支持一些遍历方法，比如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/forEach" target="_blank" rel="noopener"><code>forEach()</code></a> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/entries" target="_blank" rel="noopener"><code>entries()</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/values" target="_blank" rel="noopener"><code>values()</code></a>、和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/keys" target="_blank" rel="noopener"><code>keys()</code></a>。</p><p>也有一种使用数组 <code>Array</code> 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener"><code>Array.prototype.forEach</code></a> 来遍历 <code>NodeList</code> 的方法，这种方法兼容 Internet Explorer ：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'input[type=checkbox]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>checkbox<span class="token punctuation">)</span> <span class="token punctuation">{</span>  checkbox<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="为什么-NodeList-不是数组？"><a href="#为什么-NodeList-不是数组？" class="headerlink" title="为什么 NodeList 不是数组？"></a>为什么 NodeList 不是数组？</h5><p><code>NodeList</code> 对象在某些方面和数组非常相似，看上去可以直接使用从 <code>Array.prototype</code> 上继承的方法。然而，除了 <code>forEach</code> 方法，<code>NodeList</code> 没有这些类似数组的方法。</p><p>JavaScript 的继承机制是基于原型的。数组元素之所以有一些数组方法（比如 <code>forEach</code> 和 <code>map</code>），是因为它的原型链上有这些方法，如下:</p><p><code>myArray --&gt; Array.prototype --&gt; Object.prototype --&gt; null</code>（想要获取一个对象的原型链，可以连续地调用 <code>Object.getPrototypeOf</code>，直到原型链尽头）。</p><p><code>forEach</code>，<code>map</code> 这些方式其实是 <code>Array.prototype</code> 这个对象的方法。</p><p>和数组不一样的是，<code>NodeList</code> 的原型链是这样的：</p><pre><code>myNodeList --&gt; NodeList.prototype --&gt; Object.prototype --&gt; null</code></pre><p>NodeList的原型上除了类似数组的 <code>forEach</code> 方法之外，还有 <code>item</code>，<code>entries</code>，<code>keys</code> 和 <code>values</code> 方法。</p><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>一个解决办法就是把 <code>Array.prototype</code> 上的方法添加到 <code>NodeList.prototype</code> 上。可是，要注意<a href="http://perfectionkills.com/whats-wrong-with-extending-the-dom/" target="_blank" rel="noopener">扩展DOM对象的原型是非常危险的</a>，尤其是在旧版本的Internet Explorer（6，7，8）中。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arrayMethods <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span> Array<span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span>arrayMethods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> attachArrayMethodsToNodeList <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">attachArrayMethodsToNodeList</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>methodName <span class="token operator">!==</span> <span class="token string">"length"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    NodeList<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span> <span class="token string">'div'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> firstDiv <span class="token operator">=</span> divs<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>firstDiv<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span> divChild <span class="token punctuation">)</span><span class="token punctuation">{</span>  divChild<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'#0F0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不扩展 DOM 对象原型的解决办法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> forEach <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach<span class="token punctuation">;</span><span class="token keyword">var</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span> <span class="token string">'div'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> firstDiv <span class="token operator">=</span> divs<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>forEach<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>firstDiv<span class="token punctuation">.</span>childNodes<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span> divChild <span class="token punctuation">)</span><span class="token punctuation">{</span>  divChild<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'#0F0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>请注意，在上面的代码中，将某个宿主对象 （如 <code>NodeList</code>） 作为 <code>this</code> 传递给原生方法 （如 forEach） 不能保证在所有浏览器中工作，已知在一些浏览器中会失败。</p></blockquote><h4 id="拓展3：HTMLCollection"><a href="#拓展3：HTMLCollection" class="headerlink" title="拓展3：HTMLCollection"></a>拓展3：HTMLCollection</h4><p><strong><code>HTMLCollection</code></strong> 接口表示一个包含了元素（元素顺序为文档流中的顺序）的通用集合（generic collection），还提供了用来从该集合中选择元素的方法和属性。</p><p><strong>注意：由于历史原因（DOM4之前，实现该接口的集合只能包含 HTML 元素），该接口被称为</strong> <code>HTMLCollection</code>。</p><p>HTML DOM 中的 <code>HTMLCollection</code> 是即时更新的（live）；当其所包含的文档结构发生改变时，它会自动更新。</p><h5 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h5><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCollection/length" target="_blank" rel="noopener"><code>HTMLCollection.length</code></a> 只读</p><p>返回集合当中子元素的数目。</p></li></ul><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCollection/item" target="_blank" rel="noopener"><code>HTMLCollection.item()</code></a></p><p>根据给定的索引（从0开始），返回具体的节点。如果索引超出了范围，则返回 <code>null</code>。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCollection/namedItem" target="_blank" rel="noopener"><code>HTMLCollection.namedItem()</code></a></p><p>根据 Id 返回指定节点，或者作为备用，根据字符串所表示的 <code>name</code> 属性来匹配。根据 name 匹配只能作为最后的依赖，并且只有当被引用的元素支持 <code>name</code> 属性时才能被匹配。如果不存在符合给定 name 的节点，则返回 <code>null</code>。</p></li></ul><h5 id="在-JavaScript-中使用"><a href="#在-JavaScript-中使用" class="headerlink" title="在 JavaScript 中使用"></a>在 JavaScript 中使用</h5><p>在 JavaScript 中，为了获取给定的 HTMLCollection 的元素，可以使用方括号语法来代替直接调用 <code>item()</code> 或 <code>namedItem()</code> 方法。在方括号中，数值如同 <code>item()</code>，字符串值如同 <code>namedItem()。</code></p><p>例如，假定在文档中有一个元素，且它的 <code>id</code> 是 <code>&quot;myForm&quot;</code>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> elem1<span class="token punctuation">,</span> elem2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// document.forms 是一个 HTMLCollection</span>elem1 <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>elem2 <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>elem1 <span class="token operator">===</span> elem2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显示 "true"</span>elem1 <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token string">"myForm"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>elem2 <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">.</span><span class="token function">namedItem</span><span class="token punctuation">(</span><span class="token string">"myForm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>elem1 <span class="token operator">===</span> elem2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显示 "true"</span></code></pre><h5 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h5><p>当使用字符串作为 namedItem 的参数，且匹配的元素多于一个时，不同的浏览器表现不同。Firefox 8 表现如同 DOM 2 和 DOM 4 说明的，返回第一个匹配的元素。而 Webkit 浏览器和 IE 返回另外一个 HTMLCollection，Opera 返回一个包含所有元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList" target="_blank" rel="noopener"><code>NodeList</code></a>。</p><hr><h3 id="3-特殊元素的获取"><a href="#3-特殊元素的获取" class="headerlink" title="3. 特殊元素的获取"></a>3. 特殊元素的获取</h3><h4 id="3-1-获取-body-元素"><a href="#3-1-获取-body-元素" class="headerlink" title="3.1 获取 body 元素"></a>3.1 获取 body 元素</h4><p><code>document.body;</code></p><h4 id="3-2-获取-HTML-元素"><a href="#3-2-获取-HTML-元素" class="headerlink" title="3.2 获取 HTML 元素"></a>3.2 获取 HTML 元素</h4><p><code>document.documentElement;</code></p><h2 id="二、事件"><a href="#二、事件" class="headerlink" title="二、事件"></a>二、事件</h2><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。</p><p>简单理解：触发——响应机制。</p><p>网页中的每个元素都可以产生某些可以触发的 JavaScript 事件。就像<code>&lt;a&gt;</code>标签自带的转跳机制和鼠标变为小手。即点击（触发）转跳（响应）悬停（触发）变小手（响应）。</p><h4 id="1-事件三要素"><a href="#1-事件三要素" class="headerlink" title="1. 事件三要素"></a>1. 事件三要素</h4><ol><li><p>事件源</p><p>谁？ 页面元素</p></li><li><p>事件类型</p><p>如何触发 什么事件？鼠标点击（click）、悬停(mouseover)、键盘按下(keydown)、滑动滚轮(mousewheel)等</p></li></ol><table><thead><tr><th>鼠标事件</th><th>触发事件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过（悬停）触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发（表单）</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><ol><li><p>事件处理程序</p><p>通过一个函数赋值的方式完成</p></li></ol><h4 id="2-执行事件的步骤"><a href="#2-执行事件的步骤" class="headerlink" title="2. 执行事件的步骤"></a>2. 执行事件的步骤</h4><ol><li>获取事件源</li><li>注册事件（绑定事件类型）</li><li>添加事件处理程序（采取函数赋值的形式）</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"----"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="三、DOM-操作元素"><a href="#三、DOM-操作元素" class="headerlink" title="三、DOM 操作元素"></a>三、DOM 操作元素</h2><h3 id="1-DOM-操作元素之改变内容"><a href="#1-DOM-操作元素之改变内容" class="headerlink" title="1. DOM 操作元素之改变内容"></a>1. DOM 操作元素之改变内容</h3><p>JavaScript 的 DOM 操作可以改变网页的内容、结构和样式，我们可以利用DOM操作元素来改变元素里面的内容、属性等。</p><h4 id="1-1-Element-innerText"><a href="#1-1-Element-innerText" class="headerlink" title="1.1 Element.innerText"></a>1.1 Element.innerText</h4><p>非标准 不识别html标签，去除空格和换行</p><h4 id="1-2-Element-innerHTML"><a href="#1-2-Element-innerHTML" class="headerlink" title="1.2 Element.innerHTML"></a>1.2 Element.innerHTML</h4><p>W3C标准 识别html标签，保留空格和换行（用的多）</p><p>获取系统时间：</p><pre class=" language-html"><code class="language-html"></code></pre><p>以上两个属性，都是可读写的，并且向内部添加内容时，会覆盖原有内容，如需保留原有内容，则需要拼接原有的内容</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"要添加的内容"</span><span class="token punctuation">;</span></code></pre><p>事件驱动函数中的this永远指向当前时间函数所挂载的那个DOM对象，简单的来说，就是给哪个元素添加了事件，那么这个事件中的this就指向这个元素。</p><p>定位会影响他的层级，所以鼠标事件可能会受到影响</p><p>style对象里面保存了所有的css样式，作为他的属性名，任何一个元素都拥有style对象，对象中的属性都是一样的，如果当前没有默认的行内样式，则当前样式的属性值为空。</p><p>style对象的作用原理，就是但我们使用style给元素添加样式的时候，他会默认给元素添加一个行内样式，因此达到改变元素样式的效果。</p><p>我们可以通过修改元素的className更改元素的样式，从而达到更改样式的效果（适合样式较多或者功能复杂的情况）</p><p>class是个保留字，因此使用className</p><p>className属性会覆盖元素原有的class</p><h3 id="onkeydown、onkeypress、onkeyup三个事件有什么区别？"><a href="#onkeydown、onkeypress、onkeyup三个事件有什么区别？" class="headerlink" title="onkeydown、onkeypress、onkeyup三个事件有什么区别？"></a>onkeydown、onkeypress、onkeyup三个事件有什么区别？</h3><p>onmouseover onmousemove的区别</p><p>onmouseout</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>留言板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ww<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"textarea"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> u <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">.</span>onclick<span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入留言内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lis<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            u<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>链接不需要跳转（阻止链接跳转）：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>&lt;a href="javascript:void(0);"/a></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>自动填充表格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">table </span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>            <span class="token property">border-spacing</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">border-collapse</span><span class="token punctuation">:</span>collapse<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">thead </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">td </span><span class="token punctuation">{</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid gray<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>科目<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>分数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"唐三"</span><span class="token punctuation">,</span>            course<span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">,</span>            score<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"小舞"</span><span class="token punctuation">,</span>            course<span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">,</span>            score<span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"沐白"</span><span class="token punctuation">,</span>            course<span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">,</span>            score<span class="token punctuation">:</span> <span class="token number">92</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"大师"</span><span class="token punctuation">,</span>            course<span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">,</span>            score<span class="token punctuation">:</span> <span class="token number">190</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> tb <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"tbody"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> tr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//行</span>        <span class="token keyword">var</span> trs <span class="token operator">=</span> tb<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组中有几个对象，则生成多少行</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> td <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//列</span>            td<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组中对象的元素值插入td中</span>            trs<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>td<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> del <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        del<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;a class='del' href='javascript:;'>删除&lt;/a>"</span><span class="token punctuation">;</span>        trs<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tb<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="解除事件绑定的方式"><a href="#解除事件绑定的方式" class="headerlink" title="解除事件绑定的方式"></a>解除事件绑定的方式</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.设置事件触发源的事件为空</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.解除相应的绑定事件</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当发生事件的时候，事件流始终存在，与文档元素是否存在相应的事件无关</p><h2 id="动画实现原理"><a href="#动画实现原理" class="headerlink" title="动画实现原理"></a>动画实现原理</h2><p>核心原理：通过定时器setInterval()不断切换盒子的显示效果等。</p><ol><li><p>获得盒子的当前位置</p></li><li><p>让盒子在当前位置上加 1 个移动距离</p></li><li><p>利用定时器，不断重复这个操作<code>setInterval()</code></p></li><li><p>加一个结束定时器的条件</p><blockquote><p>注意：该盒子需要加定位，才能使用Element.style.left = Element.offsetLeft +1 + “px”;</p></blockquote></li></ol><p>简单动画函数的封装  <code>obj 目标对象</code> <code>target 目标位置</code></p><pre class=" language-html"><code class="language-html"></code></pre><p>JS自动化思想</p><p>一致性</p><p>可复用性</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web API </tag>
            
            <tag> DOM&amp;BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5与CSS3权威指南</title>
      <link href="/2019/11/29/du-shu-bi-ji-html-yu-css3-quan-wei-zhi-nan-shang-xia/"/>
      <url>/2019/11/29/du-shu-bi-ji-html-yu-css3-quan-wei-zhi-nan-shang-xia/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/HTML5%E4%B8%8ECSS3.jpg" alt="HTML5与CSS3权威指南.jpg"></p><h1 id="前言-此版本为第三版"><a href="#前言-此版本为第三版" class="headerlink" title="前言 此版本为第三版"></a>前言 此版本为第三版</h1><p>技术范围：截止2015年5月前</p><p><strong>HTML5：</strong>基于2014年10月28日，W3C的HTML工作组正式发布的HTML5的正式推荐标准。</p><p>增加了支持web应用开发者的许多新特性，以及更符合开发者使用习惯的新元素，并重点关注定义<strong>清晰的、一致的准则</strong>，以确保web应用和内容在不同用户代理（浏览器）中的互操作性。</p><p>HTML5是构建<strong>开放web平台</strong>的核心。</p><p><strong>CSS3:</strong> 2015年4月9日，W3C的CSS工作组发布CSS基本用户接口模块（CSS Basic User Interface Module Level 3,CSS3 UI）的标准工作草案。该文档描述了CSS3中对HTML、XML（包括 XHTML）进行样式处理所需的与用户界面相关的CSS选择器（selectors）、属性及属性值。它包含并扩展了在CSS Level 2 及 Selector 规范中定义的与用户接口有关的特性。</p><p><strong>新体验：</strong>web的音频和视频不再需要插件，通过Canvas更灵活地完成图像绘制，而不必考虑屏幕的分辨率，浏览器对<strong>可扩展矢量图</strong>（SVG）和数学标记语言(MathML)的本地支持，通过引入新的注释信息以增强对东亚文字呈现（Ruby）的支持，对富web应用信息无障碍新特性的支持，等等。</p><h1 id="拓展-SGML-XML-HTML"><a href="#拓展-SGML-XML-HTML" class="headerlink" title="拓展 SGML XML HTML"></a>拓展 SGML XML HTML</h1><h2 id="HTML-5-已经不是-SGML-的子集，那么-SGML-、XML-、-HTML-之间有什么关联与区别呢"><a href="#HTML-5-已经不是-SGML-的子集，那么-SGML-、XML-、-HTML-之间有什么关联与区别呢" class="headerlink" title="HTML 5 已经不是 SGML 的子集，那么 SGML 、XML 、 HTML 之间有什么关联与区别呢?"></a>HTML 5 已经不是 SGML 的子集，那么 SGML 、XML 、 HTML 之间有什么关联与区别呢?</h2><p><strong>SGML</strong>是指“标准通用标记语言”(Standard Generalized Markup Language), 是1986年出版发布的一个信息管理方面的国际标准(ISO 8879)，它是国际上定义电子文件结构和内容描述的标准，是一种非常复杂的文档的结构，主要用于大量高度结构化数据的防卫区和其他各种工业领域，利于分类和索引。SGML规定了在文档中嵌入描述标记的标准格式，指定了描述文档结构的标准方法，目前在WEB上使用的HTML格式便是使用固定标签集的一种SGML文档。由于SGML可以支持无数的文档结构类型，并且可以创建与特定的软硬件无关的文档，因此很容易与使用不同计算机系统的用户交换文档。同XML相比，定义的功能很强大，缺点是它不适用于Web数据描述，而且SGML软件价格非常价格昂贵。 </p><p><strong>HTML</strong>即“HyperText Markup Language” （超文本标记语言）,它的优点是比较适合web 页面的开发。但它有一个缺点是标记相对较少，只有固定的标记集如<code>&lt;p&gt; &lt;strong&gt;</code> 等。缺少 SGML  的柔性和适应性。不能支持特定领域的标记语言，如对数学、化学、音乐等领域的表示支持较少。</p><p>所谓的XML（Extensible Markup Language）, 翻译成中文就是“可扩展标识语言“，在国内很多人理解<code>xml</code>为<code>html</code>的简单扩展，这实际上是一种误解。尽管 <code>xml</code> 同 <code>html</code> 关系非常密切。 它由万维网协会（W3C）创建，用来克服  HTML 的局限。和 HTML 一样，XML 也基于 SGML。XML 是为 Web 设计的。  <strong>XML 实际上是Web上表示结构化信息的一种标准文本格式</strong>，它没有复杂的语法和包罗万象的数据定义。</p><p><strong>SGML</strong> 是一种在Web发明之前就早已存在的用标记来描述文档资料的通用语言。但SGML<strong>十分庞大且难于学习和使用</strong>。鉴于此，人们提出了HTML语言。但近年来，随着Web应用的不断深入，HTML在需求广泛的应用中已显得捉襟见肘，有人建议直接使用 SGML 作为Web语言。但SGML太庞大了，学用两难尚且不说，就是全面实现SGML的浏览器也非常困难。于是Web标准化组织W3C建议使用一种精简的SGML版本——XML。XML与SGML一样，是一个用来定义其他语言的元语言。与SGML相比，XML规范不到SGML规范的1/10，简单易懂，是一门既无标签集也无语法的新一代标记语言。</p><h1 id="第一章-HTML-5-的优势"><a href="#第一章-HTML-5-的优势" class="headerlink" title="第一章 HTML 5 的优势"></a>第一章 HTML 5 的优势</h1><h2 id="HTML-5-为什么如此受欢迎？"><a href="#HTML-5-为什么如此受欢迎？" class="headerlink" title="HTML 5 为什么如此受欢迎？"></a>HTML 5 为什么如此受欢迎？</h2><ol><li><p>时代的要求</p><p>现在时代迫切要求有一个统一的互联网通用标准，以往由于各浏览器之间的不统一，所以<strong>解决浏览器之间的兼容性问题</strong>成为了开发者最为头疼的问题。</p><p>而HTML 5 的目标就是将Web带入一个成熟的应用平台，在HTML 5 平台上，视频、音频、图像、动画，以及同电脑的交互都被标准化。</p></li><li><p>Internet Explorer 8 以上的版本对HTML 5 的支持，随着其他浏览器针对此次 HTML 5 的更新的改变，抢占了许多市场份额，所以IE 8 以上版本，都对HTML 5 做了相应的支持，所以 HTML 5 在市场上大面积推广的势头是非常猛的。</p></li></ol><h2 id="为何可以放心使用-HTML-5-技术"><a href="#为何可以放心使用-HTML-5-技术" class="headerlink" title="为何可以放心使用 HTML 5 技术"></a>为何可以放心使用 HTML 5 技术</h2><ol><li><p>兼容性：HTML 4 在<strong>新版本的浏览器上</strong>也可以正常运行。（本书写的是HTML 5 在<strong>老版本的浏览器上</strong>也可以正常运行。觉得稍有问题，还是需要针对兼容性，做些调整的）</p></li><li><p>实用性：HTML 5 内部并没有封装什么很复杂的、不切实际的功能，而只是封装了简单实用的功能。</p></li><li><p>并非革命性的发展：HTML 5 的内部功能不是革命性的，只是发展性的。</p><p>以上三点就是所谓的“HTML 设计原则”，HTML 5 也是以该设计原则为基本原则而开发出来的，各主流浏览器使用 HTML 5 的前提也就是要求 HTML 5 能够符合这些原则，今后也将以此为前提来支持 HTML 5.</p></li></ol><h2 id="HTML-5-版本之前的Web技术存在的问题"><a href="#HTML-5-版本之前的Web技术存在的问题" class="headerlink" title="HTML 5 版本之前的Web技术存在的问题"></a>HTML 5 版本之前的Web技术存在的问题</h2><ol><li><p>Web 浏览器之间的兼容性很低（即规范不统一）</p></li><li><p>文档结构不够明确（即语义化不明确）</p></li><li><p>Web 应用程序的功能受到了限制（Web应用程序的功能实现无保障）</p><p>HTML 5 针对以上问题，统一了一个通用标准，追加了许多结构相关的语义化元素，并结合了包括<strong>微格式、无障碍应用</strong>在内的各种各样的周边技术。同时 HTML 5 开始提供各种各样Web应用上的新API，各浏览器也在快速地封装着这些API，HTML 5 已经使富Web应用地实现变成了可能。</p></li></ol><h1 id="第二章-HTML-5-与-HTML-4-的区别"><a href="#第二章-HTML-5-与-HTML-4-的区别" class="headerlink" title="第二章 HTML 5 与 HTML 4 的区别"></a>第二章 HTML 5 与 HTML 4 的区别</h1><h2 id="从-HTML-5-开始，对于文件的字符编码，推荐使用UTF-8。"><a href="#从-HTML-5-开始，对于文件的字符编码，推荐使用UTF-8。" class="headerlink" title="从 HTML 5 开始，对于文件的字符编码，推荐使用UTF-8。"></a>从 HTML 5 开始，对于文件的字符编码，推荐使用UTF-8。</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/*HTML 4 中指定文档的字符编码*/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/*HTML 5 中指定文档的字符编码*//*以上两种方法都可以使用，但是不可以同时混合使用，如像下面使用是错误的*/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript面向对象</title>
      <link href="/2019/11/28/js-mian-xiang-dui-xiang/"/>
      <url>/2019/11/28/js-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript-面向对象-精选"><a href="#JavaScript-面向对象-精选" class="headerlink" title="JavaScript 面向对象 精选"></a>JavaScript 面向对象 精选</h3><p>模拟京东倒计时</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">countTime</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> nowTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> inputTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> countSum <span class="token operator">=</span> <span class="token punctuation">(</span>inputTime <span class="token operator">-</span> nowTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出秒数</span>    <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countSum <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出剩余天数</span>    d <span class="token operator">=</span> d <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> d <span class="token punctuation">:</span> d<span class="token punctuation">;</span>    <span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countSum <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出剩余小时数</span>    h <span class="token operator">=</span> h <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> h <span class="token punctuation">:</span> h<span class="token punctuation">;</span>    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countSum <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出剩余分钟数</span>    m <span class="token operator">=</span> m <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> m <span class="token punctuation">:</span> m<span class="token punctuation">;</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countSum <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出剩余秒数</span>    s <span class="token operator">=</span> s <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> s <span class="token punctuation">:</span> s<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"剩余时间为："</span> <span class="token operator">+</span> d <span class="token operator">+</span> <span class="token string">"天 "</span> <span class="token operator">+</span> h <span class="token operator">+</span> <span class="token string">"小时 "</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">"分钟 "</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"现在时间为："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token function">countTime</span><span class="token punctuation">(</span><span class="token string">"2019-11-29 19:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>添加 删除数组元素的方法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1.尾部追加数组元素  push2.头部追加数组元素  unshift*/</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vaar arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span><span class="token string">"是个帅哥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>数组排序 翻转数组&amp;升序、降序</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//reverse() 翻转数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"pink"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sort() 升降序</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//升序</span>    <span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//降序</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//面试的话使用冒泡排序</span></code></pre><p>数组索引读取  <strong>有面试点</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*数组去重面试重点目标：把旧数组里面不重复的元素取出来放到新数组中，重复的元素只保留一个，放到新数组中去重；核心算法：我们遍历旧数组元素，在新数组查看是否存在此元素，存在舍弃，不存在就在新数组追加此元素*/</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span><span class="token string">"Coder"</span><span class="token punctuation">,</span><span class="token string">"Rat"</span><span class="token punctuation">,</span><span class="token string">"coder"</span><span class="token punctuation">,</span><span class="token string">"rat"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arrNew <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arrNew<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arrNew<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arrNew<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>基本包装类型 和 复杂数据类型的区别</p><p>基本包装类型 也属于对象，只不过，后来销毁了他的对象内存指向，（即有生命周期）</p><p>调用方法的时候 相当于对象 不调用方法和属性，仅是简单的赋值操作，则不会执行包装成对象再销毁的过程。</p><p>var  str = “angy”; //简单过程</p><p>var l = str.length;=&gt;</p><p>字符串的不可变性：</p><p>当重新赋值字符串，会开辟新的内存空间 原来的地址保留</p><p>因为<strong>数组</strong>的重新赋值 会把之前的干掉 不会重新开辟内存地址</p><pre class=" language-javascript"><code class="language-javascript"></code></pre><p>自调用函数</p><pre class=" language-js"><code class="language-js"></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"aoccdrrojkokdopp"</span><span class="token punctuation">;</span><span class="token keyword">var</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    num<span class="token operator">++</span><span class="token punctuation">;</span>    index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//将get-element-by-id 字符串 转化为驼峰命名法</span>    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">"get-element-by-id"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> after <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            after <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> c <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            after <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>未完成</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery使用基础</title>
      <link href="/2018/12/18/jquery-shi-yong-ji-chu/"/>
      <url>/2018/12/18/jquery-shi-yong-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>JQuery封装了JavaScript常用的功能函数</p><p>轻量级，核心文件只有十几KB，不会影响页面的加载速度</p><p>跨浏览器兼容，基本兼容了现在主流的浏览器</p><p>链式编程</p><p>jQuery获取的 —– document.querySelectorAll(“cssSelector”);然后更改protocol</p><p>$(“cssSelector”)get(0) === $(“cssSelector”)[0] === document.querySelectorAll(“cssSelector”)[0]</p><p>jQuery中给元素添加事件是 addEventListener方式 所以可以添加多个同一事件</p><p>隐式迭代   给jQuery对象添加事件    </p><p>因为jQuery对象是一个集合，按照原生的思路，则无法直接给一个集合添加事件，但是jQuery对象直接添加事件相当于隐式迭代了jQuery对象内的所有DOM对象，分别统一添加了此事件</p><p>$(this)</p><p>$(this).children(“li”).show() === this.querySelector(“li”).style.display = “block”;</p><p>$(“div”).siblims(“.current”) //邻居元素的带class=”current”被选中</p><p>JQuery的排他思想</p><p>$(this).css(“background”,”pink”);</p><p>$(this).siblings(“button”).css(“background”,””)</p><p>$(this).index()  当前元素的索引</p><p>链式编程</p><p>$(this).css(“background”,”pink”).siblings(“button”).css(“background”,””)；</p><p>手写JQuery链式编程源码</p><p>返回值！！！方法调用会把当前调用作为返回值返回，相当于执行动作，并且返回当前调用者</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    fn1<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//return = obj;</span>        <span class="token keyword">return</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fn2<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//return = obj;</span>        <span class="token keyword">return</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>动画里面的回调函数要合理利用</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础初识</title>
      <link href="/2018/12/07/javascript-ji-chu-chu-shi/"/>
      <url>/2018/12/07/javascript-ji-chu-chu-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h1><h2 id="1-程序运行之内存条"><a href="#1-程序运行之内存条" class="headerlink" title="1. 程序运行之内存条"></a>1. 程序运行之内存条</h2><ol><li><p>打开某个程序时，先从硬盘中把程序的代码加载到内存中</p></li><li><p>CPU执行内存中的代码（此时读取的应该是机器码<code>0</code>，<code>1</code>）</p><p>之所以要内存的一个重要原因，是因为CPU运行太快了，如果只从硬盘中读取数据会浪费CPU性能，所以，才使用存取速度更快的内存来保存<strong>运行时</strong>的数据。（内存是电，硬盘是机械）</p></li></ol><h2 id="2-JavaScript-是什么"><a href="#2-JavaScript-是什么" class="headerlink" title="2. JavaScript 是什么"></a>2. JavaScript 是什么</h2><ol><li><p>JavaScript 是运行在客户端的脚本语言 (script 脚本的意思)，运行过程中不需要编译，由 JS 解释器（如chrome V8引擎）<strong>逐行解释</strong>执行（<strong>如果执行到错误代码，直接报错，后面不再执行</strong>）</p><p>浏览器本身并不会执行JS代码，而是通过内置JavaScript引擎（解释器）来执行JS代码。JS引擎执行代码时逐行解释每一句源码（转为机器语言），然后由计算机去执行，所以JavaScript语言归为脚本语言，会逐行解释执行。</p></li><li><p>现在也可以基于Node.js实现服务器端编程</p></li></ol><h2 id="3-JavaScript-的作用"><a href="#3-JavaScript-的作用" class="headerlink" title="3. JavaScript 的作用"></a>3. JavaScript 的作用</h2><ol><li><p>表单动态校验（<strong>密码强度检测</strong>）(JS产生的最初目的)</p></li><li><p>页面特效</p></li><li><p>服务端开发（Node.js）</p><p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p><p>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</p><p>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p></li><li><p>桌面程序 （Electron）</p></li><li><p>APP（Cordova）</p></li><li><p>控制硬件-物联网（Ruff）</p></li><li><p>游戏开发（cocos2d-js）</p></li></ol><h2 id="4-JavaScript-与-HTML-与-CSS-之间的关系"><a href="#4-JavaScript-与-HTML-与-CSS-之间的关系" class="headerlink" title="4. JavaScript 与 HTML 与 CSS 之间的关系"></a>4. JavaScript 与 HTML 与 CSS 之间的关系</h2><ol><li><strong>HTML</strong> 定义了网页的内容</li><li><strong>CSS</strong> 描述了网页的布局</li><li><strong>JavaScript</strong> 网页的行为</li></ol><h2 id="5-Javascript-的组成"><a href="#5-Javascript-的组成" class="headerlink" title="5. Javascript 的组成"></a>5. Javascript 的组成</h2><ol><li><p><code>ECMAScript</code>  JavaScript语法</p><p>ECMAScript 是由ECMA国际（原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为<code>JavaScript</code>（网景公司）或<code>JScript</code>（微软公司），但实际上后两者是ECMAScript语言的实现和扩展。</p><p>ECMAScript规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</p></li><li><p><code>DOM</code>  页面文档对象模型 Document Object Model</p><p>是W3C组织推荐的处理可扩展标记语言的<strong>标准编程接口</strong>，通过DOM提供的接口可以对页面中各种元素进行操作（大小、位置、颜色等）；</p></li><li><p><code>BOM</code>  浏览器对象模型 Browser Object Model</p><p>他提供了独立于内容的、可以与<strong>浏览器窗口进行互动</strong>的对象结构。通过BOM可以<strong>操作浏览器窗口</strong>，比如：弹出框、控制浏览器跳转、获取分辨率等。</p></li></ol><h2 id="6-JavaScript-的三种引入方式"><a href="#6-JavaScript-的三种引入方式" class="headerlink" title="6. JavaScript 的三种引入方式"></a>6. JavaScript 的三种引入方式</h2><ol><li><p>行内式的 JS</p></li><li><p>内嵌式的 JS</p></li><li><p>外部式的 JS 双标签</p><p><code>&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</code></p></li></ol><h2 id="7-JavaScript-输入输出语句"><a href="#7-JavaScript-输入输出语句" class="headerlink" title="7. JavaScript 输入输出语句"></a>7. JavaScript 输入输出语句</h2><table><thead><tr><th>方法</th><th>说明</th><th>归属</th><th>返回值</th></tr></thead><tbody><tr><td>aler(msg)</td><td>浏览器弹出警示框</td><td>浏览器</td><td>undefined</td></tr><tr><td>console.log(msg)</td><td>浏览器控制台打印输出信息</td><td>浏览器</td><td>undefined</td></tr><tr><td>prompt(info)</td><td>浏览器弹出输入框，用户可以输入</td><td>浏览器</td><td>输入的内容</td></tr></tbody></table><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>复习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p><strong>控制台结果分析</strong></p><p><code>输入的内容</code> prompt的返回值<br><code>undefined</code>  alert不属于JavaScript的内部函数，属于web API<br><code>请输入</code>  console.log()执行的结果<br><code>undefined</code>  console.log()不属于JavaScript的内部函数，属于web API</p></blockquote><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>白话说：装东西的盒子</p><p>通俗：<strong>变量是用于存放数据的容器</strong>。我们通过变量名获取数据，数据可以修改。</p><p>本质：变量是程序在<strong>内存</strong>中申请一块用来存放数据的空间。</p><h2 id="1-变量的使用"><a href="#1-变量的使用" class="headerlink" title="1. 变量的使用"></a>1. 变量的使用</h2><ol><li><p>声明变量</p><p><code>var 变量名;</code></p><p><code>var</code> 是 JS 关键字，用来声明变量（variable）。使用该关键字声明变量后，计算机会自动为变量分配内存空间。</p><p><code>变量名</code> 是我们定义的变量名，我们需要通过变量名访问内存中分配的空间。</p></li><li><p>赋值</p><p>变量名 = 10;</p></li><li><p>变量初始化</p><p>声明一个变量并赋值，称之为<code>变量的初始化</code>。</p><p>var 变量名 = 值；</p></li></ol><blockquote><p>变量名的命名规则遵循小驼峰命名法</p></blockquote><ol start="4"><li><p>更新变量（同一作用域内）</p><p>一个变量被重新赋值后，它的原有值会被覆盖，变量值以最后一次付的值为准。</p></li><li><p>同时声明/初始化多个变量</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span>    address <span class="token operator">=</span> <span class="token string">"中国安徽"</span><span class="token punctuation">,</span>    salary <span class="token operator">=</span> <span class="token number">8000</span><span class="token punctuation">;</span></code></pre></li><li><p>声明变量的特殊情况</p><table><thead><tr><th>情况</th><th>consol.log()的结果是</th></tr></thead><tbody><tr><td>只声明 不赋值</td><td>undefined</td></tr><tr><td>不声明 不赋值</td><td>报错</td></tr><tr><td>不声明 直接赋值</td><td>正常输出（默认加上var关键字，为全局变量，即使在函数中，也提升为全局变量）</td></tr></tbody></table></li></ol><h2 id="2-变量的命名规范"><a href="#2-变量的命名规范" class="headerlink" title="2. 变量的命名规范"></a>2. 变量的命名规范</h2><ol><li>字母 数字 下划线 <code>_</code> 美元符号 <code>$</code>（不能有空格）</li><li><strong>严格区分大小写</strong></li><li><strong>不能以数字开头</strong></li><li><strong>不能是关键字、保留字</strong>：var for while等 及特殊含义的<code>name</code></li><li>变量名必须有意义，最好转化为对应的单词，或者单词简写</li><li>遵循小驼峰命名法：首字母小写，后面单词的首字母需要大写。如<code>myFirstName</code></li></ol><h2 id="3-练习：简单交换变量"><a href="#3-练习：简单交换变量" class="headerlink" title="3. 练习：简单交换变量"></a>3. 练习：简单交换变量</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//思想：（新声明一个临时变量，作为交换媒介）</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>结果</p><p>(2) [“age”, 10]*</p><ol><li><p>0: “age”</p></li><li><p>1: 10</p></li><li><p>length: 2</p></li></ol></blockquote><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>变量是用来存储值的，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。<strong>JavaScript是一种弱类型或者动态语言</strong>。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定，而且数据类型是可以变化的。</p><h2 id="1-数据类型的分类"><a href="#1-数据类型的分类" class="headerlink" title="1. 数据类型的分类"></a>1. 数据类型的分类</h2><ol><li><p>简单数据类型</p><p>Number,String,Boolean,Undefined,Null</p></li><li><p>复杂数据类型</p><p>Object</p></li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> boo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> boo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>0 false 0 undefined null  第一个值是Number的默认值<code>0</code>；第二个值是Boolean的默认值<code>false</code>;第三个值是String的默认值为<code>“”</code>的索引。</p></blockquote><h3 id="1-1-Number-数字型"><a href="#1-1-Number-数字型" class="headerlink" title="1.1 Number 数字型"></a>1.1 Number 数字型</h3><blockquote><p><strong>进制</strong></p><p>八进制：<code>0</code>开头  0~7     <code>8 = 010；</code></p><p>十六进制：<code>0x</code>开头 0-9  a~f  <code>16 = 0x10;</code></p></blockquote><blockquote><p><strong>数字型范围</strong></p><p>最大值：<code>Number.MAX_VALUE</code></p><p>最小值：<code>Number.MIN_VALUE</code></p></blockquote><blockquote><p><strong>数字型三个特殊值</strong></p><ol><li><p><code>Infinity</code> 无穷大，大于任何值</p><p><code>console.log(Number.MAX_VALUE * 2);</code></p></li><li><p><code>-Infinity</code> 无穷小，小于任何值</p><p><code>console.log(-Number.MAX_VALUE * 2);</code></p></li><li><p><code>NaN</code> Not a Number，非数值（用了数学运算符，无法算出内容）</p><p><code>console.log(&quot;Coder Rat&quot; - 20);</code></p></li></ol></blockquote><blockquote><p><strong>isNaN()</strong></p><p>用来判断一个变量是否为<strong>非数字</strong>的类型，返回true或者false</p><p>用法：<code>isNaN(a);</code> </p><p>如果a为数字  则返回 false</p><p>如果a为非数字  则返回 true</p><p>可以用来判断用户输入的是否为数字</p><pre class=" language-js"><code class="language-js"><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// strings</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"37"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// false: 可以被转换成数值37</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"37.37"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// false: 可以被转换成数值37.37</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"37,5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'123ABC'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true:  parseInt("123ABC")的结果是 123, 但是Number("123ABC")结果是 NaN</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// false: 空字符串被转换成0</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// false: 包含空格的字符串被转换成0</span><span class="token comment" spellcheck="true">// dates</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"blabla"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// true: "blabla"不能转换成数值</span>                  <span class="token comment" spellcheck="true">// 转换成数值失败， 返回NaN</span></code></pre></blockquote><blockquote><p><strong><code>isNaN</code> 函数的必要性</strong></p><p>与 JavaScript 中其他的值不同，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN" target="_blank" rel="noopener"><code>NaN</code></a>不能通过相等操作符（== 和 ===）来判断 ，因为 <code>NaN == NaN</code> 和 <code>NaN === NaN</code> 都会返回 <code>false</code>。 因此，<code>isNaN</code> 就很有必要了。</p></blockquote><blockquote><p> <strong><code>NaN值</code>的产生</strong></p><p>当算术运算返回一个未定义的或无法表示的值时，<code>NaN</code>就产生了。但是，<code>NaN</code>并不一定用于表示某些值超出表示范围的情况。将某些不能强制转换为数值的非数值转换为数值的时候，也会得到<code>NaN</code>。</p><p>例如，0 除以0会返回<code>NaN</code>—— 但是其他数除以0则不会返回<code>NaN</code>。</p></blockquote><h3 id="1-2-String-字符串型"><a href="#1-2-String-字符串型" class="headerlink" title="1.2 String 字符串型"></a>1.2 String 字符串型</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'我是字符串'</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'我是"Coder Rat",是个程序员'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//嵌套使用的话，遵循外单内双，或者外双内单</span></code></pre><h4 id="1-2-1-字符串转义字符"><a href="#1-2-1-字符串转义字符" class="headerlink" title="1.2.1 字符串转义字符"></a>1.2.1 字符串转义字符</h4><ol><li><code>\n</code>  换行符，newline</li><li><code>\\</code>  斜杠</li><li><code>\&#39;</code>  单引号</li><li><code>\&quot;</code>  双引号</li><li><code>\t</code>  tab缩进，制表符</li><li><code>\b</code>  空格，b是blank的意思 一个空格的话等同于直接空格</li></ol><pre class=" language-js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'酷热难耐，火辣的太阳底下，我挺拔的身姿，成为了最独特的风景。\n我审视四周，这里，是我的舞台，我就是天地间的王者。\n这一刻，我豪气冲天，大喊一声："收破烂啦~"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="1-2-2-字符串长度-length"><a href="#1-2-2-字符串长度-length" class="headerlink" title="1.2.2 字符串长度 length"></a>1.2.2 字符串长度 length</h4><p>用于检测字符串的长度</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> strMsg <span class="token operator">=</span> <span class="token string">"I am Coder Rat."</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strMsg <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> strMsg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>I am Coder Rat.<br>15</p><p>–注意：空格和符号也占字符串长度–</p></blockquote><h4 id="1-2-3-字符串的拼接"><a href="#1-2-3-字符串的拼接" class="headerlink" title="1.2.3 字符串的拼接"></a>1.2.3 字符串的拼接</h4><p>多个字符串之间可以使用 <code>+</code> 进行拼接，其拼接方式为 :</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//拼接后的新字符串 = 字符串 + 任何类型;</span><span class="token keyword">var</span> strNew <span class="token operator">=</span> <span class="token string">"我是Coder Rat，我"</span> <span class="token operator">+</span> <span class="token number">18</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">"岁了"</span><span class="token punctuation">,</span><span class="token string">"你呢？"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"不告诉你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token boolean">false</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strNew<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"12"</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"1212"</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"1212" 这就是正常的数字相加，数字+数字+String</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//24 这就是正常的数字相加，数字+数字</span></code></pre><blockquote><p> 我是Coder Rat，我18岁了,你呢？Thu Dec 05 2018 21:16:36 GMT+0800 (中国标准时间)function () {<br>        alert(“不告诉你”);<br>    }false<br>null</p></blockquote><p>– 注意：拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串，函数的话也不会执行，直接返回函数体，方法调用会执行，将结果转为字符串以供拼接 –</p><h3 id="1-3-Boolean-布尔型"><a href="#1-3-Boolean-布尔型" class="headerlink" title="1.3 Boolean 布尔型"></a>1.3 Boolean 布尔型</h3><p>布尔型有两个值：<code>true</code> <code>false</code>，其中true表示真（对），false表示假（错）</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*Boolean类型的值，可以参与数学运算true === 1false === 0*/</span><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">var</span> flag1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> flag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> flag1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> flag <span class="token operator">+</span> flag1<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>2<br>1<br>1</p></blockquote><h3 id="1-4-Undefined-amp-Null"><a href="#1-4-Undefined-amp-Null" class="headerlink" title="1.4 Undefined &amp; Null"></a>1.4 Undefined &amp; Null</h3><p>一个声明变量，没赋值，则这个变量为undefined类型</p><p>一个声明的变量，赋值为null，则此类型变量为Null类型的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> variable <span class="token operator">=</span> undefined <span class="token operator">+</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为undefinedCoder Rat</span><span class="token keyword">var</span> variable1 <span class="token operator">=</span> undefined <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为NaN 因为undefined == NaN</span><span class="token keyword">var</span> variable2 <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">+</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为nullCoder Rat</span><span class="token keyword">var</span> variable3 <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为 1 null为空，相当于向内存中填充了1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>undefinedCoder Rat<br>NaN<br>nullCoder Rat<br>1</p></blockquote><h2 id="2-typeof-获取变量数据类型"><a href="#2-typeof-获取变量数据类型" class="headerlink" title="2. typeof 获取变量数据类型"></a>2. typeof 获取变量数据类型</h2><p>用法：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//返回值为变量的数据类型</span><span class="token keyword">typeof</span> 变量<span class="token punctuation">;</span></code></pre><h2 id="3-字面量"><a href="#3-字面量" class="headerlink" title="3. 字面量"></a>3. 字面量</h2><p>字面量是在代源码中，一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span><span class="token keyword">var</span> boo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">var</span> und <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token keyword">var</span> nul <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是匿名函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="4-数据类型转换"><a href="#4-数据类型转换" class="headerlink" title="4. 数据类型转换"></a>4. 数据类型转换</h2><p><strong>变量的数据类型为什么需要进行转换？</strong></p><p>使用表单、prompt获取过来的数据默认是字符串类型的，此时就不能直接简单地进行数学运算，而需要转换变量的数据类型，从而达到目的。</p><p>通俗来说：数据类型转换就是把一种数据类型的变量转换成另一种想要的数据类型。</p><p><strong>常用的转换</strong></p><ol><li>转换为字符串类型</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*--调用对象的内置方法--变量/(字面量).toString();*/</span><span class="token comment" spellcheck="true">/*-- 强制转换方法 --String(变量/字面量); 调用String构造器interface StringConstructor {    new(value?: any): String;    (value?: any): string;    readonly prototype: String;    fromCharCode(...codes: number[]): string;}*/</span><span class="token comment" spellcheck="true">/*字面量的话，使用.toString()最好是加上括号，比如数字.toString();不加括号就会报错*/</span><span class="token comment" spellcheck="true">/*-- 隐式转换 --  最常用的方法加号拼接字符串任何类型的数据与字符串以 + 号相连，则数据会被先强制转换为字符串，再和字符串相连*/</span></code></pre><ol start="2"><li>转换为数字型</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. parseInt();  将String类型转换为整数数值型2. parseFloat(); 将String类型转换为浮点数型3. Number(); 强制转换4. - * / 隐式转换 通过数学运算符，不包括 +*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"18.18"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"rem12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"18.18"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"rem12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"12px"</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"12"</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"126"</span> <span class="token operator">-</span> <span class="token string">"120"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>18<br />18<br />12<br />NaN<br />18.18<br />12<br />NaN<br />NaN<br />12<br />NaN<br />12<br />6</p></blockquote><pre class=" language-js"><code class="language-js">简单的加法器<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入第一个值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入第二个值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> b <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// var sum = Number(a) + Number(b);</span><span class="token comment" spellcheck="true">// var sum = parseFloat(a) + parseFloat(b);</span><span class="token function">alert</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>转换为布尔型</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*方法：Boolean()函数代表空、否定的值会被转为false如 ""、0、NaN、null、undefined其余的值都会被转换为true*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"Coder Rat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"NaN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span></code></pre><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="1-解释型语言和编译型语言"><a href="#1-解释型语言和编译型语言" class="headerlink" title="1. 解释型语言和编译型语言"></a>1. 解释型语言和编译型语言</h3><p>计算机不能直接理解任何除机器语言以外的其他语言，所以必须要把程序员所编写的程序语言翻译成机器语言才能执行程序。程序语言翻译成机器语言的工具，被称为翻译器。</p><p>编程语言 :point_right:翻译器:point_right:机器语言（二进制）</p><p>翻译器翻译的方式有两种：一个是<strong>编译</strong>，另外一个是<strong>解释</strong>。</p><p>两者的区别在于：<strong>翻译的时间点不同</strong></p><p>编译器：是在代码执行之前进行编译，生成中间代码文件</p><p>解释器：是在运行时进行及时解释，并立即执行（当编译器以解释方式运行的时候，也称之为解释器，如Java的 JIT 机制）</p><h3 id="JIT概念"><a href="#JIT概念" class="headerlink" title="JIT概念"></a>JIT概念</h3><p>JIT：Just In Time Compiler，一般翻译为即时编译器，这是是针对解释型语言而言的，而且并非虚拟机必须，是一种优化手段，Java的商用虚拟机HotSpot就有这种技术手段，Java虚拟机标准对JIT的存在没有作出任何规范，所以这是虚拟机实现的自定义优化技术。</p><p>  HotSpot虚拟机的执行引擎在执行Java代码是可以采用【解释执行】和【编译执行】两种方式的，如果采用的是编译执行方式，那么就会使用到JIT，而解释执行就不会使用到JIT，所以，早期说Java是解释型语言，是没有任何问题的，而在拥有JIT的Java虚拟机环境下，说Java是解释型语言严格意义上已经不正确了。</p><p>  HotSpot中的编译器是javac，他的工作是将源代码编译成字节码，这部分工作是完全独立的，完全不需要运行时参与，所以Java程序的编译是半独立的实现。有了字节码，就有解释器来进行解释执行，这是早期虚拟机的工作流程，后来，虚拟机会将执行频率高的方法或语句块通过JIT编译成本地机器码，提高了代码执行的效率，至此你已经了解了JIT在Java虚拟机中所处的地位和工作的主要内容。</p><p><strong>1.JIT的工作原理图</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2hpLmNzZG4ubmV0L2F0dGFjaG1lbnQvMjAxMTA5LzE2LzBfMTMxNjE1OTYwNGRTNjAuZ2lm" alt="img"></p><p>工作原理<br>当JIT编译启用时（默认是启用的），JVM读入.class文件解释后，将其发给JIT编译器。JIT编译器将字节码编译成本机机器代码。 </p><p>通常javac将程序源码编译，转换成java字节码，JVM通过解释字节码将其翻译成相应的机器指令，逐条读入，逐条解释翻译。非常显然，经过解释运行，其运行速度必定会比可运行的二进制字节码程序慢。为了提高运行速度，引入了JIT技术。 </p><p>在执行时JIT会把翻译过的机器码保存起来，已备下次使用，因此从理论上来说，採用该JIT技术能够，能够接近曾经纯编译技术。 </p><p><strong>2.相关知识</strong><br>JIT是just in time,即时编译技术。使用该技术，可以加速java程序的运行速度。 </p><p>JIT并不总是奏效，不能期望JIT一定可以加速你代码运行的速度，更糟糕的是她有可能减少代码的运行速度。这取决于你的代码结构，当然非常多情况下我们还是可以如愿以偿的。 </p><p>从上面我们知道了之所以要关闭JITjava.lang.Compiler.disable(); 是由于加快运行的速度。由于JIT对每条字节码都进行编译，造成了编译过程负担过重。为了避免这样的情况，当前的JIT仅仅对常常运行的字节码进行编译，如循环等。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
