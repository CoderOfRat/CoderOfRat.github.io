<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML5与CSS3权威指南</title>
      <link href="/2020/06/11/du-shu-bi-ji-html-yu-css3-quan-wei-zhi-nan-shang-xia/"/>
      <url>/2020/06/11/du-shu-bi-ji-html-yu-css3-quan-wei-zhi-nan-shang-xia/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/HTML5%E4%B8%8ECSS3.jpg" alt="HTML5与CSS3权威指南.jpg"></p><h1 id="前言-此版本为第三版"><a href="#前言-此版本为第三版" class="headerlink" title="前言 此版本为第三版"></a>前言 此版本为第三版</h1><p>技术范围：截止2015年5月前</p><p><strong>HTML5：</strong>基于2014年10月28日，W3C的HTML工作组正式发布的HTML5的正式推荐标准。</p><p>增加了支持web应用开发者的许多新特性，以及更符合开发者使用习惯的新元素，并重点关注定义<strong>清晰的、一致的准则</strong>，以确保web应用和内容在不同用户代理（浏览器）中的互操作性。</p><p>HTML5是构建<strong>开放web平台</strong>的核心。</p><p><strong>CSS3:</strong> 2015年4月9日，W3C的CSS工作组发布CSS基本用户接口模块（CSS Basic User Interface Module Level 3,CSS3 UI）的标准工作草案。该文档描述了CSS3中对HTML、XML（包括 XHTML）进行样式处理所需的与用户界面相关的CSS选择器（selectors）、属性及属性值。它包含并扩展了在CSS Level 2 及 Selector 规范中定义的与用户接口有关的特性。</p><p><strong>新体验：</strong>web的音频和视频不再需要插件，通过Canvas更灵活地完成图像绘制，而不必考虑屏幕的分辨率，浏览器对<strong>可扩展矢量图</strong>（SVG）和数学标记语言(MathML)的本地支持，通过引入新的注释信息以增强对东亚文字呈现（Ruby）的支持，对富web应用信息无障碍新特性的支持，等等。</p><h1 id="拓展-SGML-XML-HTML"><a href="#拓展-SGML-XML-HTML" class="headerlink" title="拓展 SGML XML HTML"></a>拓展 SGML XML HTML</h1><h2 id="HTML-5-已经不是-SGML-的子集，那么-SGML-、XML-、-HTML-之间有什么关联与区别呢"><a href="#HTML-5-已经不是-SGML-的子集，那么-SGML-、XML-、-HTML-之间有什么关联与区别呢" class="headerlink" title="HTML 5 已经不是 SGML 的子集，那么 SGML 、XML 、 HTML 之间有什么关联与区别呢?"></a>HTML 5 已经不是 SGML 的子集，那么 SGML 、XML 、 HTML 之间有什么关联与区别呢?</h2><p><strong>SGML</strong>是指“标准通用标记语言”(Standard Generalized Markup Language), 是1986年出版发布的一个信息管理方面的国际标准(ISO 8879)，它是国际上定义电子文件结构和内容描述的标准，是一种非常复杂的文档的结构，主要用于大量高度结构化数据的防卫区和其他各种工业领域，利于分类和索引。SGML规定了在文档中嵌入描述标记的标准格式，指定了描述文档结构的标准方法，目前在WEB上使用的HTML格式便是使用固定标签集的一种SGML文档。由于SGML可以支持无数的文档结构类型，并且可以创建与特定的软硬件无关的文档，因此很容易与使用不同计算机系统的用户交换文档。同XML相比，定义的功能很强大，缺点是它不适用于Web数据描述，而且SGML软件价格非常价格昂贵。 </p><p><strong>HTML</strong>即“HyperText Markup Language” （超文本标记语言）,它的优点是比较适合web 页面的开发。但它有一个缺点是标记相对较少，只有固定的标记集如<code>&lt;p&gt; &lt;strong&gt;</code> 等。缺少 SGML  的柔性和适应性。不能支持特定领域的标记语言，如对数学、化学、音乐等领域的表示支持较少。</p><p>所谓的XML（Extensible Markup Language）, 翻译成中文就是“可扩展标识语言“，在国内很多人理解<code>xml</code>为<code>html</code>的简单扩展，这实际上是一种误解。尽管 <code>xml</code> 同 <code>html</code> 关系非常密切。 它由万维网协会（W3C）创建，用来克服  HTML 的局限。和 HTML 一样，XML 也基于 SGML。XML 是为 Web 设计的。  <strong>XML 实际上是Web上表示结构化信息的一种标准文本格式</strong>，它没有复杂的语法和包罗万象的数据定义。</p><p><strong>SGML</strong> 是一种在Web发明之前就早已存在的用标记来描述文档资料的通用语言。但SGML<strong>十分庞大且难于学习和使用</strong>。鉴于此，人们提出了HTML语言。但近年来，随着Web应用的不断深入，HTML在需求广泛的应用中已显得捉襟见肘，有人建议直接使用 SGML 作为Web语言。但SGML太庞大了，学用两难尚且不说，就是全面实现SGML的浏览器也非常困难。于是Web标准化组织W3C建议使用一种精简的SGML版本——XML。XML与SGML一样，是一个用来定义其他语言的元语言。与SGML相比，XML规范不到SGML规范的1/10，简单易懂，是一门既无标签集也无语法的新一代标记语言。</p><h1 id="第一章-HTML-5-的优势"><a href="#第一章-HTML-5-的优势" class="headerlink" title="第一章 HTML 5 的优势"></a>第一章 HTML 5 的优势</h1><h2 id="HTML-5-为什么如此受欢迎？"><a href="#HTML-5-为什么如此受欢迎？" class="headerlink" title="HTML 5 为什么如此受欢迎？"></a>HTML 5 为什么如此受欢迎？</h2><ol><li><p>时代的要求</p><p>现在时代迫切要求有一个统一的互联网通用标准，以往由于各浏览器之间的不统一，所以<strong>解决浏览器之间的兼容性问题</strong>成为了开发者最为头疼的问题。</p><p>而HTML 5 的目标就是将Web带入一个成熟的应用平台，在HTML 5 平台上，视频、音频、图像、动画，以及同电脑的交互都被标准化。</p></li><li><p>Internet Explorer 8 以上的版本对HTML 5 的支持，随着其他浏览器针对此次 HTML 5 的更新的改变，抢占了许多市场份额，所以IE 8 以上版本，都对HTML 5 做了相应的支持，所以 HTML 5 在市场上大面积推广的势头是非常猛的。</p></li></ol><h2 id="为何可以放心使用-HTML-5-技术"><a href="#为何可以放心使用-HTML-5-技术" class="headerlink" title="为何可以放心使用 HTML 5 技术"></a>为何可以放心使用 HTML 5 技术</h2><ol><li><p>兼容性：HTML 4 在<strong>新版本的浏览器上</strong>也可以正常运行。（本书写的是HTML 5 在<strong>老版本的浏览器上</strong>也可以正常运行。觉得稍有问题，还是需要针对兼容性，做些调整的）</p></li><li><p>实用性：HTML 5 内部并没有封装什么很复杂的、不切实际的功能，而只是封装了简单实用的功能。</p></li><li><p>并非革命性的发展：HTML 5 的内部功能不是革命性的，只是发展性的。</p><p>以上三点就是所谓的“HTML 设计原则”，HTML 5 也是以该设计原则为基本原则而开发出来的，各主流浏览器使用 HTML 5 的前提也就是要求 HTML 5 能够符合这些原则，今后也将以此为前提来支持 HTML 5.</p></li></ol><h2 id="HTML-5-版本之前的Web技术存在的问题"><a href="#HTML-5-版本之前的Web技术存在的问题" class="headerlink" title="HTML 5 版本之前的Web技术存在的问题"></a>HTML 5 版本之前的Web技术存在的问题</h2><ol><li><p>Web 浏览器之间的兼容性很低（即规范不统一）</p></li><li><p>文档结构不够明确（即语义化不明确）</p></li><li><p>Web 应用程序的功能受到了限制（Web应用程序的功能实现无保障）</p><p>HTML 5 针对以上问题，统一了一个通用标准，追加了许多结构相关的语义化元素，并结合了包括<strong>微格式、无障碍应用</strong>在内的各种各样的周边技术。同时 HTML 5 开始提供各种各样Web应用上的新API，各浏览器也在快速地封装着这些API，HTML 5 已经使富Web应用地实现变成了可能。</p></li></ol><h1 id="第二章-HTML-5-与-HTML-4-的区别"><a href="#第二章-HTML-5-与-HTML-4-的区别" class="headerlink" title="第二章 HTML 5 与 HTML 4 的区别"></a>第二章 HTML 5 与 HTML 4 的区别</h1><h2 id="从-HTML-5-开始，对于文件的字符编码，推荐使用UTF-8。"><a href="#从-HTML-5-开始，对于文件的字符编码，推荐使用UTF-8。" class="headerlink" title="从 HTML 5 开始，对于文件的字符编码，推荐使用UTF-8。"></a>从 HTML 5 开始，对于文件的字符编码，推荐使用UTF-8。</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/*HTML 4 中指定文档的字符编码*/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/*HTML 5 中指定文档的字符编码*//*以上两种方法都可以使用，但是不可以同时混合使用，如像下面使用是错误的*/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript面向对象</title>
      <link href="/2020/06/11/js-mian-xiang-dui-xiang/"/>
      <url>/2020/06/11/js-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript-面向对象-精选"><a href="#JavaScript-面向对象-精选" class="headerlink" title="JavaScript 面向对象 精选"></a>JavaScript 面向对象 精选</h3><p>模拟京东倒计时</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">countTime</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> nowTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> inputTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> countSum <span class="token operator">=</span> <span class="token punctuation">(</span>inputTime <span class="token operator">-</span> nowTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出秒数</span>    <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countSum <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出剩余天数</span>    d <span class="token operator">=</span> d <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> d <span class="token punctuation">:</span> d<span class="token punctuation">;</span>    <span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countSum <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出剩余小时数</span>    h <span class="token operator">=</span> h <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> h <span class="token punctuation">:</span> h<span class="token punctuation">;</span>    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countSum <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出剩余分钟数</span>    m <span class="token operator">=</span> m <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> m <span class="token punctuation">:</span> m<span class="token punctuation">;</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countSum <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出剩余秒数</span>    s <span class="token operator">=</span> s <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> s <span class="token punctuation">:</span> s<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"剩余时间为："</span> <span class="token operator">+</span> d <span class="token operator">+</span> <span class="token string">"天 "</span> <span class="token operator">+</span> h <span class="token operator">+</span> <span class="token string">"小时 "</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">"分钟 "</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"现在时间为："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token function">countTime</span><span class="token punctuation">(</span><span class="token string">"2019-11-29 19:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>添加 删除数组元素的方法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1.尾部追加数组元素  push2.头部追加数组元素  unshift*/</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vaar arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span><span class="token string">"是个帅哥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>数组排序 翻转数组&amp;升序、降序</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//reverse() 翻转数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"pink"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sort() 升降序</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//升序</span>    <span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//降序</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//面试的话使用冒泡排序</span></code></pre><p>数组索引读取  <strong>有面试点</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*数组去重面试重点目标：把旧数组里面不重复的元素取出来放到新数组中，重复的元素只保留一个，放到新数组中去重；核心算法：我们遍历旧数组元素，在新数组查看是否存在此元素，存在舍弃，不存在就在新数组追加此元素*/</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span><span class="token string">"Coder"</span><span class="token punctuation">,</span><span class="token string">"Rat"</span><span class="token punctuation">,</span><span class="token string">"coder"</span><span class="token punctuation">,</span><span class="token string">"rat"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arrNew <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arrNew<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arrNew<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arrNew<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>基本包装类型 和 复杂数据类型的区别</p><p>基本包装类型 也属于对象，只不过，后来销毁了他的对象内存指向，（即有生命周期）</p><p>调用方法的时候 相当于对象 不调用方法和属性，仅是简单的赋值操作，则不会执行包装成对象再销毁的过程。</p><p>var  str = “angy”; //简单过程</p><p>var l = str.length;=&gt;</p><p>字符串的不可变性：</p><p>当重新赋值字符串，会开辟新的内存空间 原来的地址保留</p><p>因为<strong>数组</strong>的重新赋值 会把之前的干掉 不会重新开辟内存地址</p><pre class=" language-javascript"><code class="language-javascript"></code></pre><p>自调用函数</p><pre class=" language-js"><code class="language-js"></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"aoccdrrojkokdopp"</span><span class="token punctuation">;</span><span class="token keyword">var</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    num<span class="token operator">++</span><span class="token punctuation">;</span>    index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//将get-element-by-id 字符串 转化为驼峰命名法</span>    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">"get-element-by-id"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> after <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            after <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> c <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            after <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>未完成</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/11/hello-world/"/>
      <url>/2020/06/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端工程化</title>
      <link href="/2020/04/19/qian-duan-gong-cheng-hua/"/>
      <url>/2020/04/19/qian-duan-gong-cheng-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>是一个流行的前端项目构建工具（打包工具），可以解决当前web开发过程中所面临的困境。</p><p>webpack提供了有好的<strong>模块化支持</strong>，以及<strong>代码的压缩混淆、处理js兼容问题、性能优化</strong>等强大的功能，从而让程序员把工作的重心放到具体的功能实现上，提高了开发的效率和项目的可维护性。</p><pre><code>npm i webpack webpack-cli -D 开发依赖在项目目录中，创建名为 webpack.config.js 的webpack 配置文件在webpack的配置文件中，初始化如下基本设置：module.exports = {    mode: &#39;development&#39;     // 指定构建模式 production 上线阶段}在package.json配置文件中，新增 dev 脚本如下：&quot;scripts&quot;: {    &quot;dev&quot;:&quot;webpack&quot;      // npm run dev可以启动webpack进行项目的打包}</code></pre><p>生成的资源被默认放在 dist 目录下，入口文件为 index.js 默认输出为 main.js</p><h4 id="配置-webpack-打包的入口与出口"><a href="#配置-webpack-打包的入口与出口" class="headerlink" title="配置 webpack 打包的入口与出口"></a>配置 webpack 打包的入口与出口</h4><p>可以在 webpack.config.js 中新增如下配置信息：</p><pre><code>const path = require(&#39;path&#39;)module.exports = {    mode: &#39;development&#39;,     // 指定构建模式 production 上线阶段    entry: path.join(__dirName,&#39;./src/index.js&#39;),    output: {        path: path.join(__dirName,&#39;./dist&#39;),        // 输出文件的存放路径        filename: &#39;bundle.js&#39; // 输出文件的名称    }}</code></pre><h4 id="配置-webpack-的自动打包功能"><a href="#配置-webpack-的自动打包功能" class="headerlink" title="配置 webpack 的自动打包功能"></a>配置 webpack 的自动打包功能</h4><p>npm i webpack-dev-server -D 安装支持项目自动打包的工具<br>修改 package.json中的 dev 命令</p><pre><code>&quot;scripts&quot;: {    &quot;dev&quot;: &quot;webpack-dev-server&quot;}</code></pre><p>将 src -&gt; index.html 中 script 脚本的引用路径修改为 “bundle.js”</p><p>运行 npm run dev 命令，进行打包，即能实现自动打包效果</p><p><strong>1. webpack-dev-server 会启动一个实时打包的 http 服务器</strong></p><p><strong>2.webpack-dev-server打包生成的输出文件，默认放到了项目根目录中，而且是虚拟的、看不见的</strong></p><p>注意：访问 localhost:8080相当于访问了此服务器根的目录</p><h4 id="配置-html-webpack-plugin-生成预览页面"><a href="#配置-html-webpack-plugin-生成预览页面" class="headerlink" title="配置 html-webpack-plugin 生成预览页面"></a>配置 html-webpack-plugin 生成预览页面</h4><p>npm i html-webpack-plugin -D  属于开发依赖，是生成预览页面的插件</p><p>修改 webpack.config.js 文件头部区域，添加如下配置信息：</p><pre><code>// 导入生成预览页面的插件，得到一个构造函数const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;)const htmlPlugin = new HtmlWebpackPlugin({ // 创建插件实例    template: &#39;./src/index.html&#39;, // 指定要用到的模板文件    filename: &#39;index.html&#39; // 指定生成（拷贝）的文件名称，该文件存在于内存中，在目录中不显示})module.exports = {    plugins: [ htmlPlugin ] // plugins 数组是 webpack 打包期间会用到的一些插件列表}</code></pre><h4 id="设置自动打包相关的参数-实现自动打开浏览器"><a href="#设置自动打包相关的参数-实现自动打开浏览器" class="headerlink" title="设置自动打包相关的参数 实现自动打开浏览器"></a>设置自动打包相关的参数 实现自动打开浏览器</h4><p>package.json中配置</p><p>–open 打包完成后自动打开浏览器页面</p><p>–host 配置 IP 地址</p><p>–port 配置端口号</p><pre><code>&quot;webpack-dev-server --open --host 127.0.0.1 --port 3001&quot;</code></pre><h4 id="通过-loader-生态打包非-js-模块"><a href="#通过-loader-生态打包非-js-模块" class="headerlink" title="通过 loader 生态打包非 js 模块"></a>通过 loader 生态打包非 js 模块</h4><p>在实际开发过程中，webpack  默认只能打包以 .js 后缀名结尾的模块，其他非 .js 后缀名结尾的模块，webpack 默认处理不了，需要调用 loader 加载器才可以正常打包，否则会报错。</p><p>loader 加载器可以协助 webpack 打包处理特定的文件模块，比如：</p><p>less-loader 可以打包处理 .less相关的文件</p><p>sass-loader 可以打包处理 .scss相关的文件</p><p>url-loader 可以打包处理 css 中与 url 路径相关的文件</p><p>babel-loader 高级JS语法处理为普通js</p><h4 id="webpack-中加载器的基本使用"><a href="#webpack-中加载器的基本使用" class="headerlink" title="webpack 中加载器的基本使用"></a>webpack 中加载器的基本使用</h4><h5 id="打包处理css-less-scss-css的兼容性-文件"><a href="#打包处理css-less-scss-css的兼容性-文件" class="headerlink" title="打包处理css\less\scss\css的兼容性 文件"></a>打包处理css\less\scss\css的兼容性 文件</h5><p>运行 npm i style-loader css-loader -D  安装处理css文件的loader</p><p>在 webpack.config.js的 module -&gt; rules 数组中，添加 loader 规则如下：</p><pre><code>// 所有第三方文件模块的匹配规则module： {    rules： [        {test: /\.css$/, use: [&#39;style-loader&#39;,&#39;css-loader&#39;]}，        {test: /\.less$/,use: [&#39;style-loader&#39;,&#39;css-loader&#39;,&#39;less-loader&#39;]},        {test: /\.scss$/, use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;sass-loader&#39;]}    ]}</code></pre><p> test表示匹配的文件类型，use 表示对应要调用的 loader</p><p>use数组中指定的 loader 顺序是固定的，多个loader的调用顺序是从后往前调用  类似gulp的task()也是一步步进行的</p><p>配置postCSS自动添加css的兼容前缀</p><p>运行npm i postcss-loader autoprefixer -D</p><p>在项目的根目录中创建 postcss 的配置文件 postcss.config.js,并初始化如下配置：</p><pre><code>// 导入自动添加前缀的插件const autoprefixer = require(&#39;autoprefixer&#39;)module.exports = {    plugins: [ autoprefixer ] // 挂载插件}</code></pre><p>在 webpack.config.js 的 module -&gt; rules 数组中，修改 css 的loader规则为：</p><pre><code>module： {    rules： [        {test: /\.css$/, use: [&#39;style-loader&#39;,&#39;css-loader&#39;, &#39;postcss-loader&#39;]}     ]</code></pre><h4 id="打包样式表中的图片（路径）和字体文件"><a href="#打包样式表中的图片（路径）和字体文件" class="headerlink" title="打包样式表中的图片（路径）和字体文件"></a>打包样式表中的图片（路径）和字体文件</h4><p>npm i url-loader file-loader -D 其中file-loader是url-loader的内置依赖项，只需下载无需配置</p><p>在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下：</p><pre><code>module: {    rules: [        {            test: /\.jpg|png|gif|bmp|webp|ttf|eot|svg|woff|woff2$/,            use: &#39;url-loader?limit=16940&#39;        }    ]}</code></pre><p>其中 ？ 之后的是loader 的参数项，limit 用来指定图片的大小，单位是字节（byte）,只有小于 limit 大小的图片才会被转为 base64 图片</p><h4 id="打包处理js文件中的高级语法"><a href="#打包处理js文件中的高级语法" class="headerlink" title="打包处理js文件中的高级语法"></a>打包处理js文件中的高级语法</h4><p>安装babel转换器相关的包：</p><p>npm i babel-loader @babel/core @babel/runtime -D</p><p>安装babel语法插件相关的包：</p><p>npm i  @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-proposal-class-properties -D</p><p>在项目中，创建 babel 配置文件 babel.config.js 并初始化基本配置如下：</p><pre><code>module.exports = {    presets: [ &#39;@babel/preset-env&#39; ],    plugins: [&#39;@babel/plugin-transform-runtime&#39;, &#39;@babel/plugin-proposal-class-properties&#39;]}</code></pre><p>在webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下： </p><pre><code>// exclude 为排除项，表示 babel-loader 不需要处理 node_modules中的 js 文件{test: /\.js$/,use: &#39;babel-loader&#39;,exclude: /node_modules/}</code></pre><h3 id="Vue-单文件组件"><a href="#Vue-单文件组件" class="headerlink" title="Vue 单文件组件"></a>Vue 单文件组件</h3><h5 id="webpack中配置vue组件的加载器"><a href="#webpack中配置vue组件的加载器" class="headerlink" title="webpack中配置vue组件的加载器"></a>webpack中配置vue组件的加载器</h5><p>运行 npm i vue-loader vue-template-compiler -D</p><p>在 webpack.config.js 配置文件中添加 vue-loader 的配置项如下：</p><pre><code>const vueLoaderPlugin = require(&#39;vue-loader/lib/plugin&#39;)module.exports = {    module: {        rules: [            {test: /\.vue$/, use: &#39;vue-loader&#39;}        ]    },    plugins: [        ...其他插件,        new vueLoaderPlugin()    ]}</code></pre><h5 id="在webpack项目中使用vue"><a href="#在webpack项目中使用vue" class="headerlink" title="在webpack项目中使用vue"></a>在webpack项目中使用vue</h5><p>运行 npm i vue -S 安装vue</p><p>在src -&gt; index.js 入口文件中，通过 import Vue from ‘vue’ 来导入vue构造函数</p><p>创建 vue 实例对象，并指定要控制的 el 区域</p><p>通过 render 函数渲染 App根组件(阉割版的vue使用render函数渲染)</p><pre><code>import App from &#39;components/App.vue&#39;const vm = new Vue({    el: &#39;#app&#39;,    render: h =&gt; h(App)})</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React库</title>
      <link href="/2020/04/05/react-ku/"/>
      <url>/2020/04/05/react-ku/</url>
      
        <content type="html"><![CDATA[<h3 id="JSX-Javascript-XML"><a href="#JSX-Javascript-XML" class="headerlink" title="JSX(Javascript XML)"></a>JSX(Javascript XML)</h3><ol><li>JSX是React的核心内容</li><li>JSX表示在JS代码中写HTML结构，是React声明式的体现。</li><li>使用JSX配合嵌入的JS表达式、条件渲染、列表渲染，可以描述任意UI结构。</li><li>推荐使用className的方式给JSX添加样式。</li><li>React完全利用JS语言自身的能力来编写UI，而不是造轮子增强HTML的功能。</li></ol><h3 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h3><ol><li>函数型组件</li><li>使用类创建组件</li></ol><p>组件是React的一等公民，使用React就是在用组件</p><p>组件表示页面中的部分功能</p><p>组合多个组件实现完整的页面功能</p><p>特点：可复用、独立、可组合</p><p>优势： 方便维护、易于扩展、减少DOM操作</p><h4 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h4><ul><li>使用JS的函数（或箭头函数）创建的组件</li><li>约定1： 函数的命名必须以大写开头(以此区分普通React元素和组件)</li><li>约定2： 函数必须有返回值 或 返回值为null</li></ul><p>渲染组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">...</span><span class="token punctuation">}</span><span class="token keyword">const</span> Hello <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">...</span>    <span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Hello <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="类组件：使用ES6的class创建的组件"><a href="#类组件：使用ES6的class创建的组件" class="headerlink" title="类组件：使用ES6的class创建的组件"></a>类组件：使用ES6的class创建的组件</h4><ul><li>约定1：类名称必须以大写字母开头</li><li>约定2： 必须继承自React.Componet父类，从而可以使用父类中提供的属性和方法。</li><li>约定3： 类组件需提供render()方法</li><li>约定4： render方法必须要有返回值</li><li>构造函数里面。必须使用super() 来继承父类的属性和方法，为了解决报警，初始化了状态 state</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 构造函数里面通常创建组的私有状态 -> 数据 （vue的data里面声明的数据）</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>p<span class="token operator">></span>类组件<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="有状态组件和无状态组件"><a href="#有状态组件和无状态组件" class="headerlink" title="有状态组件和无状态组件"></a>有状态组件和无状态组件</h4><ul><li>函数组件又叫做无状态组件，类组件又叫做有状态组件</li><li>状态（state）即数据</li><li>函数组件没有自己的状态，只负责数据展示（静}</li><li>类组件有自己的的状态，负责更新UI，让页面“动”起来</li></ul><p>比如计数器案例中国，点击按钮让数值加1。0和1就是不同的状态</p><p>组件中的state和setState</p><p>状态（state）即数据，式组件内部的私有数据，只能在组件内使用</p><p>state的值是对象，表示一个组件可以有多个状态</p><h4 id="事件绑定的-this-指向"><a href="#事件绑定的-this-指向" class="headerlink" title="事件绑定的 this 指向"></a>事件绑定的 this 指向</h4><p>render内部指向component</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>开发常见问题汇总</title>
      <link href="/2020/03/27/kai-fa-chang-jian-wen-ti-hui-zong/"/>
      <url>/2020/03/27/kai-fa-chang-jian-wen-ti-hui-zong/</url>
      
        <content type="html"><![CDATA[<p>模块化、组件化、ES6代码简化（ES6数组处理、对象处理、promise、箭头函数、class、import、export default、复杂数据类型解构及初始化默认值），setTimeout(()=&gt;{},0)用法的优点、||短路运算符的使用来简化代码、mixins、接口文档规范及接口数据处理、iphone不支持webp图片格式<code>.replace(/.webp\g/,/.jpg/)</code>,数据绑定原理，插槽原理，计算属性的应用，小程序解决滚动，vue的修饰符，ajax原生，jsonp解决跨域问题，三步一封装！抽离优化，自定义组件</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手写ES6 Promise源码</title>
      <link href="/2020/03/18/shou-xie-es6-promise-yuan-ma/"/>
      <url>/2020/03/18/shou-xie-es6-promise-yuan-ma/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发</title>
      <link href="/2020/03/17/wei-xin-xiao-cheng-xu-kai-fa/"/>
      <url>/2020/03/17/wei-xin-xiao-cheng-xu-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="微信小程序开发"><a href="#微信小程序开发" class="headerlink" title="微信小程序开发"></a>微信小程序开发</h2><p>小程序特点：体积小、方便获取与传播</p><p>2017-1月发布</p><p>小程序有自己的独立入口，可定制化更强，可以模拟APP功能</p><p>适合做用完即走的应用：</p><p>如：外卖、代驾、小游戏、报名入口</p><p>不适合做重度依赖的应用</p><p>如：大型游戏、视频播放、音乐播放器</p><h3 id="小程序组件"><a href="#小程序组件" class="headerlink" title="小程序组件"></a>小程序组件</h3><p>组件式视图层的基本组成单元，它自带一些功能与微信风格一致的样式。</p><p>一个组件通常包括开始标签和结束标签，属性用来修饰这个组件，内容在两个标签之内。</p><p>组件名称都为小写</p><p><img src="/images/image-20200317151719075.png" alt="image-20200317151719075"></p><h3 id="小程序API"><a href="#小程序API" class="headerlink" title="小程序API"></a>小程序API</h3><h4 id="1-事件监听类-API"><a href="#1-事件监听类-API" class="headerlink" title="1.事件监听类 API"></a>1.事件监听类 API</h4><p>这类API 以 on 开头，用来监听某个事件时候触发</p><p>举例：wx.onNetworkStatusChange(function callback)</p><h4 id="2-同步API"><a href="#2-同步API" class="headerlink" title="2.同步API"></a>2.同步API</h4><p>Sync结尾</p><h4 id="3-异步API"><a href="#3-异步API" class="headerlink" title="3.异步API"></a>3.异步API</h4><p>wx 类似于 window对象</p><p><img src="/images/image-20200317152555704.png" alt="image-20200317152555704"></p><h3 id="小程序项目的结构"><a href="#小程序项目的结构" class="headerlink" title="小程序项目的结构"></a>小程序项目的结构</h3><p><img src="/images/image-20200317161715299.png" alt="image-20200317161715299"></p><p>对于小程序来说</p><p>app.js 和 app.json 文件是必须的</p><p>对于小程序页面来说</p><p>.wxss 和 .js 文件是必须的</p><h3 id="设置小程序项目的默认首页"><a href="#设置小程序项目的默认首页" class="headerlink" title="设置小程序项目的默认首页"></a>设置小程序项目的默认首页</h3><p>app.json全局配置文件中，pages数组的第一项路径，即为项目的默认首页</p><h3 id="UI组件化的好处"><a href="#UI组件化的好处" class="headerlink" title="UI组件化的好处"></a>UI组件化的好处</h3><p>便于维护，易于扩展，减少DOM操作</p><p>声明变量： var let const 禁止使用var 能用const的不用let</p><p>页面更新前 （dom-diffrent - 判断，对比前后，发生变化的跟随变化渲染，只更新发生变化的）  页面更新后  (局部更新，减少DOM操作)</p><h4 id="小程序常见的UI组件"><a href="#小程序常见的UI组件" class="headerlink" title="小程序常见的UI组件"></a>小程序常见的UI组件</h4><p>text 文本组件</p><p>image图片组件</p><h4 id="wxss"><a href="#wxss" class="headerlink" title=".wxss"></a>.wxss</h4><p>自定义属性 data-开头</p><p><img src="/images/YRVHX4%5BE_J9LA$873QCZ%60H.jpg" alt="img"></p><p>对比原生的属性选择器</p><p><img src="/images/image-20200318113703728.png" alt="image-20200318113703728"></p><p>设计稿 基准 375px iphone6</p><p>设计师的视觉稿一般为2倍图，也就是 iphone6作为视觉稿的标准，就可以直接以设计稿的宽高值加上rpx进行设计</p><p>图片格式一般为png webp</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 官方文档初理解</title>
      <link href="/2020/03/16/vue-guan-fang-wen-dang-chu-li-jie/"/>
      <url>/2020/03/16/vue-guan-fang-wen-dang-chu-li-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>由于近期工作和个人开发的过程中，越来越多的使用到Vue，但是在使用过程中，仍有些许考虑不周的问题，所以决定重新梳理一遍。</p><ul><li>版本 2.x  截止当前 最新稳定版本 2.6.11</li><li><a href="https://github.com/vuejs/vue/releases" target="_blank" rel="noopener">GitHub</a></li><li>一切基于个人理解进行记录，多谢指正</li></ul><h3 id="1-Vue-Devtools-调试插件"><a href="#1-Vue-Devtools-调试插件" class="headerlink" title="1. Vue Devtools 调试插件"></a>1. Vue Devtools 调试插件</h3><p><a href="https://www.jianshu.com/p/63f09651724c" target="_blank" rel="noopener">chrome VueDT 参考简书作者</a></p><h3 id="2-引入-Vue"><a href="#2-引入-Vue" class="headerlink" title="2.引入 Vue"></a>2.引入 Vue</h3><p>直接下载并用 <code>&lt;script&gt;</code>标签引入，<code>Vue</code> 会被注册为一个全局变量。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Vue构造函数</span>    console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Vue实例</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="/images/image-20200316184916082.png" alt="image-20200316184916082"></p><p><img src="/images/image-20200316185233736.png" alt="image-20200316185233736"></p><p>由以上两张图可以看出，当通过script标签引入vue.js之后，相当于在window对象上挂载了Vue</p><p><img src="/images/image-20200316194855204.png" alt="image-20200316194855204"></p><blockquote><p>在开发环境下不要使用压缩版本的vue.js，不然你就失去了所有常见错误相关的警告!上线前可以替换为</p></blockquote><p><img src="/images/image-20200317193947896.png" alt="image-20200317193947896"></p><p><a href="https://cn.vuejs.org/js/vue.js" target="_blank" rel="noopener">vue.js</a></p><p><a href="https://cn.vuejs.org/js/vue.min.js" target="_blank" rel="noopener">vue.min.js</a></p><h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><p>制作原型或者学习，可以这样使用到最新版本：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>对于生产环境，推荐链接到一个明确的版本号和构建文件，以避免新版本造成的不可预期的破坏：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.6.11<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>如果使用原生 ES Modules，这里也有一个兼容 ES Module 的构建文件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'https://cdn.jsdelivr.net/npm/vue@2.6.11/dist/vue.esm.browser.js'</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>可以在 <a href="https://cdn.jsdelivr.net/npm/vue/" target="_blank" rel="noopener">cdn.jsdelivr.net/npm/vue</a> 浏览 NPM 包的源代码。</p><p>Vue 也可以在 <a href="https://unpkg.com/vue@2.6.11/dist/vue.js" target="_blank" rel="noopener">unpkg</a> 和 <a href="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.11/vue.js" target="_blank" rel="noopener">cdnjs</a> 上获取</p><p>请确认了解<strong>不同构建版本</strong>并在你发布的站点中使用<strong>生产环境版本</strong>，把 <code>vue.js</code> 换成 <code>vue.min.js</code>。这是一个更小的构建，可以带来比开发环境下更快的速度体验。</p><p><strong>不同构建版本：</strong>在 <a href="https://cdn.jsdelivr.net/npm/vue/dist/" target="_blank" rel="noopener">NPM 包的 <code>dist/</code> 目录</a>中有很多不同的 Vue.js 构建版本。如下图：</p><p><img src="/images/image-20200317195808118.png" alt="image-20200317195808118"></p><p>vue.js 完整版</p><p>vue.runtime.js 只包含运行时版</p><p>vue.min.js  完整版（生产环境）</p><p>vue.runtime.min.js  只包含运行时版（生产环境）</p><h4 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h4><p>在用 Vue 构建大型应用时推荐使用 NPM 安装。NPM 能很好地和诸如 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 或 <a href="http://browserify.org/" target="_blank" rel="noopener">Browserify</a> 模块打包器配合使用。同时 Vue 也提供配套工具来开发<a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">单文件组件</a>。</p><pre class=" language-shell"><code class="language-shell"># 最新稳定版 $ npm install vue -S</code></pre><h4 id="命令行工具（CLI）"><a href="#命令行工具（CLI）" class="headerlink" title="命令行工具（CLI）"></a>命令行工具（CLI）</h4><p>Vue 提供了一个官方的 CLI，为单页面应用（SPA:Single Page Application）快速搭建繁杂的脚手架。它为现代前端工作流提供了 batteries-included (“开箱即用”)的构建设置。只需要几分钟的时间就可以运行起来并带有热重载、保存时 lint 校验，以及生产环境可用的构建版本。</p><p>Vue官方文档提供了相关术语的解释</p><ul><li>完整版：同时包含编译器和运行时的版本</li><li>编译器：用来将模板字符串编译成 JavaScript 渲染函数的代码。</li><li>运行时：用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。</li><li><strong><a href="https://www.jianshu.com/p/6e61bf5c4d23" target="_blank" rel="noopener">UMD</a></strong>：UMD 版本可以通过<code>&lt;script&gt;</code>标签直接用在浏览器中。jsDelivr CDN 的 <a href="https://cdn.jsdelivr.net/npm/vue" target="_blank" rel="noopener">https://cdn.jsdelivr.net/npm/vue</a> 默认文件就是运行时 + 编译器的 UMD 版本 (<code>vue.js</code>)。</li></ul><h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>以上代码，看起来这跟渲染一个字符串模板非常类似，如art-template，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是<strong>响应式的</strong>。（数据劫持set/发布订阅get）</p><p>除了文本插值 <code></code>，我们还可以像这样来绑定元素 attribute：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    鼠标悬停几秒钟查看此处动态绑定的提示信息！  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'页面加载于 '</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="/images/image-20200318193652028.png" alt="image-20200318193652028"></p><p> <code>v-bind</code> attribute 被称为<strong>指令</strong>。指令带有前缀 <code>v-</code>，以表示它们是 Vue 提供的特殊 attribute。它们会在渲染的 DOM 上应用特殊的响应式行为。在这里，该指令的意思是：“将这个元素节点的 <code>title</code> attribute 和 Vue 实例的 <code>message</code> 属性保持一致”。</p><p>如果打开浏览器的 JavaScript 控制台，输入 <code>app.message = &#39;new bind message&#39;</code>，就会再一次看到这个绑定了 <code>title</code> attribute 的 HTML 已经进行了更新。</p><p><code>v-if</code>控制切换一个元素是否显示也相当简单：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ifSeen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>现在你看到我了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        ifSeen<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//为false p内部的内容将不会展示</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><code>v-for</code> 指令可以绑定数组的数据来渲染一个项目列表：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo in todos<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      {{ todo.text }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app-'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    todos<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'学习 JavaScript'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'学习 Vue'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'整个牛项目'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="/images/image-20200319085031781.png" alt="image-20200319085031781"></p><p>为了让用户和应用进行交互，Vue 提供了 <code>v-on</code> 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reverseMessage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>反转消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">'Hello Vue.js!'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    reverseMessage<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在 <code>reverseMessage</code> 方法中，Vue 更新了应用的状态，但没有触碰 DOM——所有的 DOM 操作都由 Vue 内部来处理，我们编写的代码只需要关注逻辑层面即可。</p><p>Vue 还提供了 <code>v-model</code> 指令，它能轻松实现表单输入和应用状态之间的双向绑定。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> app6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>vue-router -&gt; hash history   location.hash location.history</p><p>beforeCreated:做混合的时候 Vue.mixin()</p><p>created: 用于发Ajax请求，不建议操作DOM元素</p><p>vue的生命周期</p><p>beforeCreate:</p><p>created:</p><p><img src="/images/image-20200318164358450.png" alt="image-20200318164358450"></p><p><img src="/images/image-20200318165409525.png" alt="image-20200318165409525"></p><p>3-3-3-1-1-1</p><p>每个走三个，最后每个的mounted(先子后父)</p><p>beforeCreate：当前这个实例能看到他的父亲是谁、儿子谁、拥有一套发布订阅 $on $emit $off $nextTick等<br>经常做 混合操作 希望在每个组件中增加一些特定的属性，可以采用这个钩子, 基本上业务逻辑是不需要他的</p><p>created：当前这个组件实例已经实现了数据劫持；把方法、计算属性也都挂载到了实例, 缺点是：不能获取到真实的dom元素</p><p>beforeMount：在挂载之前会调用render方法 一般不会增加业务逻辑</p><p>mounted：这个过程中 会渲染子组件 可以把ajax 的操作直接放到mounted中，有真实的dom元素</p><p>beforeUpdate：数据是应用到视图上 可以在这里，增加一些数据更新，不会导致视图多次更新</p><p>updated：不能再去更新数据 可能会发生死循环</p><p>beforeDestroy：两个触发时机：1、手动销毁该组件 （$destroy） 2、路由切换的时候</p><p>destroyed：销毁后 当前实例会移除所有watches — 当前组件的watches的激活状态为false</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE全家桶</title>
      <link href="/2020/02/12/vue-quan-jia-tong/"/>
      <url>/2020/02/12/vue-quan-jia-tong/</url>
      
        <content type="html"><![CDATA[<p>作者： 尤雨溪</p><h2 id="Vue-渐进式JavaScript框架"><a href="#Vue-渐进式JavaScript框架" class="headerlink" title="Vue: 渐进式JavaScript框架"></a>Vue: 渐进式JavaScript框架</h2><p>目前框架和库的界限并不明显</p><blockquote><p>声明式渲染→组件系统→客户端路由→集中式状态管理→项目构建</p><p>可以使用VUE全家桶中的一个或多个功能</p><p>学习VUE对微信小程序的开发有一定的帮助</p></blockquote><h3 id="VUE-基础使用"><a href="#VUE-基础使用" class="headerlink" title="VUE 基础使用"></a>VUE 基础使用</h3><pre class=" language-html"><code class="language-html">1.创建模板 插值表达式 放在模板的内部2.导入vue.js库文件3.通过vue渲染模板- 创建vue实例let vm = new Vue({    el: '#app', // 设置vue实例控制的模板    data: { // data属性：保存vue实例的数据        msg: 'vue 渲染数据'，     }})</code></pre><p>Vue.js模板语法  类似于art-template</p><h5 id="什么是前端渲染："><a href="#什么是前端渲染：" class="headerlink" title="什么是前端渲染："></a>什么是前端渲染：</h5><p>把数据填充到模板再渲染到HTML的过程</p><h5 id="前端渲染的方式"><a href="#前端渲染的方式" class="headerlink" title="前端渲染的方式"></a>前端渲染的方式</h5><ol><li><p>原生js拼接字符串</p><p>基本上就是将字符串和html标签进行拼接，然后再通过DOM操作渲染到页面中</p><p>缺点：没有统一的规则</p></li><li><p>art-template</p></li><li><p>Vue模板语法</p><p>模板语法概览：</p><ul><li>插值表达式</li><li>指令</li><li>事件绑定</li><li>属性绑定</li></ul></li></ol><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>什么是指令？</p><ol><li>什么是自定义属性 data_id=””</li><li>指令的本质就是自定义属性</li><li>指令的格式：以<code>v-</code>开头</li></ol><p>vue的编译过程：先显示插值表达式，再渲染</p><p><code>v-cloak</code>指令的用法</p><pre class=" language-html"><code class="language-html">1. 提供样式 通过属性选择器选择附带v-cloak属性的标签，在渲染之前，不显示此标签，渲染完成之后再显示  以解决页面渲染的闪动问题 因为解析完成或去除v-cloak属性[v-cloak]{    display: none;}2. 添加v-cloak属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-cloak</span><span class="token punctuation">></span></span>    {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><code>v-text</code> 填充纯文本  不会出现闪动问题</p><blockquote><p>类似 </p><p>1.原生js的 dom.innerText = `${data.msg}` </p></blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 插值表达式的方式 如果需要解决闪动问题 就需要 v-cloak 指令 配合属性选择器设置隐藏元素的样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>msg<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><code>v-html</code>填充HTML片段  存在安全问题  [XSS 攻击]</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 原则：本网站的内容可以使用，第三方等跨域访问的数据不可使用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><code>v-pre</code>不渲染当前元素 直接原文输出</p><p>注意 setInterval会影响v-pre的渲染，只有首次正确</p><p><code>v-onece</code> 让vue框架只渲染一次，不在监听数据更新</p><p><code>v-model</code>   双向数据绑定 （只能绑定到表单元素上）  – 渲染到页面的过程本质上是单向数据更新 –</p><ul><li><p><strong>限制</strong></p><ul><li><code>&lt;input&gt;</code></li><li><code>&lt;select&gt;</code></li><li><code>&lt;textarea&gt;</code></li><li><code>components</code></li></ul></li><li><p><strong>修饰符</strong>：</p><ul><li><a href="https://cn.vuejs.org/v2/guide/forms.html#lazy" target="_blank" rel="noopener"><code>.lazy</code></a> - 取代 <code>input</code> 监听 <code>change</code> 事件</li><li><a href="https://cn.vuejs.org/v2/guide/forms.html#number" target="_blank" rel="noopener"><code>.number</code></a> - 输入字符串转为有效的数字</li><li><a href="https://cn.vuejs.org/v2/guide/forms.html#trim" target="_blank" rel="noopener"><code>.trim</code></a> - 输入首尾空格过滤</li></ul></li><li><p><strong>用法</strong>：</p><p>在表单控件或者组件上创建双向绑定。</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 用户更改页面中的表单元素的值，也会更改绑定数据源的值 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        {{msg}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'Vue data'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>双向数据绑定的设计思想</p><h3 id="MVVM设计思想（分而治之）"><a href="#MVVM设计思想（分而治之）" class="headerlink" title="MVVM设计思想（分而治之）"></a>MVVM设计思想（分而治之）</h3><p>① M(Model)</p><p>② V(View)</p><p>③ VM(View-Model)</p><p>Model： 数据源 data:{ msg: “vue data”}</p><p>View：页面视图  页面内容，无论是页面自有的还是渲染的</p><p>View-Model：同步M与V的模块 <code>DOM Listenner</code>  <code>Data Bindings</code></p><h4 id="设置v-model指令"><a href="#设置v-model指令" class="headerlink" title="设置v-model指令"></a><code>设置v-model</code>指令</h4><p>会给对应的页面元素或者组件绑定监听事件（双向） 如input事件</p><h4 id="v-on-事件绑定"><a href="#v-on-事件绑定" class="headerlink" title="v-on @ 事件绑定"></a><code>v-on</code> <code>@</code> 事件绑定</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 用法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        {{num}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num++<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>加1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num++<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>加1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>加1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>加1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subtraction<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>减1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subtraction($event)<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>减1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 事件函数用法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">"vue data"</span><span class="token punctuation">,</span>            num<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            add<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            subtraction<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">--</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><p>.stop 阻止事件冒泡</p><p>.prevent 阻止默认行为</p><h4 id="按键事件修饰符"><a href="#按键事件修饰符" class="headerlink" title="按键事件修饰符"></a>按键事件修饰符</h4><pre><code>@keyup.enterv-on:keyup.delete// 自定义按键修饰符Vue.config.keyCodes.diykey = 68;@keyup.diykey = &quot;函数名称/函数调用&quot;</code></pre><h4 id="v-model实现双向数据绑定的底层原理"><a href="#v-model实现双向数据绑定的底层原理" class="headerlink" title="v-model实现双向数据绑定的底层原理"></a><code>v-model</code>实现双向数据绑定的底层原理</h4><p>将页面中的</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>handle<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>msg<span class="token punctuation">=</span>$event.target.value<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>msg<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'绑定的数据'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">handle</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="Object-propertyDefined"><a href="#Object-propertyDefined" class="headerlink" title="Object.propertyDefined"></a>Object.propertyDefined</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"lee"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * Object.defineProperty：设置对象属性的         * 参数1：设置的对象         * 参数2：设置的对象属性名         * 参数3：设置对象属性的配置         * 注意：（value\writable）和（get()/set()）         * 这两对属性是互斥的，只能使用其中的一对        */</span>       Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//    value:18, // 设置属性值</span>        <span class="token comment" spellcheck="true">//    writable: false, // 是否允许重置属性值 </span>        <span class="token comment" spellcheck="true">//    configurable: false, // 是否允许属性被删除</span>        <span class="token comment" spellcheck="true">//    enumerable: false, // 设置对象属性是否能被遍历</span>        <span class="token keyword">get</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"触发了get方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 通过形参可以获取已经存在的值</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"触发了set方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过形参可以获取设置（赋）的值</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>       obj<span class="token punctuation">.</span>age  <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    delete obj.age;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="通过v-bind操作元素的类名"><a href="#通过v-bind操作元素的类名" class="headerlink" title="通过v-bind操作元素的类名"></a>通过<code>v-bind</code>操作元素的类名</h4><pre class=" language-html"><code class="language-html">1.对象绑定类名2.数组绑定类名样式绑定相关语法细节：1.对象绑定和数组绑定可以结合使用2.class绑定的值可以简化操作3.默认已有的类名如何处理</code></pre><h4 id="控制元素的显示与隐藏v-show-v-if"><a href="#控制元素的显示与隐藏v-show-v-if" class="headerlink" title="控制元素的显示与隐藏v-show v-if"></a>控制元素的显示与隐藏<code>v-show</code> <code>v-if</code></h4><pre><code>v-show: 通过操作元素的样式，控制元素的显示与隐藏注意：如果频繁的控制元素的显示与隐藏，请使用v-showv-if: 通过恢复或者删除元素的方式，控制元素的显示或者隐藏注意：在不频繁显示或者隐藏元素的前提下，如果在页面加载时不希望显示该元素，请使用v-if</code></pre><h4 id="key的作用"><a href="#key的作用" class="headerlink" title=":key的作用"></a><code>:key</code>的作用</h4><p>是vue中的一个标记，让vue区分不同的元素，这样vue解析的时候就不会复用元素。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isFlag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lable</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nickName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nickName<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>nickNameKey<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lable</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>ageKey<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>所以在遍历（v-for）的时候最好加上:key=”item.id”</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 点击按钮，将文本框的内容添加到数组中，并将数组内容展示到页面 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- key：区分不同元素 :key="item.index" 也会出现复用的现象 导致unshift添加数组元素的时候，已勾选的元素出错 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,i) in arr<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      id:{{item.id}} -- name:{{item.name}} -- 索引:{{i}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        arr<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'a'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'b'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'c'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'d'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'e'</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          obj<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将元素添加到数组的最前面</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p><strong>自定义全局指令</strong></p><p><strong>指令的作用：</strong>相当于操作页面元素的vue默认指令</p><p><strong>钩子函数：</strong>在某个时机执行的函数</p><p>bind执行时机：当指定绑定的元素时，但是元素还没有渲染到页面，所以在该函数内只能用来操作元素的样式，才能生效，js效果不能生效。</p><p>inserted执行时机：添加指令的元素追加到父元素，但是父元素未必追加到页面，所以inserted中的js效果未必生效。(仅保证父节点存在，但不一定已被插入到父节点中)</p><p>以上两种钩子函数，尽量不要操作js效果，可以相当于自定义样式</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 全局定义</span>    Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    bind<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>binding<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// el.style.color = binding.value;</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>background<span class="token punctuation">;</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- &lt;input type="text" v-color="'red'"/> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{color: white,background: red}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>el 参数：所绑定的元素，相当于dom对象，可以直接进行dom操作</p><p><strong>Vue实例对象就是一个组件</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 该组件应用于 #app 的模板内 局部生效</span><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>            color<span class="token punctuation">:</span> <span class="token string">'red'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    directives<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 局部定义 只针对"#app"的vue模板生效</span>        focus<span class="token punctuation">:</span> <span class="token punctuation">{</span>            inserted<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">{</span>                el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>binding<span class="token punctuation">)</span><span class="token punctuation">{</span>                el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>全局指令 作用域所有Vue模板</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>binding<span class="token punctuation">)</span><span class="token punctuation">{</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="如何原生js实现-v-model-指令"><a href="#如何原生js实现-v-model-指令" class="headerlink" title="如何原生js实现 v-model 指令"></a>如何原生js实现 <code>v-model</code> 指令</h4><p>原理：数据劫持 + 发布订阅者 的模式</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    更新数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 通过js实现数据的双向绑定 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> ipt <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    ipt<span class="token punctuation">.</span>oninput <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        data<span class="token punctuation">.</span>name <span class="token operator">=</span> ipt<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 数据订阅</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> ipt<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 数据劫持</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> value<span class="token punctuation">;</span>        ipt<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="计算属性-directives"><a href="#计算属性-directives" class="headerlink" title="计算属性 directives"></a>计算属性 <code>directives</code></h4><p>当一个数据的结果需要依赖多个其他数据时，例如：商品总价格需要依赖商品单价 商品数量 两个可变数据</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            price<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            total<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>                color<span class="token punctuation">:</span> <span class="token string">'red'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>            focus<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 实现js效果 可以使用inserted</span>                inserted<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">{</span>                    el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            color<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 控制样式可以用bind</span>                <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>binding<span class="token punctuation">)</span><span class="token punctuation">{</span>                    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        computed<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 计算属性</span>            sum<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>total<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="计算属性与方法的区别"><a href="#计算属性与方法的区别" class="headerlink" title="计算属性与方法的区别"></a>计算属性与方法的区别</h5><blockquote><p>计算属性，存在缓存机制（基于依赖进行缓存，因为计算逻辑是不变的，如果依赖的数据改变，缓存的结果才会改变），因此在处理复杂耗时的计算逻辑，又有可能多次复用的时候，使用计算属性要更加节省性能。</p></blockquote><pre class=" language-js"><code class="language-js">属性：<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> 计算结果<span class="token punctuation">;</span><span class="token punctuation">}</span>变成了： 属性 ： 计算结果</code></pre><p>所以，在依赖数据未更新之前，多次调用，只会执行一次计算属性对应的计算逻辑。</p><p>方法：不存在缓存机制，每次调用，都会重新执行，无论依赖的数据是否更新。</p><h3 id="侦听器-–-监听器-watch"><a href="#侦听器-–-监听器-watch" class="headerlink" title="侦听器 – 监听器  watch"></a>侦听器 – 监听器  watch</h3><p><strong>数据侦听  同步处理</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>price<span class="token punctuation">"</span></span> <span class="token attr-name">v-focus</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-color</span><span class="token punctuation">></span></span>总价格：{{sum}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                price<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                total<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                firstName<span class="token punctuation">:</span> <span class="token string">"Joins"</span><span class="token punctuation">,</span>                lastName<span class="token punctuation">:</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span>                fullName<span class="token punctuation">:</span> <span class="token string">"Jack Joins"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            directives<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 自定义指令</span>                focus<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                color<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            computed<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 计算属性 可以监听多个值变化</span>                sum<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>total<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            watch<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 侦听器 一次只能侦听一个属性</span>                firstName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> val<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                lastName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> val <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>表单校验案例</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nickName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{tips}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                nickName<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                tips<span class="token punctuation">:</span> <span class="token string">""</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>                nickName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>tips <span class="token operator">=</span> <span class="token string">"正在校验..."</span><span class="token punctuation">;</span>                    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>tips <span class="token operator">=</span> <span class="token string">"此用户可用"</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>tips <span class="token operator">=</span> <span class="token string">"用户被占用，请更换用户名"</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><h4 id="1-过滤器的作用是什么？"><a href="#1-过滤器的作用是什么？" class="headerlink" title="1.过滤器的作用是什么？"></a>1.过滤器的作用是什么？</h4><p>格式化数据  在数据渲染的时候 给用户更好的体验度</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{msg | upper}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{msg | upper | lower}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:abc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg | upper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'upper'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 首字母大写</span>            <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'lower'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 首字母小写</span>            <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="2-自定义过滤器"><a href="#2-自定义过滤器" class="headerlink" title="2.自定义过滤器"></a>2.自定义过滤器</h4><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'过滤器名称'</span>，<span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>arg<span class="token punctuation">,</span>arg1<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    过滤逻辑<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'upper'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> val<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="案例-动态处理响应式数据"><a href="#案例-动态处理响应式数据" class="headerlink" title="(案例)动态处理响应式数据"></a>(案例)动态处理响应式数据</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.grid</span> </span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">530</span>px<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid</span> table </span><span class="token punctuation">{</span>            <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#C2D89A</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid</span> th,        td </span><span class="token punctuation">{</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px dashed <span class="token hexcode">#F3DCAB</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">35</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid</span> th </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F3DCAB</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid</span> <span class="token class">.book</span> </span><span class="token punctuation">{</span>            <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F3DCAB</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid</span> <span class="token class">.total</span> </span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F3DCAB</span><span class="token punctuation">;</span>            <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#C2D89A</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>图书管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            编号：                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book.id<span class="token punctuation">"</span></span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            名称：                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handle<span class="token punctuation">"</span></span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isDisabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>total<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>图书总数：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{books.length}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, index) in books<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{item.id}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{item.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{item.date | format('yyyy-MM-dd hh:mm:ss')}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toEdit(item.id)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteBook(item.id)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/time.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 添加日期时间格式化 过滤器</span>        Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'format'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">,</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// console.log(val, arg);</span>            <span class="token keyword">return</span> <span class="token function">dateFormat</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                flag<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                isDisabled<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                book<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    id<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                    date<span class="token punctuation">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                books<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">'三国演义'</span><span class="token punctuation">,</span>                    date<span class="token punctuation">:</span> <span class="token number">2525609975000</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">'水浒传'</span><span class="token punctuation">,</span>                    date<span class="token punctuation">:</span> <span class="token number">2525609975000</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">'红楼梦'</span><span class="token punctuation">,</span>                    date<span class="token punctuation">:</span> <span class="token number">2525609975000</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">'西游记'</span><span class="token punctuation">,</span>                    date<span class="token punctuation">:</span> <span class="token number">2525609975000</span>                <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                handle<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">let</span> editItem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>book<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                val<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>book<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>book <span class="token operator">=</span> <span class="token punctuation">{</span>                        id<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                        name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                        date<span class="token punctuation">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>book <span class="token operator">=</span> <span class="token punctuation">{</span>                            id<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                            name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                            date<span class="token punctuation">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                toEdit<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> editBook <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> items<span class="token punctuation">.</span>id <span class="token operator">==</span> id<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>editBook<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>book<span class="token punctuation">.</span>id <span class="token operator">=</span> editBook<span class="token punctuation">.</span>id<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>book<span class="token punctuation">.</span>name <span class="token operator">=</span> editBook<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                deleteBook<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">let</span> leaveBooks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> items<span class="token punctuation">.</span>id <span class="token operator">!=</span> id<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> leaveBooks<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'book.name'</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// console.log(val)</span>                    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> item<span class="token punctuation">.</span>name <span class="token operator">==</span> val<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// console.log(flag)</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>isDisabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// console.log(this.isDisabled)</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>isDisabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// console.log(this.isDisabled)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// time.js</span><span class="token comment" spellcheck="true">/**  * 对日期进行格式化，  * @param date 要格式化的日期  * @param format 进行格式化的模式字符串 *     支持的模式字母有：  *     y:年,  *     M:年中的月份(1-12),  *     d:月份中的天(1-31),  *     h:小时(0-23),  *     m:分(0-59),  *     s:秒(0-59),  *     S:毫秒(0-999), *     q:季度(1-4) * @return String * @author yanis.wang * @see http://yaniswang.com/frontend/2013/02/16/dateformat-performance/ */</span><span class="token keyword">function</span> <span class="token function">dateFormat</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> format<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> date <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> mts <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/(\/Date\((\d+)\)\/)/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mts <span class="token operator">&amp;&amp;</span> mts<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            date <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>mts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>date <span class="token operator">||</span> date<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"Invalid Date"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"M"</span><span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//月份 </span>        <span class="token string">"d"</span><span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//日 </span>        <span class="token string">"h"</span><span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//小时 </span>        <span class="token string">"m"</span><span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//分 </span>        <span class="token string">"s"</span><span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//秒 </span>        <span class="token string">"q"</span><span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//季度 </span>        <span class="token string">"S"</span><span class="token punctuation">:</span> date<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//毫秒 </span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    format <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/([yMdhmsqS])+/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>all<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> v <span class="token operator">=</span> map<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>all<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                v <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token operator">+</span> v<span class="token punctuation">;</span>                v <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> v<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">===</span> <span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> all<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> all<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> format<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Vue实例的生命周期"><a href="#Vue实例的生命周期" class="headerlink" title="Vue实例的生命周期"></a>Vue实例的生命周期</h3><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="img"></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改msg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>销毁Vue实例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// el: '#app',</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">:</span> <span class="token string">"生命周期函数"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                handle<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"数据修改"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 在初始化vue实例 上的属性和方法之前</span>            <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeCreate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handle<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 在created中初始化的页面，如果数据复杂，可能</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'created'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handle<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 内存中的模板渲染到页面之前</span>            <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeMount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 内存中的模板渲染到页面之后</span>            <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mounted"</span><span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 当修改数据时 Vue将内存中的模板重新渲染之前</span>            <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeUpdate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 当修改数据时 Vue将内存中的模板重新渲染之后</span>            <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'updated'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeDestroy'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'destroy Vue实例已销毁'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class=" language-面试"><code class="language-面试">面试：关于Vue生命周期 可能会问到1.会问，vue的生命周期有几个一共11个，实际开发用的比较多的有八个 高频使用的有created mounted2.分别是什么3.有什么作用4.你用过哪几个？怎么用的？5.created和mounted有什么区别created：初始化/注入 组件实例创建完毕 此时可以对data等属性进行操作6.为什么在created和mounted中发送请求比较合适？created 因为请求过来的数据可以在此时赋值给data上的 并且在页面渲染之前，赋值，可以在渲染之前把数据加载完毕7.能否在created中获取还没渲染的元素的高度 offsetHeight根据生命周期函数的执行时机，一般不推荐，但是可以通过this.$nextTick()回调8.1.钩子函数：在某个特定时机执8.2.回调函数：是把一个函数当成参数，传递到另外一个函数执行</code></pre><p><img src="/images/image-20200314103225070.png" alt="image-20200314103225070"></p><p><img src="/images/image-20200314103307286.png" alt="image-20200314103307286"></p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"obj"</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向调用者 obj.f();</span>            <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Window.fn1()  this指向Window</span>            <span class="token keyword">let</span> fn2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 箭头函数的this 与声明的作用域有关</span>            <span class="token punctuation">}</span>            <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span>fn3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 此时this指向Window</span>        <span class="token punctuation">}</span>        obj<span class="token punctuation">.</span><span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="指定条件遍历数组的方法整理"><a href="#指定条件遍历数组的方法整理" class="headerlink" title="指定条件遍历数组的方法整理"></a>指定条件遍历数组的方法整理</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// forEach: 遍历每个数组元素，没有返回值</span>        <span class="token comment" spellcheck="true">// filter: 将满足过滤条件的元素，保存到新数组中 返回值为此新数组</span>        <span class="token comment" spellcheck="true">//some：查看数组中是否有符合条件的元素，回调函数中return true时，终止循环，返回一个bool值 有true 无 false 可用于判断用户名是否存在，数据是否重复</span>        <span class="token comment" spellcheck="true">//find：查找第一个符合条件的数组元素，回调函数中return true时，终止循环，返回值为数组元素 -- 查找符合条件的数组元素</span>        <span class="token comment" spellcheck="true">//findIndex：查找符合条件的数组元素索引，回调函数中return true时，终止循环，返回值为索引 -- 查找数组元素的索引</span>        <span class="token comment" spellcheck="true">// forEach</span>        <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a0"</span><span class="token punctuation">,</span> <span class="token string">"b1"</span><span class="token punctuation">,</span> <span class="token string">"c2"</span><span class="token punctuation">,</span> <span class="token string">"d3"</span><span class="token punctuation">,</span> <span class="token string">"e4"</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>        <span class="token keyword">let</span> salary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// filter</span>        <span class="token keyword">let</span> res2 <span class="token operator">=</span> salary<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [200, 150, 230, 350]</span>        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录循环次数</span>        <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// some</span>        <span class="token keyword">let</span> res3 <span class="token operator">=</span> salary<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> item <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true  有符合条件的元素存在 第1个</span>        <span class="token keyword">let</span> res4 <span class="token operator">=</span> salary<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> item <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对应的满足条件的元素值</span>        <span class="token keyword">let</span> res5 <span class="token operator">=</span> salary<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> item <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0  对应的索引</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h3><h4 id="组件化的开发思想"><a href="#组件化的开发思想" class="headerlink" title="组件化的开发思想"></a>组件化的开发思想</h4><ol><li>统一的标准</li><li>分而治之  不同组件分别实现不同功能</li><li>重用（复用）</li><li>组合  组件之间通过组合 可以形成相对成熟的项目</li></ol><p><img src="/images/image-20200216093836217.png" alt="image-20200216093836217"></p><p>组件化规范：Web Components</p><ul><li>我们希望尽可能多的重用代码</li><li>自定义组件的方式不太容易（html\css\js）</li><li>多次使用组件可能导致冲突</li></ul><p><img src="/images/image-20200216094134190.png" alt="image-20200216094134190"></p><p>官网：</p><p>组件：是一个vue实例容器，包含了重用的html\css\js</p><h4 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>components</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>components</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'components'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    count<span class="token punctuation">:</span> <span class="token number">0</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                    &lt;div>                        &lt;button @click="handle">{{count}}&lt;/button>                    &lt;/div>`</span></span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="组件命名方法"><a href="#组件命名方法" class="headerlink" title="组件命名方法"></a>组件命名方法</h4><ol><li>组件的命名方式 短横线方式 大驼峰方式</li><li>短横线的方式可以应用于根组件和其他组件的模板中</li><li>大驼峰命名法 应用在根组件模板中 会被当成element解析成 全小写的，</li><li>因为html的解析标签不区分大小写，但是js是区分大小写的，所以找不到对应的定义</li><li>但是可以应用在其他组件的模板中</li></ol><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-add</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-add</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">/**            组件的命名方式 短横线方式 大驼峰方式            短横线的方式可以应用于根组件和其他组件的模板中            大驼峰命名法 应用在根组件模板中 会被当成element解析成 全小写的，            因为html的解析标签不区分大小写，但是js是区分大小写的，所以找不到对应的定义            但是可以应用在其他组件的模板中        */</span>        <span class="token comment" spellcheck="true">// 全局组件</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'component-add'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    count<span class="token punctuation">:</span> <span class="token number">0</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 组件模板中只能包含一个根元素</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                &lt;div>                    &lt;button @click="handle">{{count}}&lt;/button>                    &lt;ComponentAdd>&lt;/ComponentAdd>                &lt;/div>`</span></span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'ComponentAdd'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// data 为function 返回值为一个对象 此对象为data的值</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    count<span class="token punctuation">:</span> <span class="token number">0</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 组件模板中只能包含一个根元素</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>            &lt;button @click="handle">{{count}}&lt;/button>        &lt;/div>`</span></span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 所有的子组件都包含在根组件内 Vue实例对象即为根组件 data可以为对象</span>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="Vue调试工具的用法"><a href="#Vue调试工具的用法" class="headerlink" title="Vue调试工具的用法"></a>Vue调试工具的用法</h4><p>chrome插件 方便查看组件之间的关系 及其数据展示</p><h4 id="组件间的数据交互-（重点）"><a href="#组件间的数据交互-（重点）" class="headerlink" title="组件间的数据交互 （重点）"></a>组件间的数据交互 （重点）</h4><h5 id="在父组件模板中-向子组件传值"><a href="#在父组件模板中-向子组件传值" class="headerlink" title="在父组件模板中 向子组件传值"></a>在父组件模板中 向子组件传值</h5><pre><code>在父组件模板中 为子组件添加属性（:属性名=&quot;数据&quot;） 绑定传送的数据在子组件中 通过 props属性接收。可以设置为数组或者对象，推荐使用对象的方式，因为可以过滤数据的类型。</code></pre><h5 id="子组件控制父组件行为及传递参数"><a href="#子组件控制父组件行为及传递参数" class="headerlink" title="子组件控制父组件行为及传递参数"></a>子组件控制父组件行为及传递参数</h5><pre><code>子组件触发：因为是dom,bom元素才能触发事件 而子组件上的元素又在  template 上，template上的元素 又可以通过v-on 的方式绑定了事件触发函数   事件触发函数可以调用当前子组件的data  同时可以通过this.$emit(&#39;父组件的Vue模板中子组件的实现元素上的v-on的事件名&#39;,需要传递的参数) 触发父组件的相应的绑定事件，并且可以传递参数，同步参数到父组件的事件触发函数中，从而在父组件中的handle(val){}中处理子组件传递过来的参数，同步更新或修改到父组件的data中。</code></pre><h5 id="兄弟组件之间的传值"><a href="#兄弟组件之间的传值" class="headerlink" title="兄弟组件之间的传值"></a>兄弟组件之间的传值</h5><pre><code>创建数据中心： var eventHub = new Vue();数据中心负责监听、销毁、触发创建两个全局组件，设置为兄弟关系全局挂载：main.js上 原型挂载 Vue.prototype.bus = new Vue()为这两个兄弟组件的template上的元素绑定触发事件在绑定的事件函数中 调用数据处理中心的触发函数  enventHub.$emit(&#39;需要触发的已被数据处理中心监听的事件名称&#39;,传递的参数)同时在生命周期钩子函数mounted()中，指定当前组件需要被数据中心监听的事件名称和处理函数mounted(){    enventHub.$on(&#39;事件名称&#39;,(接收传递过来的数据的形参)=&gt;{        处理（如通过传递过来的数据修改当前组件的data）    })}通过enventHub.$on()监听的组件事件，就可以在当前组件或者其他兄弟组件中通过 enventHub.$emit(&quot;需调用的数据处理名&quot;，参数)进行调用，从而操作组件自身 或者兄弟组件enventHub.off(&quot;绑定的数据处理事件1&quot;,&quot;绑定的数据处理事件2&quot;...);可以销毁相应的时间处理事件</code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- :content 动态绑定父组件中的值 title 静态绑定父组件中的值             title是处于父组件的template中，所以也属于父组件中的值 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-add</span> <span class="token attr-name">:my-content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg+<span class="token punctuation">'</span>父组件绑定的值<span class="token punctuation">'</span><span class="token punctuation">"</span></span>  <span class="token attr-name">my-title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>父组件绑定的值<span class="token punctuation">"</span></span> <span class="token attr-name">:arr-data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arrData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-add</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">fontSize</span><span class="token punctuation">:</span>fontSize + <span class="token string">'px'</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>效果展示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hello-a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hello-a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-b</span> <span class="token attr-name">@fa-click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleFa($event)<span class="token punctuation">"</span></span> <span class="token attr-name">:arr-data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arrData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-b</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 创建数据事件中心</span>        <span class="token keyword">var</span> eventHub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**            组件的命名方式 短横线方式 大驼峰方式            短横线的方式可以应用于根组件和其他组件的模板中            大驼峰命名法 应用在根组件模板中 会被当成element解析成 全小写的，            因为html的解析标签不区分大小写，但是js是区分大小写的，所以找不到对应的定义            但是可以应用在其他组件的模板中        */</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'component-add'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 组件中传递数据的值的命名规范 遵循驼峰命名规范 字符串模板中引用也是如此，</span>            <span class="token comment" spellcheck="true">// Vue实例模板中用"-"连接 改为全小写</span>            <span class="token comment" spellcheck="true">// props 单项数据流传递</span>            <span class="token comment" spellcheck="true">// props: ['myTitle','myContent'],</span>            props<span class="token punctuation">:</span> <span class="token punctuation">{</span>                myTitle<span class="token punctuation">:</span> String<span class="token punctuation">,</span>                myContent<span class="token punctuation">:</span> String<span class="token punctuation">,</span>                arrData<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                    addNum<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 组件模板中只能包含一个根元素</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                &lt;div>                    &lt;button @click="handle">兄-兄A{{count}}{{myTitle}}{{myContent}}&lt;/button>                    &lt;ul>                        &lt;li :key="index" v-for="(item,index) in arrData">{{item}}&lt;/li>                        &lt;/ul>                    &lt;ComponentAdd>&lt;/ComponentAdd>                &lt;/div>`</span></span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>                    eventHub<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'event-b'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>addNum<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                eventHub<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'event-a'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token operator">=</span>val<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 此组件作为component-add组件的子组件</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'ComponentAdd'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    count<span class="token punctuation">:</span> <span class="token number">0</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 组件模板中只能包含一个根元素</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                &lt;div>                    &lt;button @click="handle">{{count}}&lt;/button>                &lt;/div>`</span></span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ComponentB <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                    addFontSize<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                    addNum<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            props<span class="token punctuation">:</span> <span class="token punctuation">{</span>                arrData<span class="token punctuation">:</span> Array            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 组件模板中只能包含一个根元素</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                &lt;div>                    &lt;button @click="handle">兄-兄B{{count}}{{arrData}}&lt;/button>                    &lt;ComponentAdd>&lt;/ComponentAdd>                &lt;/div>`</span></span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// this.count++;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>arrData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"fa-click"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>addFontSize<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>addFontSize<span class="token punctuation">,</span>arrDataChange<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>arrData<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    eventHub<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'event-a'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>addNum<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            mounted<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                eventHub<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'event-b'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token operator">=</span>val<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 所有的子组件都包含在根组件内 Vue实例对象即为根组件 data可以为对象</span>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">:</span> <span class="token string">"Vue Data"</span><span class="token punctuation">,</span>                arrData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                objData<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span> <span class="token string">'coder rat'</span><span class="token punctuation">,</span>                    age<span class="token punctuation">:</span> <span class="token number">25</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                fontSize<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">handleFa</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>fontSize <span class="token operator">+</span><span class="token operator">=</span> value<span class="token punctuation">.</span>addFontSize<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>arrData <span class="token operator">=</span> value<span class="token punctuation">.</span>arrDataChange<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 局部组件 只能在#app的页面模板中使用</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'hello-a'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token punctuation">{</span>                            count<span class="token punctuation">:</span> <span class="token number">0</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// 组件模板中只能包含一个根元素</span>                    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`                                &lt;div>                                    &lt;button @click="handle">{{count}}&lt;/button>                                    &lt;ComponentAdd>&lt;/ComponentAdd>                                &lt;/div>`</span></span><span class="token punctuation">,</span>                    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token string">'component-b'</span><span class="token punctuation">:</span> ComponentB            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><hr><h5 id="其他传值方式（获取相应组件，以赋值的形式进行同步）"><a href="#其他传值方式（获取相应组件，以赋值的形式进行同步）" class="headerlink" title="其他传值方式（获取相应组件，以赋值的形式进行同步）"></a>其他传值方式（获取相应组件，以赋值的形式进行同步）</h5><pre><code>this.$children.属性this.$parent.属性</code></pre><p><strong>父向子传值的其它方式</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 父向子传值的其它方式 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handle1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>父向子传值 -- 方式1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handle2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>父向子传值 -- 方式2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- ref 是vue中的标记属性，方便父组件快速获取元素或组件的 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com-son1</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comson1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com-son1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>para<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'com-son1'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>      &lt;h3>com-son1组件&lt;/h3>      &lt;p>展示父组件数据：{{son}}&lt;/p>    &lt;/div>`</span></span><span class="token punctuation">,</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          son<span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        fa<span class="token punctuation">:</span> <span class="token string">'我是霸霸'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//通过获取子组件，给子组件赋值的方式，将父组件的值设置到子组件中</span>        <span class="token function">handle1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// this.$children 保存所有的子组件</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>son <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fa<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//第一种父向子传值</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">handle2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>comson1<span class="token punctuation">.</span>son <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fa<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//第二种父向子传值</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>子向父传值的其它方式</strong></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>展示来自子组件的内容:{{fa}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com-son1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com-son1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'com-son1'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          son<span class="token punctuation">:</span><span class="token string">'儿砸'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>        &lt;h3>com-son1组件&lt;/h3>        &lt;button @click="handle">子向父&lt;/button>      &lt;/div>`</span></span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>fa <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>son<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        fa<span class="token punctuation">:</span><span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre><code>理解什么是父组件 什么是子组件组件间的传值父 → 子 传值子 → 父 传值兄弟 → 兄弟 传值插槽</code></pre><h3 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h3><p>在调用组件的时候，将组件中包裹的内容展示到页面中</p><p>作用：同一个组件可以展示不同的内容</p><h4 id="1-组件插槽的基本用法（默认插槽）"><a href="#1-组件插槽的基本用法（默认插槽）" class="headerlink" title="1.组件插槽的基本用法（默认插槽）"></a>1.组件插槽的基本用法（默认插槽）</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 子组件传递的插槽内容,包裹在组件调用中间 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-a</span><span class="token punctuation">></span></span>插槽内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-a</span><span class="token punctuation">></span></span>插槽内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>        Vue.component('component-a',{            template: `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>子组件1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 插槽内有默认内容时，组件调用中没有内容时显示 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>默认内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>`,        })        var vm = new Vue({            el: '#app',            data:{            }        })    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="2-具名插槽：通过name属性，区分不同的插槽"><a href="#2-具名插槽：通过name属性，区分不同的插槽" class="headerlink" title="2.具名插槽：通过name属性，区分不同的插槽"></a>2.具名插槽：通过name属性，区分不同的插槽</h4><ul><li><p>基本用法</p><p>在组件中通过slot属性控制对应插槽的内容，</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 子组件传递的插槽内容,包裹在组件调用中间 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>header插槽内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>header插槽内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>header插槽内容3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>默认插槽1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>默认插槽2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>默认插槽3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>footer插槽内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>footer插槽内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>footer插槽内容3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'component-a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>            &lt;p>子组件1&lt;/p>            &lt;slot name="header">&lt;/slot>            &lt;slot>&lt;/slot>            &lt;slot name="footer">&lt;/slot>        &lt;/div>`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="/images/image-20200218135549705.png" alt="image-20200218135549705"></p></li><li><p>通过template插入内容：template标签只作为容器使用，不会渲染到页面</p></li><li><p>插槽内容的显示顺序：由插槽的顺序决定，与填充内容的顺序无关</p></li></ul><p>如何在填充的数据中获取组件中的数据</p><p>作用域插槽</p><p>应用场景：父组件可以对子组件的内容进行加工处理</p><p>在父组件中可以得到子组件中的通过v-bind绑定的数据</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component-a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scopes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scopes.item <span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>item-header<span class="token punctuation">'</span>||scopes.item <span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>默认item<span class="token punctuation">'</span>||scopes.item <span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>item-footer<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>I am {{scopes.item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>I am not {{scopes.item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component-a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'component-a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>                    &lt;p>子组件模板内容&lt;/p>                    &lt;slot name="header" :item="'item-header'">&lt;/slot>                    &lt;slot :item="'默认item'">&lt;/slot>                    &lt;slot name="footer" :item="'item-footer'">&lt;/slot>                &lt;/div>`</span></span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>，从而通过对绑定数据进行一系列的处理，实现展示逻辑，又利用</p><pre class=" language-html"><code class="language-html"></code></pre><p>Restful形式的URL</p><ul><li>HTTP请求方式<ul><li>GET  查询</li><li>POST  添加</li><li>PUT  更新 修改</li><li>DELETE 删除</li></ul></li></ul><p>Promise 用法</p><p>Promise是异步编程的一种解决方案，从语法上讲，Promise是一个对象，从它可以获取异步操作的消息。</p><p>使用Promise主要的好处：</p><ol><li>可以避免回调函数多次嵌套产生的回调地狱问题（将相互嵌套的方式转换成链式编程 的写法）</li><li>Promise对象提供了简洁的API，使得控制异步操作更加容易</li></ol><p>ES6新语法：异步编程</p><h4 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h4><p>异步效果分析</p><ol><li>定时任务</li><li>Ajax</li><li>事件函数</li></ol><p>多次异步调用的依赖分析</p><p>多次嵌套</p><p><strong>Promise对象实质上是一个函数，Promise原型上挂载了.then(callback(上个then返回的Promise对象/上个then返回的值))方法。</strong></p><p>Promise常用的API</p><ol><li><p>实例方法</p><p>.then()  获取正常结果</p><p>.catch() 获取异常结果</p><p>.finally()  无论返回值正常与否都会执行</p></li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            type<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>            <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// then中的第一个函数：请求成功之后的回调</span><span class="token comment" spellcheck="true">// then中的第二个函数：请求失败之后的函数</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'处理完成！'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Promise对象直接挂载的API </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 异步处理三个promise对象（函数），等待所有promise处理完成，一并返回</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 异步处理三个promise对象（函数），返回最先完成的promise结果</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="fetch-API基本用法"><a href="#fetch-API基本用法" class="headerlink" title="fetch API基本用法"></a>fetch API基本用法</h3><pre><code>fetch(&#39;url&#39;).then((res)=&gt;{ // res是一个response对象    // res.text()只能调用一次    return res.text();  // 返回文本数据    return res.JSON();  // 返回JSON数据（对象）}).then(res=&gt;{    console.log(res)})</code></pre><h4 id="fetch请求参数"><a href="#fetch请求参数" class="headerlink" title="fetch请求参数"></a>fetch请求参数</h4><p>常用配置选项</p><pre><code>fetch(&#39;url?id=123&#39;,{     method: &#39;get&#39;}).then(res=&gt;{    return res.text()}).then(res=&gt;{    console.log(res)})fetch(&#39;url/books/123&#39;,{  // 后台 &#39;/books/:id&#39;  Restful风格传参    method: &#39;get&#39;  // &#39;delete&#39;}).then(res=&gt;{    return res.text()}).then(res=&gt;{    console.log(res)})// post -- stringfetch(&#39;url/books&#39;,{     method: &#39;post&#39;,    body: &#39;uname=lisi&amp;pwd=123&#39;,    headers: {        &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;    }}).then(res=&gt;{    return res.text()}).then(res=&gt;{    console.log(res)})// post -- JSONfetch(&#39;url/books&#39;,{  // res.send(req.body.uname)    method: &#39;post&#39;,    body: JSON.stringify({        uname:lisi,        pwd: 1234    }),    headers: {        &#39;Content-Type&#39;: &#39;application/json&#39;    }}).then(res=&gt;{    return res.text()}).then(res=&gt;{    console.log(res)})</code></pre><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>axios是一个基于Promise用于浏览器和node.js的HTTP请求处理库</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/axios.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout<span class="token operator">=</span><span class="token number">3000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 超时时间</span>        axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">"http://localhost:3000/"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认请求地址</span>        axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'mytoken'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'asdasafadfaf2sadsaadsd'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置请求头，会在请求头添加一个属性</span>        axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/adata'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ret<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios?id=123'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ret<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios/123'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ret<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            params<span class="token punctuation">:</span> <span class="token punctuation">{</span>                id<span class="token punctuation">:</span> <span class="token number">987</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ret<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        axios<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            params<span class="token punctuation">:</span> <span class="token punctuation">{</span>                id<span class="token punctuation">:</span> <span class="token number">987</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ret<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            uname<span class="token punctuation">:</span> <span class="token string">"coder rat"</span><span class="token punctuation">,</span>            pwd<span class="token punctuation">:</span> <span class="token number">2522</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ret<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'uname'</span><span class="token punctuation">,</span><span class="token string">"Coder Rat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">,</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ret<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios/iddssa2311'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            uname<span class="token punctuation">:</span> <span class="token string">"Rat Guo"</span><span class="token punctuation">,</span>            pwd<span class="token punctuation">:</span> <span class="token number">2522</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ret<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'axios/iddssa2311'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            uname<span class="token punctuation">:</span> <span class="token string">"Rat Guo"</span><span class="token punctuation">,</span>            pwd<span class="token punctuation">:</span> <span class="token number">2522</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ret<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="路由-Router"><a href="#路由-Router" class="headerlink" title="路由 Router"></a>路由 Router</h3><p>前端路由</p><p>概念：根据不同的用户事件，显示不同的页面内容</p><p>本质：用户事件与事件处理函数之间的对应关系</p><h3 id="Vue前端工程化（前端模块化）"><a href="#Vue前端工程化（前端模块化）" class="headerlink" title="Vue前端工程化（前端模块化）"></a>Vue前端工程化（前端模块化）</h3><p>模块化的相关规范</p><p>webpack</p><p>Vue单文件组件</p><p>Vue脚手架</p><p>Element-UI  Vue组件库</p><h4 id="模块化的概述"><a href="#模块化的概述" class="headerlink" title="模块化的概述"></a>模块化的概述</h4><h5 id="传统开发模式的主要问题"><a href="#传统开发模式的主要问题" class="headerlink" title="传统开发模式的主要问题"></a>传统开发模式的主要问题</h5><ol><li>命名冲突（多个JS之间相同命名的变量覆盖问题）</li><li>文件依赖关系不明确</li></ol><h5 id="通过模块化解决上述问题"><a href="#通过模块化解决上述问题" class="headerlink" title="通过模块化解决上述问题"></a>通过模块化解决上述问题</h5><ul><li><strong>模块化</strong>就是把单独的一个功能封装到一个模块（文件）中，模块之间相互隔离，但是可以通过特定的接口公开内部成员，也可以依赖别的模块。</li><li>模块化开发的好处：方便代码的重用，从而提高开发效率，并且方便后期维护。</li></ul><h5 id="模块化相关规范"><a href="#模块化相关规范" class="headerlink" title="模块化相关规范"></a>模块化相关规范</h5><ul><li><p>浏览器端模块化规范</p><ol><li><p>AMD   <a href="https://requirejs.org/" target="_blank" rel="noopener">require.js</a></p></li><li><p>CMD   <a href="https://seajs.github.io/seajs/docs" target="_blank" rel="noopener">Sea.js</a></p><p>Sea.js 遵循 <a href="https://github.com/cmdjs/specification/blob/master/draft/module.md" target="_blank" rel="noopener">CMD</a> 规范，可以像 <a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 一般书写模块代码。</p></li></ol></li></ul><p>以上模块化规范如今已经落伍，有相应的替代方案。</p><h5 id="服务器端模块化规范"><a href="#服务器端模块化规范" class="headerlink" title="服务器端模块化规范"></a>服务器端模块化规范</h5><ol><li>CommonJS<ul><li>模块分为 <strong>单文件模块</strong> 与 <strong>包</strong></li><li>模块成员导出：moudle.exports 和 exports（moudle.exports的引用）</li><li>模块成员导入：require(‘模块标识符’)</li></ul></li></ol><h5 id="大一统的模块化规范-ES6模块化"><a href="#大一统的模块化规范-ES6模块化" class="headerlink" title="大一统的模块化规范-ES6模块化"></a>大一统的模块化规范-ES6模块化</h5><p>在ES6模块化规范诞生之前，JavaScript社区已经尝试并提出了AMD CMD CommonJS等模块化规范。</p><p>但是，这些社区提出的模块化标准，还是存在一定的<strong>差异性</strong>与<strong>局限性</strong>，<strong>并不是</strong>浏览器与服务器端<strong>通用的模块化标准</strong></p><ul><li>AMD CMD 适用于浏览器的JavaScript模块化</li><li>CommonJS 适用于服务器端的JavaScript模块化</li></ul><p>因此，<strong>ES6语法规范中</strong>，在语言层面上定义了ES6模块化规范，是浏览器端与服务器端通用的模块化开发规范。</p><ul><li>每一个JS文件都是一个独立的模块</li><li><strong>导入模块成员</strong>使用<code>import</code>关键字</li><li><strong>暴露模块成员</strong>使用<code>export</code>关键字</li></ul><h5 id="Node-js中通过babel体验ES6模块化"><a href="#Node-js中通过babel体验ES6模块化" class="headerlink" title="Node.js中通过babel体验ES6模块化"></a>Node.js中通过<code>babel</code>体验ES6模块化</h5><pre class=" language-shell"><code class="language-shell">create a new folder for projects```npm initnpm install @babel/core @babel/node @babel/preset-env @babel/cli --save--devnpm install @babel/polyfill --save```then,create a file named 'babel.config.js' at rootcode in file```const presets = [    ['@babel/env', {        targets: {            edge: '17',            firefox: '60',            chrome: '67',            safari: '11.1'        }    }]]module.exports = { presets }```</code></pre><h3 id="ES6-模块化基本语法"><a href="#ES6-模块化基本语法" class="headerlink" title="ES6 模块化基本语法"></a>ES6 模块化基本语法</h3><h4 id="1-默认导出-与-默认导入"><a href="#1-默认导出-与-默认导入" class="headerlink" title="1. 默认导出 与 默认导入"></a>1. 默认导出 与 默认导入</h4><ul><li>默认导出语法 export default {默认导出的成员}</li><li>默认导入语法 import 接收名 from ‘./m1.js’</li></ul><p>在一个模块中 export default 最多只能使用一次</p><h4 id="2-按需导出-与-按需导入"><a href="#2-按需导出-与-按需导入" class="headerlink" title="2.按需导出 与 按需导入"></a>2.按需导出 与 按需导入</h4><ul><li>按需导出语法：export let s1 = ‘aaa’</li><li>按需导入语法：import { s1,s2 as ss2 } from ‘./m1.js’</li></ul><p>在每个模块中，可以使用多次按需导出</p><h4 id="3-直接导入并执行模块中的代码"><a href="#3-直接导入并执行模块中的代码" class="headerlink" title="3.直接导入并执行模块中的代码"></a>3.直接导入并执行模块中的代码</h4><p>有时候，我们<strong>只想单纯执行某个模块中的代码，并不需要得到模块中向外暴露的成员</strong>，此时，可以直接导入并执行模块代码。</p><pre><code>import &#39;./m1.js&#39;</code></pre><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><h4 id="当前web开发面临的困境"><a href="#当前web开发面临的困境" class="headerlink" title="当前web开发面临的困境"></a>当前web开发面临的困境</h4><ul><li>文件依赖关系错综复杂</li><li>静态资源请求效率低</li><li>模块化支持不友好</li><li>浏览器对高级JavaScript特性兼容程度较低</li><li>etc…</li></ul><h4 id="webpack-介绍"><a href="#webpack-介绍" class="headerlink" title="webpack 介绍"></a>webpack 介绍</h4><p>webpack 是一个<strong>流行的前端项目的构建工具（打包工具），可以解决当前web开发中所面临的的困境</strong>。</p><p>本质上，<em>webpack</em> 是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)</em>。当 webpack 处理应用程序时，它会递归地构建一个<em>依赖关系图(dependency graph)</em>，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 <em>bundle</em>。</p><p>webpack提供了<strong>友好的模块化支持</strong>，以及<strong>代码压缩混淆、处理js兼容问题、性能优化</strong>等强大的功能，从而让程序员把工作的重心放到具体的功能实现上，提高了开发效率和项目的可维护性。</p><p>目前，绝大多数的企业中的前端项目，都是基于webpack进行打包构建的。</p><p><img src="/images/image-20200225194914637.png" alt="image-20200225194914637"></p><h4 id="webpack-的基本使用"><a href="#webpack-的基本使用" class="headerlink" title="webpack 的基本使用"></a>webpack 的基本使用</h4><ul><li>创建列表隔行变色项目<ul><li>新建项目空目录（命名使用英文），并运行npm init -y命令，初始化包管理配置文件<code>package.json</code></li><li>新建 src 源代码目录（webpack打包的源目录）</li><li>在 src 目录下，新建<code>index.html</code>文件（首页）</li><li>初始化首页基本结构内容</li><li>根目录打开终端，运行 <code>npm install jquery -S</code>命令，安装JQuery</li><li>通过模块化的形式，在src下的<code>index.js</code>中实现隔行变色效果</li></ul></li></ul><ul><li><p>在项目中安装和配置 webpack</p><ul><li><p>运行 <code>npm install webpack webpack-cli -D</code>(安装webpack命令行工具)</p></li><li><p>在项目根目录中，创建名为 <code>webpack.config.js</code>的webpack配置文件</p></li><li><p>在 webpack 的配置文件中，添加初始化配置代码</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//mode用来指定构建模式</span>    <span class="token comment" spellcheck="true">// （通过开发模式，转化的代码不会压缩混淆）</span>    <span class="token comment" spellcheck="true">// 可选production(产品发布模式 == 上线)</span>    mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li><li><p>在 package.json 配置文件中的 script 节点下，新增 dev 脚本如下：</p><pre class=" language-json"><code class="language-json">//script节点下的脚本<span class="token punctuation">,</span>可以通过npm run执行<span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack"</span> </code></pre></li><li><p>在终端中运行 npm run dev 命令，启动 webpack 进行项目打包</p><p><img src="/images/image-20200226091725455.png" alt="image-20200226091725455"></p></li></ul></li></ul><ul><li><p>配置 webpack 打包的入口和出口</p><ul><li><p>webpack 的 4.x 版本中默认约定：</p><ul><li>打包的入口文件为 <code>src -&gt; index.js</code></li><li>打包的出口文件为 <code>dist -&gt; main.js</code></li></ul></li><li><p>如果要修改打包的入口与出口，可以在 <code>webpack.config.js</code>中新增如下配置信息：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 配置打包入口出口</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 导入 node.js中专门操作路径的模块</span></code></pre></li></ul></li></ul><pre><code>module.exports = {    entry: path.join(__dirname,&#39;./src/index.js&#39;),// 打包的入口文件路径    output: {        path: path.join(__dirname,&#39;./dist&#39;), // 输出文件的存放路径‘        filename: &#39;bundle.js&#39;, // 输出文件的名称    }}```</code></pre><ul><li><p>配置 webpack 自动打包功能</p><p>为了实时观测代码更新的页面展示效果</p><ul><li><p>运行 <code>npm install webpack-dev-server -D</code>命令，安装支持项目自动打包的工具</p></li><li><p>修改<code>package.json -&gt;scripts</code>脚本中的 dev 命令如下：</p><pre class=" language-json"><code class="language-json"><span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server"</span></code></pre></li><li><p>将<code>src -&gt; index.html</code>中，script 脚本的引用路径，修改为”/bundle.js”（输出文件托管于8080/根目录，存储在内存中）</p></li><li><p>运行 <code>npm run dev</code> 命令，重新进行打包</p></li><li><p>在浏览器中直接访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> ,查看自动打包效果</p></li></ul><blockquote><p>webpack-dev-server 会启动一个实时打包的 http 服务</p><p>webpack-dev-server 打包生成的输出文件，默认放到了项目根目录中，而且是虚拟的，看不见的</p></blockquote></li></ul><ul><li><p>配置 html-webpack-plugin 生成预览页面</p><ul><li><p>运行 <code>npm install html-webpack-plugin -D</code>命令，安装生成预览页面的插件</p></li><li><p>修改 <code>webpack.config.js</code>文件的头部区域，添加如下配置信息：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建插件的实例对象</span>    template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 指定引用模板路径</span>    filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定生成文件的名称，生成的文件存在于内存中，目录中不显示</span><span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre></li><li><p>修改 <code>webpack.config.js</code> 文件中向外暴露的配置对象，新增如下配置节点：</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>htmlPlugin<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//plugins 数组是 webpack 打包期间会用到的一些插件列表</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>配置自动打包相关的参数</p><pre><code>package.json中的配置--open 打包完成后自动打开浏览器页面--host 配置 IP 地址--post 配置端口&quot;scripts&quot;:{    &quot;dev&quot;:&quot;webpack-dev-server --open --host 127.0.0.1 --port 8888&quot;}</code></pre><p><img src="/images/image-20200226112055349.png" alt="image-20200226112055349"></p></li></ul><h4 id="webpack-中的加载器-loader"><a href="#webpack-中的加载器-loader" class="headerlink" title="webpack 中的加载器 loader"></a>webpack 中的加载器 loader</h4><p><strong>loader 用于对模块的源代码进行转换。loader 可以使你在 <code>import</code> 或”加载”模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 <code>import</code> CSS文件！</strong></p><ul><li><p>通过 <code>loader</code>打包非js模块</p><p>在实际开发过程中，webpack默认只能打包处理以 .js 后缀名结尾的模块，其他非 .js 后缀名称结尾的模块，webpack 默认处理不了，需要调用 <strong>对应的loader 加载器才能正常打包，否则会报错！</strong></p><p>loader 加载器可以协助 webpack 打包处理特定的模块文件，比如：</p><ul><li>less-loader 可以打包处理 .less 相关的文件</li><li>sass-loader 可以打包处理 .scss 相关的文件</li><li>url-loader 可以打包处理 .css 中与 url 路径相关的文件</li></ul></li><li><p>loader 的调用过程</p><p><img src="/images/image-20200226135531767.png" alt="image-20200226135531767"></p></li><li><p>打包处理 CSS 文件</p><ul><li><p>运行 npm i style-loader css-loader -D 命令，安装处理css文件的loader</p></li><li><p>在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下：</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">// test表示要匹配的文件后缀（类型），use 表示要调用的loader</span>        <span class="token comment" spellcheck="true">// use 数组中指定的 loader 顺序是固定的，多个loader的调用顺序 是从后往前调用的</span>        <span class="token punctuation">{</span>test<span class="token punctuation">:</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>其中， test 表示匹配的文件类型， use 表示对应要调用的 loader。use 数组中指定的 loader 顺序是固定的，多个loader的调用顺序 是从后往前调用的。</p></li></ul></li><li><p>打包处理<code>less</code>文件</p><ul><li><p>运行 <code>npm i less-loader less -D</code>命令</p></li><li><p>在 <code>webpack.config.js</code> 的module -&gt; rules 数组中，添加 loader 规则如下：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>test<span class="token punctuation">:</span><span class="token regex">/\.less$/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>打包处理<code>scss</code>文件</p><ul><li><p>运行 npm i sass-loader node-sass -D 命令，安装相应的包(执行可能会报错，如果报错可以分别执行以下命令)</p><pre class=" language-shell"><code class="language-shell">npm i sass-loader -Dnpm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/ -D</code></pre></li><li><p>在 <code>webpack.config.js</code> 的module -&gt; rules 数组中，添加 loader 规则如下：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>test<span class="token punctuation">:</span><span class="token regex">/\.scss$/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'sass-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>配置 postCSS 自动添加 css 的兼容前缀</p><p>css样式表中的 ::placeholder 伪类选择器 在不同浏览器，有兼容性问题，需要加上兼容性前缀</p><p>为了解决类似以上的css兼容性问题，导入postcss-loader解决相应问题</p><ul><li><p>运行 npm i postcss-loader autoprefixer -D</p></li><li><p>在项目根目录中创建postcss 的配置文件 postcss.config.js，并初始化如下配置：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 导入自动添加兼容前缀的插件</span><span class="token keyword">const</span> autoprefixer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"autoprefixer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span> autoprefixer <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 挂载插件</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>打包样式表中的图片和字体文件</p><ul><li><p>运行 <code>npm i url-loader file-loader -D</code>命令</p></li><li><p>在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下：</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>test<span class="token punctuation">:</span><span class="token regex">/\.jpg|jpeg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span><span class="token string">'url-loader?limit=169000'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>limit参数，是用于指定图片大小小于限定值169kb，就转化为加载速度更快的base64位的资源，图片真实大小大于等于169kb就不会转化，指向默认资源。</p></li></ul></li><li><p>打包处理js文件中的高级语法</p><ul><li><p>安装 babel 转换器相关的包：</p><pre class=" language-shell"><code class="language-shell">npm i babel-loader @babel/core @babel/runtime -D</code></pre></li><li><p>安装babel 语法插件相关的包：</p><pre class=" language-shell"><code class="language-shell">npm install @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-proposal-class-properties -D</code></pre></li><li><p>在根目录中，创建 babel 配置文件 babel.config.js 并初始化基本配置如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 配置babel的依赖插件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/plugin-transform-runtime'</span><span class="token punctuation">,</span><span class="token string">'@babel/plugin-proposal-class-properties'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li><li><p>在根目录 webpack.config.js 中 module -&gt; rules 下添加以下配置代码：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>test<span class="token punctuation">:</span><span class="token regex">/\.js$/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span><span class="token string">'babel-loader'</span><span class="token punctuation">,</span>exclude<span class="token punctuation">:</span><span class="token regex">/node_modules/</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// exclude是排除项 排除node_modules中的所有js文件</span></code></pre></li></ul></li></ul><h3 id="Vue-单文件组件"><a href="#Vue-单文件组件" class="headerlink" title="Vue 单文件组件"></a>Vue 单文件组件</h3><h4 id="传统组件的问题和解决方案"><a href="#传统组件的问题和解决方案" class="headerlink" title="传统组件的问题和解决方案"></a>传统组件的问题和解决方案</h4><h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><ol><li>全局定义的组件必须保证组件的名称不重复</li><li>字符串模板缺乏语法高亮和格式化，在节点过多的时候，需要用到丑陋的 \ </li><li>不支持 CSS ，意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏</li><li>没有构建步骤限制，只能使用HTML 和 ES5 JavaScript，而不能使用预处理器（如：Babel）</li></ol><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>针对传统组件的问题，Vue 提供了一个解决方案 ——使用Vue单文件组件。</p><h4 id="Vue-单文件组件的基本用法"><a href="#Vue-单文件组件的基本用法" class="headerlink" title="Vue 单文件组件的基本用法"></a>Vue 单文件组件的基本用法</h4><h5 id="单文件组件的组成结构（-vue）"><a href="#单文件组件的组成结构（-vue）" class="headerlink" title="单文件组件的组成结构（.vue）"></a>单文件组件的组成结构（.vue）</h5><ul><li>template  组件的模块区域</li><li>script        业务逻辑区域</li><li>style          样式区域</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--这里用于定义Vue单文件组件的模板内容--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 这里用于定义Vue组件的业务逻辑</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 私有数据</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                data1<span class="token punctuation">:</span> dataValue1<span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">eventFunction1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            eventFunction2<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// ...其他业务逻辑</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/*这里定义了组件的样式*/</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h5 id="webpack-中配置-vue-组件的加载器"><a href="#webpack-中配置-vue-组件的加载器" class="headerlink" title="webpack 中配置 vue 组件的加载器"></a>webpack 中配置 vue 组件的加载器</h5><ol><li><p>运行 <code>npm i vue-loader vue-template-compiler -D</code>命令 下载loader和相关插件</p></li><li><p>在 webpack.config.js 配置文件中，添加 vue-loader 的配置项 如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 新建vue-loader plugin（插件）实例</span><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> vuePlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>vuePlugin<span class="token punctuation">]</span>rules<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span><span class="token string">'vue-loader'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>此时要保证vue组件中的style 不要加lang=””</p></li></ol><h5 id="在-webpack-项目中使用-vue"><a href="#在-webpack-项目中使用-vue" class="headerlink" title="在 webpack 项目中使用 vue"></a>在 webpack 项目中使用 vue</h5><ol><li>运行 <code>npm i vue -S</code> 安装 vue(vue.js)</li><li>在 src -&gt; index.js 入口文件中，通过 import Vue from ‘vue’ 来导入 vue 构造函数</li><li>创建 vue 的实例对象，并指定要控制的 el 区域</li><li>通过 render 函数渲染 App根组件 写法一定要注意，是<code>return</code></li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">// 导入单文件组件 App根组件</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./components/App.vue'</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// render:h=>h(App)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="webpack-打包发布"><a href="#webpack-打包发布" class="headerlink" title="webpack 打包发布"></a>webpack 打包发布</h5><p>在package.json文件中的script脚本中添加</p><pre class=" language-json"><code class="language-json"><span class="token property">"build"</span><span class="token operator">:</span><span class="token string">"webpack -p"</span></code></pre><p>然后终端执行</p><pre class=" language-shell"><code class="language-shell">npm run build</code></pre><p>即可完成简单的webpack打包发布</p><h3 id="webpack-脚手架"><a href="#webpack-脚手架" class="headerlink" title="webpack 脚手架"></a>webpack 脚手架</h3><h4 id="Vue脚手架的基本用法"><a href="#Vue脚手架的基本用法" class="headerlink" title="Vue脚手架的基本用法"></a>Vue脚手架的基本用法</h4><p>Vue 脚手架用于快速生成Vue 项目基本架构，其官网地址为：<a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">https://cli.vuejs.org/zh/</a></p><ol><li><h5 id="通过交互式命令行方式，创建vue项目"><a href="#通过交互式命令行方式，创建vue项目" class="headerlink" title="通过交互式命令行方式，创建vue项目"></a>通过交互式命令行方式，创建vue项目</h5></li></ol><pre class=" language-shell"><code class="language-shell">npm i @vue/cli -gvue -V  查看版本vue create vue_proj_01  利用vue脚手架新建vue项目相关选择配置项Vue CLI v4.2.2选择手动选择创建规则? Please pick a preset: Manually select features选择项目需要的插件? Check the features needed for your project: Babel, Router选择路由的模式 是历史模式还是hash模式? Use history mode for router? (Requires proper server setup for index fallback in production) No选择babel配置文件是单独创建还是在package.json中? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files是否将此次设置保存为预设 为未来项目使用? Save this as a preset for future projects? No</code></pre><ol start="2"><li><h5 id="通过可视化vue-ui图形界面构建vue项目"><a href="#通过可视化vue-ui图形界面构建vue项目" class="headerlink" title="通过可视化vue-ui图形界面构建vue项目"></a>通过可视化vue-ui图形界面构建vue项目</h5><pre class=" language-shell"><code class="language-shell">vue ui</code></pre></li><li><h5 id="交互式命令行，构建基于vue-cli2-x历史版本的vue项目"><a href="#交互式命令行，构建基于vue-cli2-x历史版本的vue项目" class="headerlink" title="交互式命令行，构建基于vue-cli2.x历史版本的vue项目"></a>交互式命令行，构建基于vue-cli2.x历史版本的vue项目</h5></li></ol><pre class=" language-shell"><code class="language-shell">npm i @vue/cli-init---vue init webpack my-project</code></pre><h4 id="Vue-cli-构建项目的目录结构"><a href="#Vue-cli-构建项目的目录结构" class="headerlink" title="Vue-cli 构建项目的目录结构"></a>Vue-cli 构建项目的目录结构</h4><p><img src="/images/image-20200227194515094.png" alt="image-20200227194515094"></p><h4 id="Vue-脚手架的自定义配置"><a href="#Vue-脚手架的自定义配置" class="headerlink" title="Vue 脚手架的自定义配置"></a>Vue 脚手架的自定义配置</h4><h5 id="1-通过-package-json-配置项目"><a href="#1-通过-package-json-配置项目" class="headerlink" title="1.通过 package.json 配置项目"></a>1.通过 package.json 配置项目</h5><pre class=" language-json"><code class="language-json">// 必须是符合规范的json语法// 在可视化工具对应<span class="token property">"vue"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"devServer"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"port"</span><span class="token operator">:</span><span class="token string">"8888"</span><span class="token punctuation">,</span> //端口号配置        <span class="token property">"open"</span><span class="token operator">:</span> <span class="token boolean">true</span>  // 编译完成在浏览器自动打开    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/images/image-20200227195922363.png" alt="image-20200227195922363"></p><p><img src="/images/image-20200227195216772.png" alt="image-20200227195216772"></p><p>修改后，在当前项目根目录，打开终端</p><pre class=" language-shell"><code class="language-shell">npm run serve</code></pre><p>浏览器会自动打开以下界面，端口号为8888</p><p><img src="/images/image-20200227200120439.png" alt="image-20200227200120439"></p><p>但是，并不推荐使用这种配置方式。因为 package.json 主要是用来管理包的配置信息，为了便于维护，推荐将 vue 脚手架相关的配置，单独定义到 vue.config.js 配置文件中。</p><h4 id="通过单独的配置文件配置项目"><a href="#通过单独的配置文件配置项目" class="headerlink" title="通过单独的配置文件配置项目"></a>通过单独的配置文件配置项目</h4><ol><li>在项目的根目录 创建文件 vue.config.js 配置文件</li><li>在该文件中进行相关的配置，从而覆盖默认配置</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// vue.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>        port<span class="token punctuation">:</span> <span class="token number">8888</span><span class="token punctuation">,</span>        open<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此配置和package.json中的上述配置不能重复，以上代码和package.json中配置效果相同。</p><hr><h3 id="Element-UI-的基本使用"><a href="#Element-UI-的基本使用" class="headerlink" title="Element-UI 的基本使用"></a>Element-UI 的基本使用</h3><p>Element-UI：一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的<strong>桌面组件库。</strong></p><p>Element-UI中文 <a href="https://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">官网</a></p><h5 id="1-基于命令行方式手动安装"><a href="#1-基于命令行方式手动安装" class="headerlink" title="1. 基于命令行方式手动安装"></a>1. 基于命令行方式手动安装</h5><ol><li>安装依赖包 <code>npm i element-ui -S</code></li><li>导入 Element-UI 相关资源</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// src -> index.js</span><span class="token comment" spellcheck="true">// 导入组件库 （js）</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 配置组件相关样式 （CSS）</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token comment" spellcheck="true">// 配置 Vue 插件 将ElementUI安装到Vue上，这样Vue中每个组件都能够使用ElementUI中的那些组件了</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span></code></pre><ol start="3"><li><p>Vue根组件 App.vue 中添加Element-UI官网提供的样例代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-row</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span><span class="token punctuation">></span></span>默认按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主要按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成功按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>信息按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>警告按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>危险按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-row</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>效果如下：</p></li></ol><p><img src="/images/image-20200227205839657.png" alt="image-20200227205839657"></p><h4 id="2-基于图形化Vue-cli-UI-自动安装"><a href="#2-基于图形化Vue-cli-UI-自动安装" class="headerlink" title="2. 基于图形化Vue-cli UI 自动安装"></a>2. 基于图形化Vue-cli UI 自动安装</h4><ol><li>运行 vue ui 命令，打开图形化界面</li><li>通过 Vue 项目管理器，进入具体的项目配置面板</li><li>点击 插件 -&gt; 添加插件，进入插件查询面板</li><li>搜索 vue/cli-plugin-element 并安装 (作者ElementUI)</li><li>配置插件，实现按需导入，从而减少打包后项目的体积</li></ol><p><img src="/images/image-20200227212208066.png" alt="image-20200227212208066"></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// mian.js 入口路由</span><span class="token comment" spellcheck="true">// 完成以上安装流程后，vue脚手架就自动给我们添加了以下代码</span><span class="token keyword">import</span> <span class="token string">'./plugins/element.js'</span><span class="token comment" spellcheck="true">// ------------</span><span class="token comment" spellcheck="true">//element.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 以上代码完成了按需导入了’element-ui‘的Button组件，并注册为Vue的插件</span></code></pre><blockquote><p>图形化界面在配置 element-ui时，有时候会将样式丢失</p><p>解决方案：</p><p>1.在依赖中卸载 element-ui，重新配置一次</p><p>2.手动导入样式：找到 plugins 文件夹中的element.js文件，添加 import ‘element-ui/lib/theme-chalk/index.css’</p></blockquote><hr><p><strong><u>以上为Vue项目开发的基础铺垫，接下来，就可以happy地结合以上准备，大干一场啦！</u></strong></p><hr><h3 id="Vue-电商全系统项目实战-Day-1"><a href="#Vue-电商全系统项目实战-Day-1" class="headerlink" title="Vue 电商全系统项目实战 Day 1"></a>Vue 电商全系统项目实战 Day 1</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><h4 id="电商后台管理系统的开发模式（前后端分离）"><a href="#电商后台管理系统的开发模式（前后端分离）" class="headerlink" title="电商后台管理系统的开发模式（前后端分离）"></a>电商后台管理系统的开发模式（前后端分离）</h4><p>电商后台管理系统整体采用<strong>前后端分离的开发模式</strong>，其中前端项目是<strong>基于Vue技术栈的SPA项目。</strong></p><p><img src="/images/image-20200228100625364.png" alt="image-20200228100625364"></p><h4 id="电商后台管理系统的技术选型"><a href="#电商后台管理系统的技术选型" class="headerlink" title="电商后台管理系统的技术选型"></a>电商后台管理系统的技术选型</h4><p>前端项目技术栈</p><ul><li>Vue</li><li>Vue-router</li><li>Element-UI</li><li>Axios          发送网络数据请求</li><li>Echarts</li></ul><p>后端项目技术栈</p><ul><li>Node.js</li><li>Express</li><li>Jwt              状态保持工具，类似于session的作用      </li><li>Mysql</li><li>Sequelize   操作数据库的框架</li></ul><h4 id="前端项目初始化步骤"><a href="#前端项目初始化步骤" class="headerlink" title="前端项目初始化步骤"></a>前端项目初始化步骤</h4><ol><li>安装 vue 脚手架</li><li>通过 Vue 脚手架创建项目</li><li>配置 Vue 路由</li><li>配置 Element-UI 组件库</li><li>配置 axios 库</li><li>初始化 git 远程仓库</li><li>将本地项目托管到 GitHub 或 码云 中</li></ol><h4 id="码云配置"><a href="#码云配置" class="headerlink" title="码云配置"></a>码云配置</h4><p>码云提供了基于SSH协议的Git服务，在使用SSH协议访问仓库仓库之前，需要先配置好账户/仓库的SSH公钥</p><p>设置-&gt;安全设置-&gt;SSH公钥</p><p>根据提示生成和设置公钥</p><p>生成公钥</p><p>在gitbash中输入</p><pre class=" language-shell"><code class="language-shell">ssh-keygen -t rsa -C "码云注册邮箱"</code></pre><p>按照提示完后三次回车，即可生成SSH公钥，并提示生成目录</p><p>id_rsa.pub文件 使用vscode打开，复制全部的内容，配置到SSH公钥中，保存，并输入密码确认</p><h4 id="Git配置多个SSH-Key"><a href="#Git配置多个SSH-Key" class="headerlink" title="Git配置多个SSH-Key"></a>Git配置多个SSH-Key</h4><p><a href="https://gitee.com/help/labels/19" target="_blank" rel="noopener">SSH Key</a></p><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p>当有多个git账号时，比如：</p><p>a. 一个gitee，用于公司内部的工作开发；<br>b. 一个github，用于自己进行一些开发活动；</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><ol><li>生成一个公司用的SSH-Key</li></ol><pre><code>$ ssh-keygen -t rsa -C &#39;xxxxx@company.com&#39; -f ~/.ssh/gitee_id_rsa</code></pre><ol><li>生成一个github用的SSH-Key</li></ol><pre><code>$ ssh-keygen -t rsa -C &#39;xxxxx@qq.com&#39; -f ~/.ssh/github_id_rsa</code></pre><ol><li>在 ~/.ssh 目录下新建一个config文件，添加如下内容（其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径）此处的config文件不要有任何后缀</li></ol><pre><code># giteeHost gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/gitee_id_rsa# githubHost github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/github_id_rsa</code></pre><p>4.用ssh命令分别测试</p><pre><code>$ ssh -T git@gitee.com$ ssh -T git@github.com</code></pre><pre class=" language-shell"><code class="language-shell">Hi CoderOfRat! You've successfully authenticated, but GITEE.COM does not provide shell access.</code></pre><p>看到以上提示，代表基于SSH协议的Git服务已经连接成功。</p><p>然后就可以在码云新建一个与项目同名的仓库</p><h4 id="将本地项目托管到码云中"><a href="#将本地项目托管到码云中" class="headerlink" title="将本地项目托管到码云中"></a>将本地项目托管到码云中</h4><p>先做一下全局配置</p><pre class=" language-shell"><code class="language-shell">按照码云提示初始化配置 git config --global user.name "yourgitee username"git config --global user.email "gitee email"</code></pre><p>在本地项目根目录执行</p><pre class=" language-shell"><code class="language-shell">git status 查看git本地仓库状态如有更改或新增的文件，则执行git add . 将所有改动添加到暂存区git commit -m "提交备注信息" 本地提交 提交到本地仓库git remote add origin https://gitee.com/coderofrat/vue_shop.git 设置提交源origin == https://gitee.com/coderofrat/vue_shop.gitgit push -u origin master 推送本地代码到提交源 因为源仓库上没有master主分支，所以 -u 创建分支 master 并将此次推送提交到master主分支 在云端进行托管</code></pre><h4 id="安装mysql数据库，"><a href="#安装mysql数据库，" class="headerlink" title="安装mysql数据库，"></a>安装mysql数据库，</h4><p>开发环节推荐 phpstudy 更轻 更方便</p><p>启动phpstudy中的mysql服务，然后在MySql管理器-&gt;MySql导入导出中选择后台提供的数据库文件进行恢复</p><p><img src="/images/image-20200228164953829.png" alt="image-20200228164953829"></p><p>还原到数据库的名字和选择的文件同名<code>mydb</code></p><p><img src="images/image-20200228165326302.png" alt="image-20200228165326302"></p><p>导入成功后，在后台根目录，npm i 下载依赖包，然后node app.js 运行服务。</p><p>服务开启后，在PostMan中进行接口调用测试，按照文档，测试登录验证接口是否可以正常调用。</p><p>一切正常后，就可以开始项目开发啦~</p><h4 id="登录-退出功能实现"><a href="#登录-退出功能实现" class="headerlink" title="登录/退出功能实现"></a>登录/退出功能实现</h4><h5 id="登录业务流程"><a href="#登录业务流程" class="headerlink" title="登录业务流程"></a>登录业务流程</h5><ol><li>在登陆页面输入用户名和密码</li><li>调用后台接口进行验证合法性</li><li>通过验证之后，根据后台的响应状态跳转到项目主页（根组件）</li></ol><h5 id="登录业务的相关技术点"><a href="#登录业务的相关技术点" class="headerlink" title="登录业务的相关技术点"></a>登录业务的相关技术点</h5><ol><li>http 是无状态的  所以需要下面几种形式记录状态</li><li>通过 cookie 在客户端记录状态  容器</li><li>通过 session 在服务器端记录状态  容器</li><li>通过 token 方式维持状态  令牌 字符串 内容本身</li></ol><p>如果前端与服务器之间不存在跨域问题，推荐使用cookie&amp;session 记录保持用户的登录状态</p><p>如果前端与服务器之间存在跨域问题，推荐使用 token 方式维持登录状态</p><p>因为此次vue项目运行在新的端口号上，与服务器之间可能存在跨域问题，所以此时使用 token 方式。</p><h4 id="登录-token-原理分析"><a href="#登录-token-原理分析" class="headerlink" title="登录 - token 原理分析"></a>登录 - token 原理分析</h4><p><img src="/images/image-20200228185323848.png" alt="image-20200228185323848"></p><p>登陆成功时，由服务器生成对应用户的token值，每个用户的token值是不同的。</p><p>客户端储存该 token，后续所有的请求都携带该 token 发送请求（设置到请求头中）</p><p>服务器接收到请求，首先验证token的合法性，如果合法，才允许请求。针对携带的 token，响应相应请求，调用服务器接口返回数据。</p><h4 id="登录功能实现"><a href="#登录功能实现" class="headerlink" title="登录功能实现"></a>登录功能实现</h4><h5 id="登录页面布局"><a href="#登录页面布局" class="headerlink" title="登录页面布局"></a>登录页面布局</h5><p>通过 Element-UI 组件实现布局</p><p>需要组件：</p><p>el-form</p><p>el-form-item</p><p>el-input</p><p>el-button</p><p>阿里icon字体图标</p><hr><p>首先创建子分支 login 在子分支上进行登录功能的开发</p><pre class=" language-shell"><code class="language-shell">git status  查看当前分支的目录状态如果干净，没有更新，执行git checkout -b login  创建子分支login 并切换到 login分支git branch  查看所有分支，当前所在分支为绿色带星</code></pre><ol><li>删除根组件App.vue中的div#app节点内的所有内容</li><li>清空导入的组件，删除挂载的默认组件</li><li>清空样式内的所有内容</li><li>删除路由入口文件main.js中不需要的组件导入，同时清空views文件夹</li><li>修改router文件夹下的index.js，清空路由规则，删除默认的组件导入</li></ol><p>保持页面初始化状态。</p><p><img src="/images/App.vue.png" alt="App.vue"></p><p>在components文件夹中新建 Login.vue 登录功能组件，并初始化组件内容，然后在根组件的模板中添加 router-view占位符，供子组件渲染</p><p><img src="/images/Login.vue.png" alt="Login.vue"></p><p>在router文件夹下的index.js中初始化以下代码</p><p><img src="images/router_index.js.png" alt="router_index.js"></p><p>实现了访问<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 重定向到登录页面（组件）</p><p>下面开始实现页面布局</p><ol><li><p>下载less解析器</p><p><code>npm i less less-loader -D</code></p></li><li><p>添加全局样式文件</p><p>在 <code>src -&gt; assets -&gt; css -&gt; global.css</code></p></li><li><p>在 main.js 中导入全局样式</p></li><li><p>在 Login.vue 中添加组件样式与结构</p></li></ol><h5 id="绘制登录表单结构"><a href="#绘制登录表单结构" class="headerlink" title="绘制登录表单结构"></a>绘制登录表单结构</h5><ol><li><p>找到 element-ui组件库中的form模块，里面只复制文本框组件</p></li><li><p>在plugins -&gt; element.js 中按需导入和挂载组件</p></li><li><p>找到 element-ui 组件苦衷，button 模块</p></li><li><p>添加类名</p><p>el-form 添加 class=”login_form”</p><p>el-form-item 添加class=”btns”</p></li><li><p>设置文本框组件的图标</p><ul><li>找到element-ui组件库中，input模块中 带图标的输入框</li><li>将 prefix-icon 属性添加到 Login.vue 组件的 el-input身上 prefix-icon=”图标引用”</li><li>在assets文件夹中添加 fonts 阿里图标文件夹</li><li>在main主入口文件导入需要的阿里图标样式文件</li><li>复制对应的图标名到 prefix-icon=””中</li></ul></li></ol><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Login.vue template.login_container.login_box --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 用户名输入框 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">prefix-icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont icon-user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 密码输入框 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">prefix-icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont icon-3702mima<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 按钮 登录 重置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// main.js</span><span class="token comment" spellcheck="true">// 导入阿里图标</span><span class="token keyword">import</span> <span class="token string">'./assets/fonts/iconfont.css'</span></code></pre><h5 id="绑定Login-vue的表单数据"><a href="#绑定Login-vue的表单数据" class="headerlink" title="绑定Login.vue的表单数据"></a>绑定Login.vue的表单数据</h5><ol><li>在data(){}中定义一个loginForm登录表单数据对象</li><li>在 el-form 绑定 model属性 :model=”loginForm”</li><li>在 el-input 上双向数据绑定表单数据 v-model=”loginForm.对应属性”</li></ol><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Login.vue --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 用户名 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">prefix-icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont icon-user<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginForm.username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 密码 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">prefix-icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont icon-3702mima<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loginForm.password<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 按钮 登录 重置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 这是登录表单的数据绑定对象</span>            loginForm<span class="token punctuation">:</span><span class="token punctuation">{</span>                username<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                password<span class="token punctuation">:</span> <span class="token string">''</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="绑定Login-vue表单输入合法验证规则"><a href="#绑定Login-vue表单输入合法验证规则" class="headerlink" title="绑定Login.vue表单输入合法验证规则"></a>绑定Login.vue表单输入合法验证规则</h5><ol><li>在Login.vue data中创建loginFormRules</li><li>为 el-form 添加 :rules=”loginFormRules” 绑定规则对象</li><li>在 el-form-item 通过prop=”属性”进行规则指定</li></ol><h5 id="重置表单"><a href="#重置表单" class="headerlink" title="重置表单"></a>重置表单</h5><ol><li><p>在el-form上绑定标记 ref=”loginFormRef” 方便获取这个表单对象</p></li><li><p>给重置按钮注册 @click=”resetLoginForm” 事件</p></li><li><p>在resetLoginForm处理程序中 调用 el-form 表单的 resetFields 方法重置表单</p></li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>loginFormRef<span class="token punctuation">.</span><span class="token function">resetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="发送请求前的数据校验"><a href="#发送请求前的数据校验" class="headerlink" title="发送请求前的数据校验"></a>发送请求前的数据校验</h5><p>当表单符合验证规则，才允许发送登录请求</p><ol><li><p>给登录按钮注册 @click=”login” 事件</p></li><li><p>添加登陆事件处理函数</p><p>this.$refs.loginFormRef.validate(valid =&gt;{</p><p>​      console.log(valid)</p><p> })</p><p>如果校验通过，valid值为true,不通过，则返回值为false</p></li></ol><h5 id="点击登录，发送请求"><a href="#点击登录，发送请求" class="headerlink" title="点击登录，发送请求"></a>点击登录，发送请求</h5><p>在main.js中导入axios，并设置axios请求公共根路径，将axios对象挂载在Vue构造函数的原型对象上</p><p>当表单前端验证通过后，发送请求，根据请求结果，调用element-ui的Message组件，返回不同的弹窗状态，然后进行接下来的处理</p><p>此处调用了element-ui的Message组件，由于Message组件属于行为组件，所以在element.js中通过 Vue.prototype.$message = Message的方法进行挂载，和样式组件不同，样式组件，直接使用Vue.use(组件)进行挂载</p><h5 id="登陆成功的处理"><a href="#登陆成功的处理" class="headerlink" title="登陆成功的处理"></a>登陆成功的处理</h5><p>将登陆成功之后的token，保存到客户端的 sessionStorage 中</p><ul><li><p>项目中除了登录之外的其他API接口，必须在登陆之后才能访问</p></li><li><p>token 只应该在当前网站打开期间生效，所以将 token 保存到 sessionStorage 中</p></li><li><p>window.sessionStorage.setItem(“token”,res.data.token)</p></li></ul><p>通过编程式导航转跳到后台主页，路由地址为 /home</p><ul><li>this.$router.push(“/home”);</li></ul><h5 id="路由导航守卫控制访问权限"><a href="#路由导航守卫控制访问权限" class="headerlink" title="路由导航守卫控制访问权限"></a>路由导航守卫控制访问权限</h5><p>如果用户没有登陆，但是直接通过URL访问特定页面，需要重新导航到登录页面。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// router/index.js</span><span class="token comment" spellcheck="true">// router.beforeEach 路由导航守卫（前置守卫，访问前的处理）</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// to 将要访问的路径</span>  <span class="token comment" spellcheck="true">// from 代表从哪一个路径跳转而来</span>  <span class="token comment" spellcheck="true">// next 是一个函数，表示放行 next() 放行 next('/login') 强制跳转</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">'/login'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 获取token</span>  <span class="token keyword">const</span> tokenStr <span class="token operator">=</span> window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果不存在token 即未登录 强制转跳登录界面</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tokenStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"请先登录！"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="退出功能实现原理"><a href="#退出功能实现原理" class="headerlink" title="退出功能实现原理"></a>退出功能实现原理</h5><p>基于 token 的方式实现退出功能比较简单，只需要销毁本地的 token 即可。这样，后续的请求就不会携带 token，必须重新登录生成一个新的 token 之后才能访问页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 清空sessionStorage中的token</span>            window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 编程式导航到 /login 路由</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h5 id="提交当前分支到码云，并合并子分支login到master主分支，然后提交主分支到码云"><a href="#提交当前分支到码云，并合并子分支login到master主分支，然后提交主分支到码云" class="headerlink" title="提交当前分支到码云，并合并子分支login到master主分支，然后提交主分支到码云"></a>提交当前分支到码云，并合并子分支login到master主分支，然后提交主分支到码云</h5><pre class=" language-shell"><code class="language-shell">git status 查看login分支上的改动git add .  添加改动到缓存区git commit -m "登录功能Login完成"  提交缓存区内容到本地仓库git push -u origin login 在码云创建login子分支并提交本地代码到远程仓库login中git checkout master  切换分支到 master 主分支git status 查看主分支是否有改动 无改动则执行下面命令git merge login 将子分支login合并到当前分支git push 提交主分支代码到远程仓库</code></pre><h4 id="主页布局"><a href="#主页布局" class="headerlink" title="主页布局"></a>主页布局</h4><h5 id="页面主体结构设计"><a href="#页面主体结构设计" class="headerlink" title="页面主体结构设计"></a>页面主体结构设计</h5><ul><li>头部样式修改 用 flex 布局</li><li>在el-aside组件中添加Navmenu导航菜单中的 侧栏 -&gt; 自定义颜色导航组件，并优化结构和样式</li><li>在  element.js 中注册对应组件</li></ul><h5 id="通过接口获取导航菜单数据"><a href="#通过接口获取导航菜单数据" class="headerlink" title="通过接口获取导航菜单数据"></a>通过接口获取导航菜单数据</h5><p>通过 axios 请求拦截器添加 token，保证拥有获取数据的权限，请求拦截器相当于请求前的预处理</p><p><img src="/images/image-20200302193850779.png" alt="config"></p><p>在 methods 中定义 getAsideList() 获取数据函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token function">getAsideList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> res <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"menus"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>asideListArry <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 created 生命周期函数中 调用上述函数</p><pre><code>created() {    this.getAsideList();  },</code></pre><h5 id="展示Users-vue"><a href="#展示Users-vue" class="headerlink" title="展示Users.vue"></a>展示Users.vue</h5><p>在 components -&gt; user -&gt; 创建 User.vue</p><p>将 User.vue 导入 router -&gt; index.js 中，并配置路由规则</p><h5 id="根据路由设置高亮导航元素"><a href="#根据路由设置高亮导航元素" class="headerlink" title="根据路由设置高亮导航元素"></a>根据路由设置高亮导航元素</h5><p>在 data 中定义 defaultActive 属性，记录当前展示的路由地址</p><p>将 defaultActive 记录的数据绑定到 el-menu 的 :default-active=”defaultActive”</p><p>在created中记录当前被点击导航的路由地址</p><p>在created中添加以下代码</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 每次刷新 重新渲染的时候设置当前路由为默认选中项</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultActive <span class="token operator">=</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>通过vue侦听器 侦听路由状态，改变同步改变 defaultActive 的值</p><h5 id="Users-vue-组件-视图布局"><a href="#Users-vue-组件-视图布局" class="headerlink" title="Users.vue 组件 视图布局"></a>Users.vue 组件 视图布局</h5><p>添加面包屑导航 el-breadcrumb</p><p>添加 卡片视图组件 el-card</p><p>在 el-card 中添加栅格布局容器</p><p>第一个栅格添加带按钮的搜索框 el-input</p><p>第二个栅格添加  添加用户 按钮</p><h5 id="axios-发送数据请求-获取用户数据"><a href="#axios-发送数据请求-获取用户数据" class="headerlink" title="axios 发送数据请求 获取用户数据"></a>axios 发送数据请求 获取用户数据</h5><p>用户列表的索引有两种解决方案</p><p>方案一：computed计算属性计算每页的起始索引，通过属性绑定，将计算属性return的值绑定给 index :index=”计算属性”</p><p>方案二：通过属性绑定，绑定index的重计算方法indexMethod  并在methods中定义处理方法</p><pre class=" language-js"><code class="language-js"><span class="token function">indexMethod</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>queryInfo<span class="token punctuation">.</span>pagesize<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queryInfo<span class="token punctuation">.</span>pagenum<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre><p>问题解决</p><p>密码校验规则需要优化</p><p>当用change表单校验的时候 不需要设置关闭事件也可以</p><p>待解决</p><p>每页显示数据多的情况下，限制组件内滚动</p><p>技能</p><p>利用插槽封装组件–2-27晚上</p>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FormData()的使用</title>
      <link href="/2020/02/11/formdata-de-shi-yong/"/>
      <url>/2020/02/11/formdata-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="FormData使用方法详解"><a href="#FormData使用方法详解" class="headerlink" title="FormData使用方法详解"></a>FormData使用方法详解</h1><p>FormData的主要用途有两个：**</p><h6 id="1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。"><a href="#1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。" class="headerlink" title="1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。"></a>1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。</h6><h6 id="2、异步上传文件"><a href="#2、异步上传文件" class="headerlink" title="2、异步上传文件"></a>2、异步上传文件</h6><h4 id="一、创建formData对象"><a href="#一、创建formData对象" class="headerlink" title="一、创建formData对象"></a>一、创建formData对象</h4><h6 id="1、创建一个空对象："><a href="#1、创建一个空对象：" class="headerlink" title="1、创建一个空对象："></a>1、创建一个空对象：</h6><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过FormData构造函数创建一个空对象</span><span class="token keyword">var</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以通过append()方法来追加数据</span>formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laotie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过get方法对值进行读取</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//laotie</span><span class="token comment" spellcheck="true">//通过set方法对值进行设置formdata.set("name","laoliu");</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//laoliu</span></code></pre><h6 id="2、通过表单对formData进行初始化"><a href="#2、通过表单对formData进行初始化" class="headerlink" title="2、通过表单对formData进行初始化"></a>2、通过表单对formData进行初始化</h6><p>创建表单：</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>广告名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xixi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>广告类别：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>轮播图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>轮播图底部广告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>热门回收广告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>优品精选广告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>添加<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>通过表单元素作为参数，实现对formData的初始化：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//获得表单按钮元素</span><span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为按钮添加点击事件</span>btn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//根据ID获得页面当中的form表单元素</span>    <span class="token keyword">var</span> form<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#advForm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将获得的表单元素作为参数，对formData进行初始化</span>    <span class="token keyword">var</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过get方法获得name为advName元素的value值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"advName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//xixi</span>    <span class="token comment" spellcheck="true">//通过get方法获得name为advType元素的value值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"advType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span><span class="token punctuation">}</span></code></pre><h4 id="二、操作方法"><a href="#二、操作方法" class="headerlink" title="二、操作方法"></a>二、操作方法</h4><h6 id="1、通过get-key-与getAll-key-来获取相对应的值"><a href="#1、通过get-key-与getAll-key-来获取相对应的值" class="headerlink" title="1、通过get(key)与getAll(key)来获取相对应的值"></a>1、通过get(key)与getAll(key)来获取相对应的值</h6><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取key为age的第一个值</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取key为age的所有值，返回值为数组类型</span>formdata<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="2、通过append-key-value-在数据末尾追加数据"><a href="#2、通过append-key-value-在数据末尾追加数据" class="headerlink" title="2、通过append(key,value)在数据末尾追加数据"></a>2、通过append(key,value)在数据末尾追加数据</h6><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过FormData构造函数创建一个空对象</span><span class="token keyword">var</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过append()方法在末尾追加key为name值为laoliu的数据</span>formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laoliu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过append()方法在末尾追加key为name值为laoli的数据</span>formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laoli"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过append()方法在末尾追加key为name值为laotie的数据</span>formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laotie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过get方法读取key为name的第一个值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//laoliu//通过getAll方法读取key为name的所有</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["laoliu", "laoli", "laotie"]</span></code></pre><h6 id="3、通过set-key-value-来设置修改数据"><a href="#3、通过set-key-value-来设置修改数据" class="headerlink" title="3、通过set(key, value)来设置修改数据"></a>3、通过set(key, value)来设置修改数据</h6><p>key的值不存在，会添加一条数据</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过FormData构造函数创建一个空对象</span><span class="token keyword">var</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果key的值不存在会为数据添加一个key为name值为laoliu的数据</span>formdata<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laoli"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过get方法读取key为name的第一个值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//laoli</span></code></pre><p>key的值存在，会修改对应的value值</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过FormData构造函数创建一个空对象</span><span class="token keyword">var</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过append()方法在末尾追加key为name值为laoliu的数据</span>formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laoliu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过append()方法在末尾追加key为name值为laoliu2的数据</span>formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laoliu2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过get方法读取key为name的第一个值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//laoliu</span><span class="token comment" spellcheck="true">//通过getAll方法读取key为name的所有值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["laoliu", "laoliu2"]</span><span class="token comment" spellcheck="true">//将存在的key为name的值修改为laoli</span>formdata<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laoli"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过get方法读取key为name的第一个值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//laoli</span><span class="token comment" spellcheck="true">//通过getAll方法读取key为name的所有值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//["laoli"]</span></code></pre><h6 id="4、通过has-key-来判断是否存在对应的key值"><a href="#4、通过has-key-来判断是否存在对应的key值" class="headerlink" title="4、通过has(key)来判断是否存在对应的key值"></a>4、通过has(key)来判断是否存在对应的key值</h6><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过FormData构造函数创建一个空对象</span><span class="token keyword">var</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过append()方法在末尾追加key为name值为laoliu的数据</span>formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laoliu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断是否包含key为name的数据</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true//判断是否包含key为age的数据</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span></code></pre><h6 id="5、通过delete-key-可以删除数据"><a href="#5、通过delete-key-可以删除数据" class="headerlink" title="5、通过delete(key)可以删除数据"></a>5、通过delete(key)可以删除数据</h6><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过FormData构造函数创建一个空对象</span><span class="token keyword">var</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过append()方法在末尾追加key为name值为laoliu的数据</span>formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"laoliu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//laoliu</span><span class="token comment" spellcheck="true">//删除key为name的值</span>formdata<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//null</span></code></pre><h4 id="三、通过XMLHttpRequest发送数据"><a href="#三、通过XMLHttpRequest发送数据" class="headerlink" title="三、通过XMLHttpRequest发送数据"></a>三、通过XMLHttpRequest发送数据</h4><p>创建表单：</p><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>广告名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xixi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>广告类别：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>轮播图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>轮播图底部广告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>热门回收广告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>优品精选广告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>广告图片：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advPic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>广告地址：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>广告排序：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderBy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>添加<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>发送数据：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> formdata<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"advForm"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">,</span><span class="token string">"http://127.0.0.1/adv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>formdata<span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//...</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>本文引自：<a href="https://www.cnblogs.com/clj2017/p/9321652.html" target="_blank" rel="noopener">https://www.cnblogs.com/clj2017/p/9321652.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>art-template模板引擎</title>
      <link href="/2020/02/06/art-template-mo-ban-yin-qing/"/>
      <url>/2020/02/06/art-template-mo-ban-yin-qing/</url>
      
        <content type="html"><![CDATA[<h2 id="ART-Template-模板引擎"><a href="#ART-Template-模板引擎" class="headerlink" title="ART-Template 模板引擎"></a>ART-Template 模板引擎</h2><p>为了解决哪些问题？</p><p>渲染模板</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/template-web.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>uname<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>        uname<span class="token punctuation">:</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">26</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'tpl'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>原文输出</p><p>我们希望模板引擎识别html标签的话，就可以进行原文输出</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/template-web.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 模板 要设置id template() 方法的第一个参数就是指定模板id从而指定渲染的模板 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span>姓名：<span class="token punctuation">{</span><span class="token punctuation">{</span>uname<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span>年龄：<span class="token punctuation">{</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>@ title<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// data为一个对象类型数据，template的第二个参数为对象类型，模板可以直接调用对象的属性</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>            uname<span class="token punctuation">:</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span> <span class="token string">"&lt;h2>我是标题&lt;/h2>"</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'tpl'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意写法 innerHTML not a function,是一个属性</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="images/image-20200206094014172.png" alt="image-20200206094014172"></p><p>判断</p><pre class=" language-伪代码"><code class="language-伪代码">if判断{{if 判断条件}}执行代码{{/if}}{{if 判断条件}}执行代码{{else}}执行代码{{/if}}{{if 判断条件}}执行代码{{else if 判断条件2}}if else 执行代码{{else}}else 执行代码{{/if}}</code></pre><p>循环</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 模板 要设置id template() 方法的第一个参数就是指定模板id从而指定渲染的模板 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token punctuation">{</span><span class="token punctuation">{</span>each data<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>索引：<span class="token punctuation">{</span><span class="token punctuation">{</span>$index<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>姓名：<span class="token punctuation">{</span><span class="token punctuation">{</span>$value<span class="token punctuation">.</span>uname<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>年龄：<span class="token punctuation">{</span><span class="token punctuation">{</span>$value<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>@ $value<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">/</span>each<span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// data为一个对象类型数据，template的第二个参数为对象类型，模板可以直接调用对象的属性</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        uname<span class="token punctuation">:</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">"&lt;h2>我是标题1&lt;/h2>"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        uname<span class="token punctuation">:</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">"&lt;h2>我是标题2&lt;/h2>"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        uname<span class="token punctuation">:</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">"&lt;h2>我是标题3&lt;/h2>"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'tpl'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>data<span class="token punctuation">:</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注意写法 innerHTML not a function,是一个属性</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="/images/image-20200206101025078.png" alt="image-20200206101025078"></p><p>向模板中导入变量</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>$imports.dataFormat(time)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'tpl'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h1 id="Template-variable"><a href="#Template-variable" class="headerlink" title="Template variable"></a>Template variable</h1><pre class=" language-js"><code class="language-js">template<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>imports</code></pre><p>Template can access global variable outside it and imported variable through <code>$imports</code>.</p><h2 id="Import-variable"><a href="#Import-variable" class="headerlink" title="Import variable"></a>Import variable</h2><pre class=" language-html"><code class="language-html">template.defaults.imports.log = console.log;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">$imports.log('hello</span> <span class="token attr-name">world')</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ART-Template 模板引擎 </tag>
            
            <tag> 页面渲染库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2020/01/11/ajax/"/>
      <url>/2020/01/11/ajax/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是Ajax？"><a href="#什么是Ajax？" class="headerlink" title="什么是Ajax？"></a>什么是Ajax？</h4><p>是浏览器提供的一套方法，是一门发送请求的技术，可以在不整体刷新网页的情况下向服务器发送请求，用来提升用户体验</p><h4 id="Ajax-的应用场景"><a href="#Ajax-的应用场景" class="headerlink" title="Ajax 的应用场景"></a>Ajax 的应用场景</h4><ol><li><p>页面上拉加载更多数据</p></li><li><p>列表数据无刷新分页</p></li><li><p>表单项离开焦点数据验证</p></li><li><p>搜索框提示文字下拉列表</p><p>以上是基础应用场景</p></li></ol><h4 id="Ajax-的运行环境"><a href="#Ajax-的运行环境" class="headerlink" title="Ajax 的运行环境"></a>Ajax 的运行环境</h4><p>Ajax技术需要在运行在<strong>网站环境</strong>中才能生效，所以需要在<strong>开启的服务中运行</strong>。如node服务 开启后 通过<strong>localhost:端口号/路由或者文件名</strong>访问  ！！！切勿直接双击打开文件执行，也不能通过IDE右键在浏览器打开，这两种方式都是打开的静态资源，不能访问服务，相应的请求也无法实现。</p><p>Ajax 的实现步骤</p><ol><li><p>开启node服务 express 第三方模块</p></li><li><p>开启静态资源访问  express 模块中开放的方法express。static(“开放的绝对路径”) —实质上是express模块导入了server-</p><p>中间件：拦截所有请求，交由express.static()处理请求</p><p>app.use(express.static(path.join(__dirname,”public”)))</p><p><strong>这样我们就可以通过localhost:3000/文件名 的方式访问HTML页面了</strong></p></li><li><p>app.listen(3000) 监听端口</p></li></ol><p>以下代码需要写在</p><ol><li><p>创建Ajax对象  （代替浏览器发送请求的代理人，因为浏览器发送请求，要么需要刷新，要么需要转跳，这不是我们期望的）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>告诉Ajax请求地址以及请求方式（告诉Ajax实例对象要想哪发送请求，用什么方式发送请求）</p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token string">'http://www.example.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>发送请求（get方式的请求，send中不用传参，post需要传请求的参数）</p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>获取服务器端给客户端的相应数据（响应需要一定时间，才能拿到响应的数据，当Ajax对象接收完成响应数据的时候，会触发xhr.onload()事件，所以将响应数据写在onload事件中）</p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token function">functon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>JSON对象的获取</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"zs"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// JSON字符串生成</span><span class="token keyword">let</span> strJ <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strJ<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// JSON字符串转JSON对象</span><span class="token keyword">let</span> objJ <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strJ<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objJ<span class="token punctuation">)</span></code></pre></li><li></li></ol><p>Ajax运行原理</p><p>浏览器端 —  服务器端  （开发人员不可控）</p><p>浏览器端   —  Ajax —  服务器端 （开发人员可控）</p><p>函数封装的建议</p><p>封装方法的时候，传入的参数可以是一个对象或者是一个数组，这样方便在赋值的时候区分各个参数的意义</p><pre><code>function ajax(options) {    let xhr = new XMLHttpRequest();    xhr.open(options.type,options.url);    xhr.send();    xhr.onload = () =&gt; {        options.success(xhr.responseText)    }}ajax({    type: &quot;get&quot;,    url: &quot;http://localhost:3000/first&quot;,    success(data) {        console.log(data)    },    data: {        name: &quot;COder Rat&quot;,        age: 25    }})</code></pre><p>请求参数要考虑的问题</p><ol><li><p>请求参数位置的问题</p><p>将请求参数传递到Ajax函数内部，在函数内部根据请求方式的不同，参数的添加位置不同</p><p>get 放在请求地址后面</p><p>post 放在send方法中</p></li><li><p>请求参数格式的问题</p><p>application/x-www-form-urlencoded</p><p>​    参数名称 </p></li></ol><blockquote><p>.后面不能加变量 a.b —&gt; a[b] </p></blockquote><h4 id="跨域请求的解决方案"><a href="#跨域请求的解决方案" class="headerlink" title="跨域请求的解决方案"></a>跨域请求的解决方案</h4><ol><li>通过script的src属性 进行请求，绕过浏览器的同源策略</li><li>设置服务器允许跨域访问</li><li>通过自身服务器，访问目标服务器</li></ol><h4 id="cookie-session"><a href="#cookie-session" class="headerlink" title="cookie session"></a>cookie session</h4><p>是一个容器，保存到客户端或服务器端一些客户信息等等</p><p>在http协议中规定，客户端与服务器端之间是无状态性的</p><h3 id="弄清接口文档-amp-后端接口之间的联系"><a href="#弄清接口文档-amp-后端接口之间的联系" class="headerlink" title="弄清接口文档 &amp; 后端接口之间的联系"></a>弄清接口文档 &amp; 后端接口之间的联系</h3><hr><p>以上为原生ajax的使用 目前JQuery提供的$.ajax()是用的比较多的，功能更加强大，使用更加便捷。</p><hr><h3 id="ajax的原理："><a href="#ajax的原理：" class="headerlink" title="ajax的原理："></a>ajax的原理：</h3><p> 通过XMLHttpRequest()对象 向服务器发出 异步 请求；从服务器获取数据 通过js Dom操作更新页面<br> 异步：向服务器发送请求 不阻碍用户的操作  实现无刷新数据更新</p><h3 id="Ajax的优点："><a href="#Ajax的优点：" class="headerlink" title="Ajax的优点："></a>Ajax的优点：</h3><p> 1、最大的一点是能在不刷新整个页面的情况下维持与服务器通信 这使得web应用程序迅捷的响应用户交互，<br> 在页面内与服务器通信给用户的体验非常好。<br> 2、使用异步方式与服务器通信，不需要打断用户的操作，具有更加迅速的响应能力。<br> 3、可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，<br> 节约空间和宽带租用成本。并且减轻服务器的负担，ajax的原则是“按需取数据”，可以最大程度的减少冗余请求，<br> 和响应对服务器造成的负担。<br> 4、基于标准化的并被广泛支持的技术，不需要下载插件或者小程序 但需要客户允许JavaScript在浏览器上执行。<br> 5.界面与应用分离 Ajax使得界面与应用分离，也就是数据与呈现分离 有利于分工合作。</p><h3 id="Ajax的缺点："><a href="#Ajax的缺点：" class="headerlink" title="Ajax的缺点："></a>Ajax的缺点：</h3><p> 1、ajax不支持浏览器back按钮。在动态更新页面的情况下，用户无法回到前一页的页面状态，因为浏览器仅能记忆历史纪录中的静态页面<br> 2、安全问题 AJAX暴露了与服务器交互的细节，就如同对企业数据建立了一个直接通道。<br> 这使得开发者在不经意间会暴露比以前更多的数据和服务器逻辑。。<br> 3、对搜索引擎的支持比较弱。<br> 4、破坏了程序的异常机制。<br> 5、不容易调试。<br> 6.不能很好地支持移动设备 例如手机APP;<br> 7.客户端肥大，太多客户段代码造成开发上的成本</p><h3 id="Ajax的转换"><a href="#Ajax的转换" class="headerlink" title="Ajax的转换"></a>Ajax的转换</h3><p> 通过Ajax的函数封装，获取到这个json文件 通过json.parse()或 jaon.stringify 的方法。<br> 将这个json文件解析成数组或字符串，然后循环遍历获取<br> 例如：<br> //obj–&gt;string json字符串 JSON.stringify();<br> //string json字符串–&gt;obj JSON.parse();</p><h3 id="Ajax请求数据的过程-步骤"><a href="#Ajax请求数据的过程-步骤" class="headerlink" title="Ajax请求数据的过程  步骤"></a>Ajax请求数据的过程  步骤</h3><p> 1.创建Ajax对象<br> 创建一个能够发数据的对象；—&gt;XMLHttpRequest  //数据请求协议<br> 创建一个请求对象  new XMLHttpRequest();  兼容所有浏览器<br> new XMLHttpRequest();<br> new ActiveXObject(“mircosoft.XMLHTTP”);//只兼容IE6浏览器使用<br> 2.打开请求<br> 发送数据的方式 向服务器传输数据  open(“get/post”,”提交的地址”,”是否异步”);<br> 3.发送请求<br> (1)、get 在网址栏   域名 /?text=123&amp;pass=12135<br> 区别：get 方式  提交数据时  数据 url/?名称=数据&amp;名称=数据<br> 通过send();提交数据<br> (2)、post方法是提交时 设置请球头  声明数据类型<br> setRequestHeader(‘content-type’,’application/x-www-form-urlencoded’)<br> 通过send(data);提交数据<br> 4.等待服务器，返回内容<br> XMLHttpRequest 对象属性描述<br> onreadystatechange状态改变的事件触发器，每个状态改变时都会触发这个事件处理器，通常会调用一个JavaScript函数<br> readyState<br> 请求的状态。有5个可取值：<br> 0 = 未初始化，<br> 1 = 正在加载，<br> 2 = 已加载，<br> 3 = 交互中，<br> 4 = 完成<br> responseText    服务器的响应，返回数据的文本。请求的数据文本  —–&gt;string<br> status  服务器的HTTP状态码（如：404 = “文件末找到” 、200 =”成功” ，等等）<br> statusText  服务器返回的状态文本信息 ，HTTP状态码的相应文本（OK或Not Found（未找到）等等）<br> status:   服务器的状态码<br> 200  服务器请求成功<br> 404  服务器请求失败<br> 302  307  服务器请求异常</p><h3 id="post-get-服务器获取和提交方式的区别"><a href="#post-get-服务器获取和提交方式的区别" class="headerlink" title="post get  服务器获取和提交方式的区别"></a>post get  服务器获取和提交方式的区别</h3><p> get方式：get请求数据时  是将数据暴露在网址中 /?user=value&amp;pass=value&amp;时间毫秒数<br> 1-提交数据的大小受限制 比较小<br> 2-数据提交相对不安全  提交的数据在网址栏中通过字符串拼接发送<br> 3-有缓存问题  需要使用不断改变字符 后缀 来解决  添加：”&amp;”+new Date().getTime();<br> 4-有些浏览器不能提交中文数据  encoddeURI();解决中文      ie不能  encodeURI(“你好”)<br> post方式：post请求数据 是通过请求的域名<br> 1-理论上大小不受限制 可设置<br> 2-相对于get方式比较安全<br> 3-没有缓存问题<br> 4-可以提交中文数据<br> 5-提交数据时需要 请求头 声明请求数据类型<br> 6-提交的数据要通过send()传入参数提交数据<br> 7-content-type :提交的数据格式 application/x-www-form-urlencoded</p><h3 id="Jsonp的原理和用法"><a href="#Jsonp的原理和用法" class="headerlink" title="Jsonp的原理和用法"></a>Jsonp的原理和用法</h3><p> 1-jsonp是一种解决解决方案<br> 2-Jsonp就是跨域请求数据，通过动态创建script标签，<br> 然后通过标签的src属性 获取 js文件中的程序 该程序就是一个回调函数 参数是请求<br> 其他站点的资源文件；所以要预先定义好回调函数，不是ajax技术Jsonp的原理和用法<br> 1-jsonp是一种解决解决方案<br> 2-Jsonp就是跨域请求数据，通过动态创建script标签，<br> 然后通过标签的src属性 获取 js文件中的程序 该程序就是一个回调函数 参数是请求<br> 其他站点的资源文件；所以要预先定义好回调函数，不是ajax技术</p><h3 id="AJAX封装与调用"><a href="#AJAX封装与调用" class="headerlink" title="AJAX封装与调用"></a>AJAX封装与调用</h3><h4 id="AJAX封装"><a href="#AJAX封装" class="headerlink" title="AJAX封装"></a>AJAX封装</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//1.创建ajax对象</span>                <span class="token keyword">var</span> xhr                <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span><span class="token punctuation">{</span>           支持此对象                    xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//IE7以上浏览器</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//只有IE6支持此对象</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//2.打开请求</span>                <span class="token comment" spellcheck="true">//第一个参数表示请求方式,值为get/post,是字符串</span>                <span class="token comment" spellcheck="true">//第二个参数表示请求的地址</span>                <span class="token comment" spellcheck="true">//第三个参数是布尔值,默认是true表示异步,false表示同步</span>                xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>type<span class="token punctuation">,</span>obj<span class="token punctuation">.</span>url<span class="token punctuation">,</span>obj<span class="token punctuation">.</span><span class="token keyword">async</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//3.判断请求方式get/post，发送数据(post方式必须发送请求头)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">"get"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">"post"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//设置请求头</span>                    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">toUrl</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//name=1&amp;name2=2</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//4.操作返回的数据</span>                xhr<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//1.readyState属性:ajax工作状态</span>                        <span class="token comment" spellcheck="true">//2.每当readyState的值发生改变时,就会触发         onreadystatechange事件</span>                        <span class="token comment" spellcheck="true">//存有XMLHttpRequest的状态.从0-4发生变化</span>                        <span class="token comment" spellcheck="true">//0:请求未初始化</span>                        <span class="token comment" spellcheck="true">//1:服务器连接已建立</span>                        <span class="token comment" spellcheck="true">//2:请求已接收</span>                        <span class="token comment" spellcheck="true">//3:请求处理中</span>                        <span class="token comment" spellcheck="true">//4:请求已完成,且响应已就绪</span>                        <span class="token comment" spellcheck="true">//http状态码</span>                        <span class="token comment" spellcheck="true">//200代表请求成功</span>                        <span class="token comment" spellcheck="true">//403禁止访问</span>                        <span class="token comment" spellcheck="true">//404文件未找到</span>                        <span class="token comment" spellcheck="true">//500服务器错误</span>                        <span class="token comment" spellcheck="true">//对responseText进行json转化</span>                        <span class="token keyword">var</span> data<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//把转化好的数据当做参数返回给obj.success函数</span>                        obj<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//对obj.data进行转化，把对象转化成url形式</span>                <span class="token keyword">function</span> <span class="token function">toUrl</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>                        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span></code></pre><h4 id="ajax调用"><a href="#ajax调用" class="headerlink" title="ajax调用"></a>ajax调用</h4><pre class=" language-php"><code class="language-php"><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                type<span class="token punctuation">:</span><span class="token string">"post或者get"</span><span class="token punctuation">,</span>                url<span class="token punctuation">:</span><span class="token string">"地址"</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//加post的话用到data</span>                <span class="token comment" spellcheck="true">//get的话直接用&amp;拼接  </span>                data<span class="token punctuation">:</span><span class="token punctuation">{</span>                        key<span class="token punctuation">:</span>"c0bf48603646fc9a7c831342cb34a9b<span class="token punctuation">,</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                async<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>                          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>//直接返回调用的对象<br> //请求方式type用get/post<br> //get方式直接拼接key必选项<br> //post方式直接传入data对象再设置key必选项</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常见使用配置及流程</title>
      <link href="/2020/01/09/git-chang-jian-shi-yong-pei-zhi-ji-liu-cheng/"/>
      <url>/2020/01/09/git-chang-jian-shi-yong-pei-zhi-ji-liu-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>github提供了github pages服务，可以进行个人博客搭建，使用GitHub托管的网站，全是静态文件，访问的速度非常快（但是由于github是国外服务器，所以带宽速度不够的话，还是请求传输不快），github pages不需要购买服务器，后台管理，相当于本地管理，通过git工具和github进行同步更新，而且基于github的版本管理，可以很方便地进行版本的恢复。博客的内容，可以轻松打包、发布、迁移到其他平台。也可以轻松绑定自己的域名。 </p></blockquote><p> 为方便自己后期使用，简单做一些mark</p><h4 id="github的使用"><a href="#github的使用" class="headerlink" title="github的使用"></a>github的使用</h4><ol><li><p>github注册：</p><p><a href="http://www.github.com" target="_blank" rel="noopener">www.github.com</a></p><p>点击Sign up 可以进行github账号的注册</p><p>点击Sign in 可以进行github的登录</p><p>注册流程不再赘述 </p></li></ol><h4 id="github更新或者上传整个项目"><a href="#github更新或者上传整个项目" class="headerlink" title="github更新或者上传整个项目"></a>github更新或者上传整个项目</h4><ol><li>本地新建文件夹 作为git初始化根目录</li><li>进入此文件夹 右键  git bash here<pre class=" language-git"><code class="language-git">// 初始化git目录，会在根目录下创建.git文件夹，里面包含git的基本配置文件git init// git远程添加源点为：别名 origin == https://github.com/github名/项目文件夹.gitgit remote add origin https://github.com/github名/项目文件夹.git// 保持master分支与源点同步git pull origin master// ...</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub基本使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级</title>
      <link href="/2019/12/24/javascript-gao-ji/"/>
      <url>/2019/12/24/javascript-gao-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="什么是ES6"></a>什么是ES6</h3><p>ES的全称是ECMAScript，它是由ECMA国际标准化组织指定的<strong>一项脚本语言的标准化规范</strong>。</p><table><thead><tr><th>年份</th><th>版本</th></tr></thead><tbody><tr><td>2015年6月</td><td>ES2015</td></tr><tr><td>2016年6月</td><td>ES2016</td></tr><tr><td>2017年6月</td><td>ES2017</td></tr><tr><td>2018年6月</td><td>ES2018</td></tr><tr><td>…</td><td>ES年号</td></tr></tbody></table><p>ES6实际上是泛指ESMAScript2015及以后的版本</p><h3 id="为什么使用ES6"><a href="#为什么使用ES6" class="headerlink" title="为什么使用ES6"></a>为什么使用ES6</h3><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript语言本身也有一些令人不满意的地方</p><ul><li>变量提升特性增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li></ul><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>ES6中新增的用于声明变量的关键字。</p><ul><li><p>let声明的变量只在所处的块级有效</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// a is not defined</span><span class="token comment" spellcheck="true">//防止循环变量变成全局变量</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>不存在变量提升</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a is not defined</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></code></pre></li><li><p>const声明的是常量具有块级作用域</p></li><li><p>常量就是值（内存地址），不能变化的量</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//20</span>       <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a is not defined</span></code></pre><p>const 声明常量时 必须要赋初始值，因为他是固定了内存地址的，不能修改的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["a","b"] 被允许，地址未被改变</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Assignment to constant variable 此时报错，不允许赋值操作，因为改变了存储地址</span><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.14</span>；PI <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Assignment to constant variable 此时报错，不允许赋值操作</span></code></pre><p>对于基本数据类型：值改变地址就改变了，不被允许；</p><p>对于复杂数据类型，更改元素的值，不会改变指向的地址，所以可以对其内部的元素进行赋值，但是直接赋值的话就会改变复杂数据类型的地址指向，所以不被允许。</p></li></ul><h3 id="let、const、var的区别"><a href="#let、const、var的区别" class="headerlink" title="let、const、var的区别"></a>let、const、var的区别</h3><ol><li><p>使用var声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象。</p></li><li><p>使用let声明的变量，其作用域为该语句所在的代码块内，不存在变量提升。</p></li><li><p>使用const声明的是常量，在后面出现的代码中不能再修改该变量的值。</p><table><thead><tr><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>函数级作用域</td><td>块级作用域</td><td>块级作用域</td></tr><tr><td>变量提升</td><td>不存在变量提升</td><td>不存在变量提升</td></tr><tr><td>值可以更改</td><td>值可以更改</td><td>值不可以更改</td></tr></tbody></table><p>如果所使用的值不需要变化，使用const效率会更高，因为JavaScript引擎不需要实时监测值的变化，操作内存。</p></li></ol><p>解构赋值</p><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值</p><p>数组解构允许我们按照一一对应的关系从数组中提取值，将提取到的值赋值给变量</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*a = 1;b = 2;c = 3;*/</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>uname<span class="token punctuation">:</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span>uname<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span>uname<span class="token punctuation">:</span>myName<span class="token punctuation">,</span>age<span class="token punctuation">:</span>myAge<span class="token punctuation">,</span>sex<span class="token punctuation">:</span>mySex<span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*myName = "Coder Rat";myAge = 25;Mysex = "男";*/</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>uname<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span></code></pre><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>在箭头函数中 如果函数体中只有一句代码，并且代码的执行结果就是函数的返回值 函数的花括号可以省略</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><p>如果参数只有一个</p><p>面试题</p><p>Set方式实现数组去重</p><p>try…catch 异常捕获机制  不能捕获异步任务出现的错误</p><p>如果书写在try方法内的代码出现错误，会被catch方法捕获到，并且将错误信息保存到catch方法的第一个参数里，可以让我们的程序即便出现错误，还能继续往下执行。</p><p>finally 最终都会执行的 </p><p>在try内可以throw “自定义出错信息” 手动抛出异常 会被catch捕获异常</p><p>也可以做数据验证</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 请说出var const 和let在申明变量时候的区别？</span><span class="token comment" spellcheck="true">// var let const 都能用来声明变量，var 声明的变量 没有块级作用域 存在变量提升</span><span class="token comment" spellcheck="true">// const let 声明的变量都具有块级作用域 只能在块级作用域中进行访问 不存在变量提升 </span><span class="token comment" spellcheck="true">// const 声明的变量的内存地址是不可变的，并且需要在声明的时候就必须要赋值 var\let不需要在声明的时候赋值</span><span class="token comment" spellcheck="true">// 请书写一个箭头函数，返回1到100的数字的和</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">let</span> sumA <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> item<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sumA</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 请描述箭头函数和普通的函数的this指向的区别</span><span class="token comment" spellcheck="true">//箭头函数this指向的是当前作用域的挂载对象，普通函数中的this指向当前函数的最终调用者</span><span class="token comment" spellcheck="true">// 请描述模板字符串的用法，请自行书写一个案例，要求在模板字符串中调用一个函数</span><span class="token keyword">let</span> demo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"我是模板字符串中函数的返回值"</span><span class="token punctuation">}</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`模板字符串用法</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 请用扩展字符串的方式，把两个数组合并成一个数组</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">,</span><span class="token operator">...</span>arr1<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 请用Set数据结构，来实现数组去重</span><span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript高级（ES6语法） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js基础</title>
      <link href="/2019/12/23/node-js-ji-chu/"/>
      <url>/2019/12/23/node-js-ji-chu/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么需要学习服务器开发？"><a href="#为什么需要学习服务器开发？" class="headerlink" title="为什么需要学习服务器开发？"></a>为什么需要学习服务器开发？</h3><ul><li><p>能够和后端人员更好配合</p></li><li><p>网站<strong>业务逻辑前置</strong>，学习前端技术需要后端技术支持（Ajax）</p></li><li><p>实现网站的业务逻辑</p></li><li><p>配合数据库处理一些数据请求</p></li></ul><h3 id="为什么选择Node"><a href="#为什么选择Node" class="headerlink" title="为什么选择Node"></a>为什么选择Node</h3><ul><li><p>使用JavaScript语法开发后端应用</p></li><li><p>一些公司要求前端工程师掌握Node开发</p></li><li><p>Node的生态系统活跃，有大量开源库可以使用</p></li><li><p>前端开发工具多基于Node开发（webpack）</p></li></ul><h3 id="Node是什么？"><a href="#Node是什么？" class="headerlink" title="Node是什么？"></a>Node是什么？</h3><p>Node是基于Chrome V8引擎的JavaScript代码<strong>运行环境</strong>（V8是 JavaScript 解释器）</p><p><strong>JavaScript运行环境</strong></p><p> 和 浏览器一样 Node 也是 JavaScript 代码的运行环境。</p><p><strong>Node运行环境安装失败的解决办法</strong></p><ul><li><p>错误代码 2502 2503 失败原因：系统权限不足</p><ul><li><p>解决办法</p><p>以管理员身份运行powershell</p><p>执行命令 msiexec 安装包位置+安装包名称</p></li></ul></li><li><p>安装成功 但是执行node -v 命令时报错</p><ul><li><p>解决办法</p><p>将nodejs的安装目录 加入系统变量path中</p><p><strong>环境变量的path的作用：</strong></p><p>当输入命令行命令的时候，命令行工具默认先查找当前所在目录查找对应可执行文件（命令前缀.exe），找不到的话，就会在系统环境变量path中查找，在对应目录中查找对应的可执行文件。</p></li></ul></li></ul><hr><h3 id="Node-js的组成"><a href="#Node-js的组成" class="headerlink" title="Node.js的组成"></a>Node.js的组成</h3><ul><li>JavaScript 由 ECMAScript，DOM，BOM 三个部分组成</li><li>Node.js 由ECMAScript及Node 环境提供的一些附加API组成。包括文件、网络、路径等一些更加强大的API。</li></ul><p><img src="/images/image-20200102185736248.png" alt="image-20200102185736248"></p><h3 id="Node-js全局对象–global"><a href="#Node-js全局对象–global" class="headerlink" title="Node.js全局对象–global"></a>Node.js全局对象–global</h3><p>和JavaScript中的window对象类似，global是 node.js 的内置对象，是 node.js 的顶层（全局）对象，所有的属性和方法都挂载在global上。</p><p><img src="/images/image-20200102192906972.png" alt="image-20200102192906972"></p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">var</span> global<span class="token punctuation">:</span> NodeJS<span class="token punctuation">.</span>Global<span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Global</span> <span class="token punctuation">{</span>    <span class="token keyword">Array</span><span class="token punctuation">:</span> <span class="token keyword">typeof</span> <span class="token keyword">Array</span><span class="token punctuation">;</span>    ArrayBuffer<span class="token punctuation">:</span> <span class="token keyword">typeof</span> ArrayBuffer<span class="token punctuation">;</span>    Boolean<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Boolean<span class="token punctuation">;</span>    Buffer<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Buffer<span class="token punctuation">;</span>    DataView<span class="token punctuation">:</span> <span class="token keyword">typeof</span> DataView<span class="token punctuation">;</span>    Date<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Date<span class="token punctuation">;</span>    Error<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Error<span class="token punctuation">;</span>    EvalError<span class="token punctuation">:</span> <span class="token keyword">typeof</span> EvalError<span class="token punctuation">;</span>    Float32Array<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Float32Array<span class="token punctuation">;</span>    Float64Array<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Float64Array<span class="token punctuation">;</span>    <span class="token keyword">Function</span><span class="token punctuation">:</span> <span class="token keyword">typeof</span> <span class="token keyword">Function</span><span class="token punctuation">;</span>    GLOBAL<span class="token punctuation">:</span> Global<span class="token punctuation">;</span>    <span class="token number">Infinity</span><span class="token punctuation">:</span> <span class="token keyword">typeof</span> <span class="token number">Infinity</span><span class="token punctuation">;</span>    Int16Array<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Int16Array<span class="token punctuation">;</span>    Int32Array<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Int32Array<span class="token punctuation">;</span>    Int8Array<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Int8Array<span class="token punctuation">;</span>    Intl<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Intl<span class="token punctuation">;</span>    JSON<span class="token punctuation">:</span> <span class="token keyword">typeof</span> JSON<span class="token punctuation">;</span>    Map<span class="token punctuation">:</span> MapConstructor<span class="token punctuation">;</span>    Math<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Math<span class="token punctuation">;</span>    <span class="token number">NaN</span><span class="token punctuation">:</span> <span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">;</span>    Number<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Number<span class="token punctuation">;</span>    Object<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Object<span class="token punctuation">;</span>    Promise<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Promise<span class="token punctuation">;</span>    RangeError<span class="token punctuation">:</span> <span class="token keyword">typeof</span> RangeError<span class="token punctuation">;</span>    ReferenceError<span class="token punctuation">:</span> <span class="token keyword">typeof</span> ReferenceError<span class="token punctuation">;</span>    RegExp<span class="token punctuation">:</span> <span class="token keyword">typeof</span> RegExp<span class="token punctuation">;</span>    Set<span class="token punctuation">:</span> SetConstructor<span class="token punctuation">;</span>    String<span class="token punctuation">:</span> <span class="token keyword">typeof</span> String<span class="token punctuation">;</span>    Symbol<span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">;</span>    SyntaxError<span class="token punctuation">:</span> <span class="token keyword">typeof</span> SyntaxError<span class="token punctuation">;</span>    TypeError<span class="token punctuation">:</span> <span class="token keyword">typeof</span> TypeError<span class="token punctuation">;</span>    URIError<span class="token punctuation">:</span> <span class="token keyword">typeof</span> URIError<span class="token punctuation">;</span>    Uint16Array<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Uint16Array<span class="token punctuation">;</span>    Uint32Array<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Uint32Array<span class="token punctuation">;</span>    Uint8Array<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Uint8Array<span class="token punctuation">;</span>    Uint8ClampedArray<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Uint8ClampedArray<span class="token punctuation">;</span>    WeakMap<span class="token punctuation">:</span> WeakMapConstructor<span class="token punctuation">;</span>    WeakSet<span class="token punctuation">:</span> WeakSetConstructor<span class="token punctuation">;</span>    clearImmediate<span class="token punctuation">:</span> <span class="token punctuation">(</span>immediateId<span class="token punctuation">:</span> Immediate<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span>    clearInterval<span class="token punctuation">:</span> <span class="token punctuation">(</span>intervalId<span class="token punctuation">:</span> Timeout<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span>    clearTimeout<span class="token punctuation">:</span> <span class="token punctuation">(</span>timeoutId<span class="token punctuation">:</span> Timeout<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span>    console<span class="token punctuation">:</span> <span class="token keyword">typeof</span> console<span class="token punctuation">;</span>    decodeURI<span class="token punctuation">:</span> <span class="token keyword">typeof</span> decodeURI<span class="token punctuation">;</span>    decodeURIComponent<span class="token punctuation">:</span> <span class="token keyword">typeof</span> decodeURIComponent<span class="token punctuation">;</span>    encodeURI<span class="token punctuation">:</span> <span class="token keyword">typeof</span> encodeURI<span class="token punctuation">;</span>    encodeURIComponent<span class="token punctuation">:</span> <span class="token keyword">typeof</span> encodeURIComponent<span class="token punctuation">;</span>    escape<span class="token punctuation">:</span> <span class="token punctuation">(</span>str<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span><span class="token punctuation">;</span>    eval<span class="token punctuation">:</span> <span class="token keyword">typeof</span> eval<span class="token punctuation">;</span>    global<span class="token punctuation">:</span> Global<span class="token punctuation">;</span>    isFinite<span class="token punctuation">:</span> <span class="token keyword">typeof</span> isFinite<span class="token punctuation">;</span>    isNaN<span class="token punctuation">:</span> <span class="token keyword">typeof</span> isNaN<span class="token punctuation">;</span>    parseFloat<span class="token punctuation">:</span> <span class="token keyword">typeof</span> parseFloat<span class="token punctuation">;</span>    parseInt<span class="token punctuation">:</span> <span class="token keyword">typeof</span> parseInt<span class="token punctuation">;</span>    process<span class="token punctuation">:</span> Process<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * @deprecated Use `global`.    */</span>    root<span class="token punctuation">:</span> Global<span class="token punctuation">;</span>    setImmediate<span class="token punctuation">:</span> <span class="token punctuation">(</span>callback<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Immediate<span class="token punctuation">;</span>    setInterval<span class="token punctuation">:</span> <span class="token punctuation">(</span>callback<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">,</span> ms<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Timeout<span class="token punctuation">;</span>    setTimeout<span class="token punctuation">:</span> <span class="token punctuation">(</span>callback<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">,</span> ms<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Timeout<span class="token punctuation">;</span>    queueMicrotask<span class="token punctuation">:</span> <span class="token keyword">typeof</span> queueMicrotask<span class="token punctuation">;</span>    undefined<span class="token punctuation">:</span> <span class="token keyword">typeof</span> undefined<span class="token punctuation">;</span>    unescape<span class="token punctuation">:</span> <span class="token punctuation">(</span>str<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span><span class="token punctuation">;</span>    gc<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span>    v8debug<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="Node-js模块化开发"><a href="#Node-js模块化开发" class="headerlink" title="Node.js模块化开发"></a>Node.js模块化开发</h3><h4 id="模块化开发（软件的开发方式）"><a href="#模块化开发（软件的开发方式）" class="headerlink" title="模块化开发（软件的开发方式）"></a>模块化开发（软件的开发方式）</h4><p>软件中的模块化开发：一个功能就是一个模块，多个模块可以组成完整应用，抽离一个模块不会影响其他功能的运行。</p><p><img src="/images/image-20191229202835251.png" alt="image-20191229202835251"></p><h4 id="JavaScript开发的弊端"><a href="#JavaScript开发的弊端" class="headerlink" title="JavaScript开发的弊端"></a>JavaScript开发的弊端</h4><ol><li>文件依赖不明确问题</li><li>命名冲突（存在变量覆盖等问题）</li></ol><h4 id="Node-js中的模块化开发规范"><a href="#Node-js中的模块化开发规范" class="headerlink" title="Node.js中的模块化开发规范"></a>Node.js中的模块化开发规范</h4><p><strong>Node.js规定：一个JavaScript文件就是一个模块，模块内部定义的变量和函数默认情况下在外部无法得到。</strong></p><p><strong>模块内部可以使用exports/module.exports对象对内部成员进行导出，在其他模块中，如果需要依赖此模块，访问其内部导出的成员（函数/变量），可以在其他模块使用require方法进行此模块的导入，从而访问此模块导出的内部成员</strong>（可以解决模块与模块之间的依赖不明确问题，模块之间的依赖关系，取决于是否导入其他模块）</p><p>require(‘modulePath’)的返回值，实质上是一个对象,等价于所引用模块的exports对象。</p><p><img src="/images/image-20191230103113231.png" alt="image-20191230103113231"></p><p>A模块</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">"我是A模块中变量a的值"</span><span class="token punctuation">;</span><span class="token keyword">let</span> fnA <span class="token operator">=</span> param <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> objA <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"coder rat"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>    hobbies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"codding"</span><span class="token punctuation">,</span><span class="token string">"travelling"</span><span class="token punctuation">,</span><span class="token string">"sleep"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token function">fnA</span><span class="token punctuation">(</span><span class="token string">"Coder Rat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>fnA <span class="token operator">=</span> fnA<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>moduleA <span class="token operator">=</span> exports<span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>objA <span class="token operator">=</span> objA<span class="token punctuation">;</span></code></pre><p><img src="/images/image-20200102202151386.png" alt="image-20200102202151386"></p><p>由上图可以看出：module对象中包含exports属性，此属性的值为对象，包含了使用exports添加的所有的属性。</p><p>并且证明了：exports === module.exports === 导入模块中的require(‘./moduleA’)即导入模块的返回值</p><blockquote><p><strong>注意点：</strong> require()在导入模块过程中，会执行引入模块中的代码，如果被引用的模块中包含执行代码，则执行require()的时候被调用的模块中可执行的函数会整体执行。返回值为exports对象。</p></blockquote><p>B模块</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./moduleA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./moduleA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./moduleA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./moduleA"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./moduleA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>moduleA<span class="token punctuation">)</span><span class="token punctuation">;</span>moduleA<span class="token punctuation">.</span><span class="token function">fnA</span><span class="token punctuation">(</span><span class="token string">'我是调用moduleA中的fnA函数执行的参数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/images/image-20200102211947122.png" alt="image-20200102211947122"></p><p>由上图可以看出：require(“./moduleA”);执行的时候，就输出了Coder Rat，而且后面再有require(“./moduleA”)的执行，也不会重复，原因是module.loaded === true</p><blockquote><p>追附官方文档解释</p><p>模块加载的缓存机制</p><p>模块在第一次加载后会被缓存。 这也意味着（类似其他缓存机制）如果每次调用 <code>require(&#39;foo&#39;)</code> 都解析到同一文件，则返回相同的对象。</p><p>多次调用 <code>require(foo)</code> 不会导致模块的代码被执行多次。 这是一个重要的特性。 借助它, 可以返回“部分完成”的对象，从而允许加载依赖的依赖, 即使它们会导致循环依赖。</p><p>如果想要多次执行一个模块，可以导出一个函数，然后调用该函数。</p><p>拓展：</p><h2 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h2><p>Node.js 有些模块会被编译成二进制。 这些模块别的地方有更详细的描述。</p><p>核心模块定义在 Node.js 源代码的 <code>lib/</code> 目录下。</p><p><code>require()</code> 总是会优先加载核心模块。 例如， <code>require(&#39;http&#39;)</code> 始终返回内置的 HTTP 模块，即使有同名文件。</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>当循环调用 <code>require()</code> 时，一个模块可能在未完成执行时被返回。</p><p>例如以下情况:</p><p><code>a.js</code>:</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a 开始'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 上述副本 exports.done = false</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行b.js </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在 a 中，b.done = %j'</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a 结束'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>b.js</code>:</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b 开始'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a.js未完成加载，执行打印'a 开始'，并返回副本对象 exports</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在 b 中，a.done = %j'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时a.done为副本对象exports.done = false </span>exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b 结束'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印 执行完继续加载a.js</span></code></pre><p><code>main.js</code>:</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'main 开始'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在 main 中，a.done=%j，b.done=%j'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>done<span class="token punctuation">,</span> b<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// %d 为输出整数，%s 为输出字符串，%j 为输出 JSON 的字符串格式。 如把exports.done = false 改为exports.done = {a : '我是对象'}，打印结果就为 {"a":"我是对象"}</span></code></pre><p>当 <code>main.js</code> 加载 <code>a.js</code> 时， <code>a.js</code> 又加载 <code>b.js</code>。 此时， <code>b.js</code> 会尝试去加载 <code>a.js</code>。 为了防止无限的循环，会返回一个 <code>a.js</code> 的 <code>exports</code> 对象的 <strong>未完成的副本</strong> 给 <code>b.js</code> 模块。 然后 <code>b.js</code> 完成加载，并将 <code>exports</code> 对象提供给 <code>a.js</code> 模块。</p><p>当 <code>main.js</code> 加载这两个模块时，它们都已经完成加载。 因此，该程序的输出会是：</p><pre class=" language-console"><code class="language-console">$ node main.jsmain 开始a 开始b 开始在 b 中，a.done = falseb 结束在 a 中，b.done = truea 结束在 main 中，a.done=true，b.done=true</code></pre><p>需要仔细的规划, 以允许循环模块依赖在应用程序内正常工作.</p></blockquote><p><img src="/images/image-20200102212908654.png" alt="image-20200102212908654"></p><p>exports是module.exports的别名（地址引用关系），导出对象最终以module.exports为准，例如以下代码，如果为A模块代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> greeting <span class="token operator">=</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>greeting <span class="token operator">=</span> greeting<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当exports对象和module.exports对象指向的不是同一个对象时 以module.exports为准,执行下述语句之前，exports/module.exports都是{x: 100,greeting: name => `hello ${name}`</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Coder Rat'</span><span class="token punctuation">}</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Rat Guo'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在此时exports/module.exports都变成了 {name: 'Coder Rat'} 后面的exports指向 并未生效</span></code></pre><p> 综上思想：Node.js模块化开发，类似于Java中的import，只有被导入的包（jar包），其内部定义的函数接口等才能被调用。</p><p>其他补充：require()的查询规则</p><hr><h3 id="Node-js-系统模块"><a href="#Node-js-系统模块" class="headerlink" title="Node.js 系统模块"></a>Node.js 系统模块</h3><p><strong>什么是系统模块</strong></p><p>Node运行环境提供的API。因为这些API都是以模块化的方式进行开发的，所以我们又称Node运行环境提供的API为系统模块。</p><p>Node运行环境提供了很多API，所以了解NodeJS的编程风格也是很有必要的。可以通过对系统模块的使用、自定义模块加深对NodeJS的了解。</p><p>中文官方文档地址：<a href="http://nodejs.cn/api/" target="_blank" rel="noopener">http://nodejs.cn/api/</a></p><hr><h4 id="1-系统模块-–-fs-文件操作API（模块）"><a href="#1-系统模块-–-fs-文件操作API（模块）" class="headerlink" title="1. 系统模块 – fs 文件操作API（模块）"></a>1. 系统模块 – fs 文件操作API（模块）</h4><p>f: file s: system  fs:文件操作系统</p><p>官方文档说明：</p><h4 id="fs-readFile-path-options-callback"><a href="#fs-readFile-path-options-callback" class="headerlink" title="fs.readFile(path[, options],callback)"></a>fs.readFile(path[, options],callback)</h4><p><img src="/images/image-20200104112822930.png" alt="image-20200104112822930"></p><p>异步地读取文件的全部内容。</p><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>回调会传入两个参数 <code>(err, data)</code>，其中 <code>data</code> 是文件的内容。</p><p>如果没有指定 <code>encoding</code>，则返回原始的 buffer。</p><p>如果 <code>options</code> 是字符串，则它指定字符编码：</p><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当 <code>path</code> 是目录时， <code>fs.readFile()</code> 与 <code>fs.readFileSync()</code>的行为是特定于平台的。 在 Mac OS、Linux 和 Windows 上，将返回错误。 在 FreeBSD 上，将返回目录内容的表示。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在 macOS、Linux 和 Windows 上：</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'&lt;目录>'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// => [Error: EISDIR: illegal operation on a directory, read &lt;目录>]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在 FreeBSD 上：</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'&lt;目录>'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// => null, &lt;data></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>fs.readFile()</code> 函数会缓冲整个文件。 为了最小化内存成本，尽可能通过 <code>fs.createReadStream()</code> 进行流式传输。</p><h4 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h4><ol><li>任何指定的文件描述符都必须支持读取。</li><li>如果将文件描述符指定为 <code>path</code>，则不会自动关闭它。</li><li>读数将从当前位置开始。例如，如果文件已经有内容 <code>&#39;Hello World</code>‘ 并且使用文件描述符读取了六个字节，则使用相同文件描述符调用 <code>fs.readFile()</code> 将返回 <code>&#39;World&#39;</code> 而不是 <code>&#39;Hello World&#39;</code>。</li></ol><h4 id="fs-createReadStream-path-options"><a href="#fs-createReadStream-path-options" class="headerlink" title="fs.createReadStream(path[, options])"></a>fs.createReadStream(path[, options])</h4><p><img src="/images/image-20200104113401446.png" alt="image-20200104113401446"></p><p>与用于可读流的 16 kb 的默认的 <code>highWaterMark</code> 不同，此方法返回的流具有 64 kb 的默认的 <code>highWaterMark</code>。</p><p><code>options</code> 可以包括 <code>start</code> 和 <code>end</code> 值，以从文件中读取一定范围的字节而不是整个文件。 <code>start</code> 和 <code>end</code> 都包含在内并从 0 开始计数，允许的值在 [0, <a href="http://nodejs.cn/s/e9ereu" target="_blank" rel="noopener"><code>Number.MAX_SAFE_INTEGER</code></a>] 的范围内。 如果指定了 <code>fd</code> 并且省略 <code>start</code> 或为 <code>undefined</code>，则 <code>fs.createReadStream()</code> 从当前的文件位置开始顺序地读取。 <code>encoding</code> 可以是 <a href="http://nodejs.cn/s/FApxjh" target="_blank" rel="noopener"><code>Buffer</code></a> 接受的任何一种字符编码。</p><p>如果指定了 <code>fd</code>，则 <code>ReadStream</code> 将会忽略 <code>path</code> 参数并将会使用指定的文件描述符。 这意味着将不会触发 <code>&#39;open&#39;</code> 事件。 <code>fd</code> 必须是阻塞的，非阻塞的 <code>fd</code> 应该传给 <a href="http://nodejs.cn/s/wsJ1o1" target="_blank" rel="noopener"><code>net.Socket</code></a>。</p><p>如果 <code>fd</code> 指向仅支持阻塞读取的字符设备（例如键盘或声卡），则在数据可用之前，读取操作不会完成。 这可以防止进程退出并且流自然地关闭。</p><p>默认情况下，流在销毁后将不会触发 <code>&#39;close&#39;</code> 事件。 这与其他 <code>Readable</code> 流的默认行为相反。 将 <code>emitClose</code> 选项设置为 <code>true</code> 可更改此行为。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从某个字符设备创建一个流。</span><span class="token keyword">const</span> stream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'/dev/input/event0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  stream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这可能不会关闭流。</span>  <span class="token comment" spellcheck="true">// 人工标记流的结束，就像底层的资源自身已表明文件的结束一样，允许流进行关闭。</span>  <span class="token comment" spellcheck="true">// 这不会取消挂起中的读取操作，如果存在此类操作，则过程可能仍无法成功地退出，直到完成。</span>  stream<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果 <code>autoClose</code> 为 <code>false</code>，则即使出现错误，文件描述符也不会被关闭。 应用程序负责关闭它并确保没有文件描述符泄漏。 如果 <code>autoClose</code> 设为 <code>true</code>（默认的行为），则在 <code>&#39;error&#39;</code> 或 <code>&#39;end&#39;</code> 事件时文件描述符将会被自动地关闭。</p><p><code>mode</code> 用于设置文件模式（权限和粘滞位），但仅限于创建文件时。</p><p>示例，从一个大小为 100 个字节的文件中读取最后 10 个字节：</p><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">'sample.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> start<span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token number">99</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果 <code>options</code> 是字符串，则它指定字符编码。</p><h4 id="fs-createWriteStream-path-options"><a href="#fs-createWriteStream-path-options" class="headerlink" title="fs.createWriteStream(path[, options])"></a>fs.createWriteStream(path[, options])</h4><p><img src="/images/image-20200104113436642.png" alt="image-20200104113436642"></p><p><code>options</code> 可以包括 <code>start</code> 选项，允许在文件的开头之后的某个位置写入数据，允许的值在 [0, <a href="http://nodejs.cn/s/e9ereu" target="_blank" rel="noopener"><code>Number.MAX_SAFE_INTEGER</code></a>] 的范围内。 若要修改文件而不是覆盖它，则 <code>flags</code> 模式需要为 <code>r+</code> 而不是默认的 <code>w</code> 模式。 <code>encoding</code> 可以是 <a href="http://nodejs.cn/s/FApxjh" target="_blank" rel="noopener"><code>Buffer</code></a> 接受的任何一种字符编码。</p><p>如果 <code>autoClose</code> 设置为 <code>true</code>（默认的行为），则在 <code>&#39;error&#39;</code> 或 <code>&#39;finish&#39;</code> 事件时文件描述符将会被自动地关闭。 如果 <code>autoClose</code> 为 <code>false</code>，则即使出现错误，文件描述符也不会被关闭。 应用程序负责关闭它并确保没有文件描述符泄漏。</p><p>默认情况下，流在销毁后将不会触发 <code>&#39;close&#39;</code> 事件。 这与其他 <code>Writable</code> 流的默认行为相反。 将 <code>emitClose</code> 选项设置为 <code>true</code> 可更改此行为。</p><p>与 <a href="http://nodejs.cn/s/C3Eioq" target="_blank" rel="noopener"><code>ReadStream</code></a> 类似，如果指定了 <code>fd</code>，则 <a href="http://nodejs.cn/s/2uZDVA" target="_blank" rel="noopener"><code>WriteStream</code></a> 将会忽略 <code>path</code> 参数并将会使用指定的文件描述符。 这意味着不会触发 <code>&#39;open&#39;</code> 事件。 <code>fd</code> 必须是阻塞的，非阻塞的 <code>fd</code> 应该传给 <a href="http://nodejs.cn/s/wsJ1o1" target="_blank" rel="noopener"><code>net.Socket</code></a>。</p><p>如果 <code>options</code> 是字符串，则它指定字符编码。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 系统模块 直接通过模块的名字fs对模块进行引用</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 通过模板内部的readFile函数读取文件内容 * 因为读取操作是从系统硬盘读取，所以不是及时反馈的， * 所以不能用fs.readFile的返回值来输出读取内容 * 所以采用了回调函数的方式，等待读取操作完成，再执行回调函数， * 返回读取结果。 */</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./demo.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> doc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 如果文件读取出错 err 是个对象，包含错误信息     * 如果文件读取正确 err 是null     * doc 是文件读取的结果     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token string">"文件读取成功！"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"文件读取失败，将创建此文件..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 应用场景：         * 在网站运行的过程中要实时监控网站的运行情况，         * 例如，在网站运行的过程中是否有报错的情况，         * 我们不能一直盯着程序后台，所以希望当程序运行         * 出错的时候，错误能被写入错误日志当中，也就是说，         * 写入到一个文件中。         */</span>        <span class="token comment" spellcheck="true">/**         * fs.writeFile('文件路径/文件名称','数据（字符串类型数据）',callback);         */</span>        <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token string">'&lt;h3>我是写入的内容&lt;/h3>'</span>        fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./demo.txt'</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">'&lt;br>文件创建失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件创建成功！'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="/images/image-20200104150312813.png" alt="image-20200104150312813"></p><p>NodeJs系统模块中的回调函数，第一个参数都是error错误信息，所以我们又称NodeJS中的回调函数为错误优先的回调函数。</p><hr><h4 id="2-系统模块-–-path-路径操作"><a href="#2-系统模块-–-path-路径操作" class="headerlink" title="2. 系统模块 – path 路径操作"></a>2. 系统模块 – path 路径操作</h4><p>为什么要进行路径拼接</p><ul><li>不同操作系统的路径分隔符不统一</li><li>/public/upload/avatar</li><li>Windows 上是 \ /</li><li>Linux 上是 /</li></ul><p>路径拼接API语法</p><pre class=" language-js"><code class="language-js">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'路径'</span><span class="token punctuation">,</span><span class="token string">'路径'</span><span class="token punctuation">,</span><span class="token string">'路径'</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 导入path模块</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 路径拼接 因为路径拼接是即时操作，所以直接接收返回值即可</span><span class="token keyword">let</span> finalPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">,</span><span class="token string">'css'</span><span class="token punctuation">,</span><span class="token string">'index.css'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印出拼接后的路径 并且path.join 会识别目前运行的系统环境 使用相应的拼接符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>finalPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用读取文件测试__dirname配合拼接路径的正确性</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"demos"</span><span class="token punctuation">,</span><span class="token string">"demo.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="/images/image-20200104153750671.png" alt="image-20200104153750671"></p><h5 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h5><p>实际开发中，相对路径和绝对路径的选择</p><ul><li>大多数的情况下使用绝对路径，因为相对路径有时候相对的是命令行工具的当前目录</li><li>在读取文件或者设置文件路径时都会选择绝对路径</li><li>使用<code>__dirname</code>可以获取当前文件的绝对路径</li></ul><p>所以我们实际开发过程中，可以结合path.join()，获取完整的绝对路径</p><pre class=" language-js"><code class="language-js">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'相对此文件的相对路径目录名称，有多个，用逗号隔开'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h3 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h3><p><strong>什么是第三方模块</strong></p><p>别人写好的、具有特定功能的、我们能直接使用的模块，即称为第三方模块，由于第三方模块通常都是由多个文件组成，并且被放置在同一个文件夹中，所以又名包。</p><p>第三方模块有两种存在形式：</p><ul><li>以JS文件的形式存在，提供实现项目具体功能的API接口。类似于JQuery。</li><li>以命令行工具的形式存在，为我们提供命令行中的命令，以辅助开发。 如：nodemon</li></ul><p>获取第三方模块的方式：</p><p>npm(node package manager)：node的第三方模块管理工具。安装node的时候就已经集成。</p><pre class=" language-npm"><code class="language-npm">下载包npm install/i 包名(mouduleName)删除npm uninstall 包名| node_moudules| package-lock.json全局安装和本地安装- 命令行工具/辅助工具：全局安装- 库文件：本地安装</code></pre><hr><h4 id="第三方模块-nodemon"><a href="#第三方模块-nodemon" class="headerlink" title="第三方模块 nodemon"></a>第三方模块 nodemon</h4><p>nodemon 是一个命令行工具模块，用于辅助项目开发。</p><p>在编写调试Node.js项目，修改代码后，需要频繁的手动Ctrl+C退出，然后再重新执行，非常麻烦。现在，我们可以使用<code>nodemon</code>这个工具，它的作用是监听代码文件的变动，当代码改变之后，自动重新执行。</p><p>以下是官方说明：</p><p>nodemon is a tool that helps develop node.js based applications by automatically restarting the node application when file changes in the directory are detected.</p><p>Cloning with <a href="https://github.com/remy/nodemon" target="_blank" rel="noopener">git</a> or by using <a href="https://www.npmjs.com/package/nodemon" target="_blank" rel="noopener"><code>npm</code></a>(推荐方式):</p><pre class=" language-npm/git"><code class="language-npm/git">npm install -g nodemon</code></pre><p>And nodemon will be installed globallyto your system path.(全局安装) </p><p>You can also install nodemon as a development dependency:（本地安装/项目安装）</p><pre class=" language-npm/git"><code class="language-npm/git">npm install --save-dev nodemon</code></pre><p>With a local installation, nodemon will not be available in your system path. Instead, the local installation of nodemon can be run by calling it from within an npm script (such as <code>npm start</code>) or using <code>npx nodemon</code>.</p><p>使用nodemon</p><pre class=" language-npm"><code class="language-npm">nodemon [your node app]  || 例如： nodemon app.js</code></pre><p>更多命令，可参考<a href="https://github.com/remy/nodemon" target="_blank" rel="noopener">git</a> or <a href="https://www.npmjs.com/package/nodemon" target="_blank" rel="noopener"><code>npm</code></a></p><hr><h4 id="第三方模块-nrm"><a href="#第三方模块-nrm" class="headerlink" title="第三方模块 nrm"></a>第三方模块 nrm</h4><p>nrm(node registry manager)：npm 下载地址切换工具（命令行工具）</p><p>npm默认的下载地址为:<a href="https://registry.npmjs.org/" target="_blank" rel="noopener">https://registry.npmjs.org/</a> 服务器位于国外，所以访问下载的速度慢，阿里巴巴淘宝镜像服务器，每10分钟就和官方服务器做一次更新同步，所以可以使用</p><pre><code>// 全局安装nrm工具npm install nrm -g// 查看npm链接源nrm ls// 切换npm下载源为 taobaonrm use taobao</code></pre><p><img src="/images/image-20200104164330865.png" alt="image-20200104164330865"></p><hr><h4 id="第三方模块-Gulp"><a href="#第三方模块-Gulp" class="headerlink" title="第三方模块 Gulp"></a>第三方模块 Gulp</h4><p>基于node开发的前端构建工具</p><p>什么是前端构件化工具呢？</p><p>实际上就是将机械化操作 编写成任务，想要执行机械化操作时执行一个命令行命令，任务就能自动执行了。</p><p>gulp可以做些什么呢？</p><ul><li>项目开发完成，需要部署上线的时候，为了加快网站的访问速度，通常要将HTML、CSS、JS文件进行压缩合并重命名等，gulp可以很方便地进行处理</li><li>语法转换（es6、less），</li><li>公共文件抽离</li><li>修改文件浏览器自动刷新</li></ul><p>Gulp的使用步骤</p><ol><li><p>使用 npm install gulp 下载gulp库文件（本地下载）</p></li><li><p>在项目根目录下建立gulpfile.js文件</p></li><li><p>重构项目的文件夹结构</p><p>新建 src 目录用于放置源代码文件</p><p>新建 dist 目录用于放置构建后文件</p></li><li><p>在gulpfile.js文件中编写任务</p></li><li><p>在命令行工具中执行gulp任务</p></li></ol><p>Gulp中提供的方法</p><ul><li>gulp.src()：获取任务要处理的文件</li><li>gulp.dest()：输出文件</li><li>gulp.task()：建立gulp任务</li><li>gulp.watch()：监控文件的变化</li></ul><pre class=" language-npm"><code class="language-npm">// 全局安装gulp-cli 命令行工具npm install gulp-cli -gnpm install gulp -Dnpx -p touch nodetouch gulpfile.jsgulp --help项目（本地）安装  最顶级文件夹直接子文件夹</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//gulpfile.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span> src<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> parallel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> pug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-pug'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> less <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-less'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> minifyCSS <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-csso'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> concat <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-concat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'client/templates/*.pug'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">pug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'build/html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'client/templates/*.less'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">less</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">minifyCSS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'build/css'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">js</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'client/javascript/*.js'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> sourcemaps<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'app.min.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'build/js'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> sourcemaps<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>js <span class="token operator">=</span> js<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>css <span class="token operator">=</span> css<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>html <span class="token operator">=</span> html<span class="token punctuation">;</span>exports<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">=</span> <span class="token function">parallel</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> css<span class="token punctuation">,</span> js<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>nodejs中的系统模块</p><p>node运行环境提供的API,因为这些模块都是模块化开发的</p><p>系统模块之 fs</p><p>f: file 文件，s: system 文件操作系统</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>读取文件语法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>mya<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>myb<span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>doc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文件读取成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"neirong"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文件写入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>模块查找规则1</p><p>模块查找规则2</p><p>当模块没有路径且没有后缀</p><ol><li>Node.js会默认为它是系统模块</li><li>Node.js会去node_modules中查找是否存在同名js文件</li><li>如果没有，就会查找node_modules下的同名文件夹中的index.js</li><li>如果有同名文件夹，但是其中不存在index.js，则查找是否有pakege.json文件，如果有就查看其中是否存在”main”: 入口对应的文件</li><li>如果也不存在，就查看</li></ol><p>Node网站服务器</p><p>localhost   本地域名</p><p>本地IP: 127.0.0.1</p><pre class=" language-tex"><code class="language-tex">按下回车以后，首先浏览器会在本地查找hosts文件，如果文件中有对应的域名，就执行本地服务，没有的话。就去公网上访问DNS解析服务，告诉我们要查找的域名，DNS服务会将域名解析成IP地址，我们拿到这个解析过的IP进行匹配，找到指定服务器的端口号进行访问http协议可以理解成客户端和服务器端之间的沟通语言，http协议包含两部分，第一部分是请求部分，第二部分是响应部分，请求部分中包含了当前客户端</code></pre><p>创建web服务器</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建web服务器的模块</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'https'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建服务器</span><span class="token keyword">const</span> app <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当客户端请求的时候</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取请求方式</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;h2>Hi,Coder Rat&lt;/h2>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"网站服务创建成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>app.on  添加事件监听</p><p>监听的事件是 ‘request’ 只要有请求就会执行</p><p>res.end();</p><p>req 请求的信息  request  请求报文</p><p>res 请求的响应事件   response  响应报文</p></blockquote><p>HTTP协议 Hyper Text Transform Protocol规定了如何从网站服务器传输超文本到本地浏览器，它基于客户端服务器架构工作，是客户端（用户）和服务器端（网站）请求和应答的标准。</p><p>报文 headers ：表现形式，以冒号分隔的键值对</p><p>General headers:</p><p>重要选项</p><p>Response headers: 响应报文</p><p>Request headers: 请求报文</p><p>请求报文：</p><ol><li><p>请求方式（Request Method）</p><ul><li>GET 请求数据   如：浏览器输入网址，表单的默认转跳（action）</li><li>POST 发送数据  如：表单提交，密码验证</li></ul><p>获取请求方式 :</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// request Method</span><span class="token comment" spellcheck="true">//创建web服务器的模块</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建服务器</span><span class="token keyword">const</span> app <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当客户端请求的时候</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取请求方式</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li></li></ol><p>mime模块，可以根据路由自动判断返回的数据应该是什么类型的文件 mime.getType(req.url);</p><p><img src="/images/image-20191229092708334.png" alt="image-20191229092708334"></p><p>Express是一个人基于Node平台的web应用开发框架，他提供了一系列强大的特性，帮助你创建各种web应用。</p><p>Express 框架的特性</p><ul><li>提供了方便简洁的路由定义方式</li><li>对获取HTTP请求参数进行了简化处理</li><li>对模板引擎支持程度高，方便渲染动态HTML界面</li></ul><p>restful风格</p><p>express 文档解析</p><p>一个路由 相当于一个简单的业务逻辑处理</p><p>登录的流程是怎么样的？</p><p>客户端通过服务端发送post请求，请求中包含email，password，后端接收到前端传递过来的email，password，首先判断email，password两个字段是否为空，如果为空，就直接返回客户端，如果不为空，就是使用客户端传递过来的email去数据库中查询当前email对应的那条数据，如果没查询到，则直接返回客户端，当前账户不存在在数据库中，如果查询到了，就取出当前这条数据里面的password，并且用它和客户端传递过来的password进行比对，如果不匹配，则返回客户端，提示错误，如果一致，则重定向到相应的登陆成功界面。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
            <tag> 前后端交互 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级-面向对象</title>
      <link href="/2019/12/19/javascript-gao-ji-mian-xiang-dui-xiang/"/>
      <url>/2019/12/19/javascript-gao-ji-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象编程介绍"><a href="#面向对象编程介绍" class="headerlink" title="面向对象编程介绍"></a>面向对象编程介绍</h2><p>两大编程思想</p><ul><li><p>面向过程编程 POP</p><p>按照分析好的过程，一步步利用函数实现</p></li><li><p>面向对象编程 OOP</p><p>以对象功能划分</p><p>面向对象的特点：</p><ul><li>封装性</li><li>继承性</li><li>多态性</li></ul></li></ul><p>ES6 中的类和对象</p><p>面向对象的思维特点：</p><ol><li><p>抽取（抽象）对象共用的属性和行为组织（封装）成一个类（模板）</p></li><li><p>对类进行实例化，获取类的对象</p></li></ol><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>在JavaScript中，对象是一组无序的相关属性和方法的集合，</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>在ES6中新增了类的概念，可以使用class关键字声明一个类，之后可以用类来实例化对象。</p><p>类抽取了对象的公共部分，他繁殖某一大类</p><p>对象特指某一个，通过类实例化一个具体的对象</p><p>面向对象的思维特点：</p><ol><li>抽取（抽象）对象共用的属性和行为组织（封装）成一个类（模板）</li><li>对类进行实例化，获取类的对象</li></ol><h3 id="创建-封装-类"><a href="#创建-封装-类" class="headerlink" title="创建(封装)类"></a>创建(封装)类</h3><p>语法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 创建类</span><span class="token keyword">class</span> <span class="token class-name">Star</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 构造函数 参数的传递 </span>    <span class="token function">constructor</span><span class="token punctuation">(</span>uname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 利用类创建对象</span><span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">"刘德华"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实例化过程</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">.</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>constructor 构造函数 会在实例化的过程，自动调用</p><p>即 new Star(“刘德华”);</p><p>new 创建对象的时候，constructor函数在调用结束以后，会默认返回一个对象，如果在constructor内手动return一个简单数据类型，则还是返回创建的对象，如果return一个对象，则返回此对象。</p><p>当constructor被调用的时候，首先会在内部创建了一个空对象，再把空对象指向this</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>nam<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> nam<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 上述过程等同于 下面的执行过程</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">this</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>nam<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> <span class="token string">"我是构造函数中的uname,我才是大名，我叫Nick，别人说我叫什么，我不听！"</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I can run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是构造函数中的sing,我最能唱，所以其他人不准唱！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果在构造器中也有同名函数，则此函数被覆盖</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I am singing a song"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    uname <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会直接</span><span class="token punctuation">}</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hoby <span class="token operator">=</span> <span class="token string">"eat"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    job <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是科学家"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hoby<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 继承过程中，如果子类没有手动书写constructor函数那么js会默认帮我们创建constructor函数，并且会在其中        调用super方法 */</span></code></pre><p>super  既是函数 也是对象</p><p>作为函数使用的时候。可以帮助子类继承父类的方法和属性</p><p>作为对象使用的时候，则代表当前子类的父类，可以直接调用父类的方法</p><p><img src="/images/image-20191219151426582.png" alt="image-20191219151426582"></p><p>constructor 里面的this【指向的是 创建的实例对象】</p><p>构造函数和原型</p><p>利用构造函数创建对象</p><pre><code>function () {}</code></pre><p>构造函数是一种特殊的函数，主要用来初始化对象，即为对象成员变量</p><p>构造函数与普通函数的区别</p><p>new 本质上是调用函数的方法之一</p><p>一个函数如果被new调用，那么这个函数就是构造函数</p><p>不能通过构造函数来访问实例成员，只能通过实例化的对象来访问。</p><p>静态成员只能通过构造函数访问，不能通过实例对象访问</p><p>构造函数原型 prototype</p><p>函数都拥有 prototype </p><p>prototype上定义的大部分都是函数，这样可以让每一个实例对象都共享这些函数</p><p>实例对象在访问方法的时候，首先在自己身上找，如果没有，就去到他的构造函数的prototype上查找，如果构造函数中的prototype上有 就访问此方法 否则继续向上查找                                                                                                                                                                                                          </p><p>constructor本质上是保存在构造函数的原型对象上的</p><p>实例对象可以通过访问他的__ proto __属性上的constructor属性来找到他的构造函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> fn <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>Fn<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Fn<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/images/image-20191220161758202.png" alt="image-20191220161758202"></p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/images/image-20191220161931502.png" alt="image-20191220161931502"></p><p>原型链</p><p><img src="/images/image-20191220162316131.png" alt="image-20191220162316131"></p><p><img src="/images/image-20191220164141324.png" alt="image-20191220164141324"></p><p>原型链查找</p><p>Javascript中内置的构造函数的prototype 不可被人为地整个替换</p><h2 id="函数的定义和调用"><a href="#函数的定义和调用" class="headerlink" title="函数的定义和调用"></a>函数的定义和调用</h2><p>函数的定义方式</p><ol><li>命名函数</li><li>匿名函数</li><li>new Function(“参数1”,”参数2”,”函数体”);</li></ol><p>所有函数都是 Function的实例，所有的函数都是对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> instanseof Object</code></pre><p>函数调用的方式</p><ol><li><p>普通函数的调用</p><p>fn();  fn.call();</p></li><li><p>对象内函数</p></li><li><p>构造函数</p></li><li><p>绑定事件函数</p></li><li><p>定时器函数</p></li><li><p>立即执行函数 </p></li></ol><p>函数内this的指向</p><p>一般指向我们的调用者</p><p>改变this指向的方法</p><p>call 的主要作用 可以实现继承 </p><p>bind传参以bind函数中的参数优先，如果bind函数中的参数不够，则以返回的新函数中的参数作为补充。</p><p>如果有的函数我们不需要立即调用，但是又想改变这个函数内部的this指向，此时用bind。</p><p>闭包的主要作用：延伸了局部变量的作用范围（return function(){</p><p>​    console.log(name);// 这个name是外层作用域里的变量</p><p>）</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript高级（面向对象） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript之数组详解</title>
      <link href="/2019/12/18/javascript-zhi-shu-zu-xiang-jie/"/>
      <url>/2019/12/18/javascript-zhi-shu-zu-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="数组的概念"><a href="#数组的概念" class="headerlink" title="数组的概念"></a>数组的概念</h2><p>数组可以把一组相关的数据一起存放，并提供方便的读、取操作。</p><p>数组是指一组数据的集合，其中的每个数据被称为<strong>元素</strong>，在数组中可以存放<strong>任意类型</strong>的元素。所以，数组是一种<strong>将一组数据</strong>存储在<strong>单个变量名</strong>下的优雅方式。</p><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><ul><li><p>利用new 关键字创建数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// new 构造器（构造函数） 创建了个空数组</span></code></pre></li><li><p>利用数组字面量创建数组 <code>[]</code> （常用方式）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建了一个空数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span>Rat<span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li></ul><blockquote><p>数组里面的元素没有类型限制，元素之间以<code>,</code>隔开。</p></blockquote><h2 id="获取数组中的元素"><a href="#获取数组中的元素" class="headerlink" title="获取数组中的元素"></a>获取数组中的元素</h2><h3 id="数组的索引"><a href="#数组的索引" class="headerlink" title="数组的索引"></a>数组的索引</h3><p><strong>索引</strong>（即<strong>下标</strong>）：是用来访问数组元素的序号，数组的下标从0开始</p><p>数组可以通过索引来访问、设置、修改对应的数组元素，我们可以通过<code>数组名[索引]</code>的形式来获取（访问）数组中的元素。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span>Rat<span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Coder Rat</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// undefined 索引超出arr.length,返回未定义</span><span class="token comment" spellcheck="true">// 一般存放一星期的周几的数组，存储方式为</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"星期日"</span><span class="token punctuation">,</span><span class="token string">"星期一"</span><span class="token punctuation">,</span><span class="token string">"星期二"</span><span class="token punctuation">,</span><span class="token string">"星期三"</span><span class="token punctuation">,</span><span class="token string">"星期四"</span><span class="token punctuation">,</span><span class="token string">"星期五"</span><span class="token punctuation">,</span><span class="token string">"星期六"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 因为new Date().getDay() 的返回值对应为[0,1,2,3,4,5,6]</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><p>遍历：就是把数组中的每个元素从头到尾都访问一次。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span>Rat<span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>数组长度：数组名.length  是<strong>动态检测</strong>数组元素个数的</p><h3 id="求数组中元素的和与平均值"><a href="#求数组中元素的和与平均值" class="headerlink" title="求数组中元素的和与平均值"></a>求数组中元素的和与平均值</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> average <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关键算法</span><span class="token punctuation">}</span>average <span class="token operator">=</span> sum <span class="token operator">/</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"和为："</span><span class="token operator">+</span> sum <span class="token operator">+</span> <span class="token string">"平均值为："</span> <span class="token operator">+</span> average<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="求数组元素中的最大值"><a href="#求数组元素中的最大值" class="headerlink" title="求数组元素中的最大值"></a>求数组元素中的最大值</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个值可以取数组中的任意元素，不可取数组外的值，以防取值大于数组内的任何元素</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 关键算法</span>        max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"最大值为："</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关键算法解读 遍历数组中所有元素，与初始max一一比较，如果比max大，则将此元素的值赋给max</span></code></pre><h3 id="数组转为分割字符串"><a href="#数组转为分割字符串" class="headerlink" title="数组转为分割字符串"></a>数组转为分割字符串</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">var</span> sep <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Codding"</span><span class="token punctuation">,</span><span class="token string">"is"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"wonderful"</span><span class="token punctuation">,</span><span class="token string">"lifestyle"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       str <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      str <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> sep<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Codding-is-a-wonderful-lifestyle</span></code></pre><h2 id="数组中新增元素"><a href="#数组中新增元素" class="headerlink" title="数组中新增元素"></a>数组中新增元素</h2><h3 id="修改数组的长度可以新增数组元素"><a href="#修改数组的长度可以新增数组元素" class="headerlink" title="修改数组的长度可以新增数组元素"></a>修改数组的长度可以新增数组元素</h3><p>因为length属性是可读写的，但是这种新增的方式新增的是<code>undefined</code>元素,也就是只实现了数组的扩容。</p><h3 id="修改索引号-追加数组元素（如果没有此索引）"><a href="#修改索引号-追加数组元素（如果没有此索引）" class="headerlink" title="修改索引号 追加数组元素（如果没有此索引）"></a>修改索引号 追加数组元素（如果没有此索引）</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Codding"</span><span class="token punctuation">,</span><span class="token string">"is"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"wonderful"</span><span class="token punctuation">,</span><span class="token string">"lifestyle"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"!"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Codding-is-a-wonderful-lifestyle-!</span></code></pre><h3 id="修改索引号-也可替换数组元素（如果已有此索引）"><a href="#修改索引号-也可替换数组元素（如果已有此索引）" class="headerlink" title="修改索引号 也可替换数组元素（如果已有此索引）"></a>修改索引号 也可替换数组元素（如果已有此索引）</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Codding"</span><span class="token punctuation">,</span><span class="token string">"is"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"wonderful"</span><span class="token punctuation">,</span><span class="token string">"lifestyle"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"!"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Codding-!-a-wonderful-lifestyle</span></code></pre><blockquote><p>不能直接给数组名赋值，否则会覆盖掉以前的数据，相当于变量的重新赋值</p></blockquote><h2 id="数组案例"><a href="#数组案例" class="headerlink" title="数组案例"></a>数组案例</h2><h3 id="循环生成数组"><a href="#循环生成数组" class="headerlink" title="循环生成数组"></a>循环生成数组</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></code></pre><h3 id="将A数组中大于等于10的数据存到新数组B"><a href="#将A数组中大于等于10的数据存到新数组B" class="headerlink" title="将A数组中大于等于10的数据存到新数组B"></a>将A数组中大于等于10的数据存到新数组B</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">443</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// c 为b数组的下标初始值，配合c++运算,生成索引从零开始的数组</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         c<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [443, 33, 56, 10, 10]</span><span class="token comment" spellcheck="true">//方法2</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">443</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b<span class="token punctuation">[</span>b<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b.length是从0开始的，而且是动态检测的</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [443, 33, 56, 10, 10]</span></code></pre><h3 id="将数组中的0去掉，剩下的元素生成新数组"><a href="#将数组中的0去掉，剩下的元素生成新数组" class="headerlink" title="将数组中的0去掉，剩下的元素生成新数组"></a>将数组中的0去掉，剩下的元素生成新数组</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b<span class="token punctuation">[</span>b<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b.length是从0开始的，而且是动态检测并改变的</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="翻转数组"><a href="#翻转数组" class="headerlink" title="翻转数组"></a>翻转数组</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Programming"</span><span class="token punctuation">,</span><span class="token string">"Love"</span><span class="token punctuation">,</span><span class="token string">"Rat"</span><span class="token punctuation">,</span><span class="token string">"Coder"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ["Coder", "Rat", "Love", "Programming"]</span></code></pre><h3 id="数组排序（冒泡排序）"><a href="#数组排序（冒泡排序）" class="headerlink" title="数组排序（冒泡排序）"></a>数组排序（冒泡排序）</h3><p>冒泡排序：是一种简单的排序算法，它重复地走访要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行，直到没有再需要交换的数，也就是说该数列已经排序完成。这个算法的名字由来，是因为越小的元素会经由交换，慢慢”浮“到数列的顶端。</p><p>代码实现</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 改变大小于号，可以改变冒泡方向</span>            <span class="token keyword">var</span> mid <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数组基础用法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript之逻辑运算与流程控制</title>
      <link href="/2019/12/18/javascript-zhi-luo-ji-yun-suan-yu-liu-cheng-kong-zhi/"/>
      <url>/2019/12/18/javascript-zhi-luo-ji-yun-suan-yu-liu-cheng-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符（operator）也被称为<strong>操作符</strong>，是用于实现赋值、比较和执行算数运算等功能的符号。</p><h3 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1. 算数运算符"></a>1. 算数运算符</h3><p>加 减 乘 除 取余（取模）%</p><pre><code>3 % 5  //3 注意！5 % 3  //2</code></pre><blockquote><p>浮点数float 在数学运算中 会有精度的问题</p><p>如console.log(0.1 + 0.2); //控制台输出为0.30000000000000004</p><p>注意：我们不能拿着浮点数作为判断依据  0.1 + 0.2 === 0.3  //false</p></blockquote><h3 id="递增和递减运算符（重点）"><a href="#递增和递减运算符（重点）" class="headerlink" title="递增和递减运算符（重点）"></a>递增和递减运算符（重点）</h3><p>为了解决变量的自加1或者自减1，如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（–）运算符来完成。</p><p>在JavaScript中，递增和递减运算符，既可以放在变量的前面，也可以放在变量的后面。放在变量的前面时，称为前置递增/递减，放在后面时，称为后置递增/递减。</p><p><strong>区别：</strong></p><p>放在前面时，变量先加/减1，然后将结果返回给表达式</p><p>放在后面时，先将变量的原值返回给表达式，变量再加/减1</p><p>共同点：表达式执行完，变量的值都会加/减1</p><p>比如：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">--</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span><span class="token comment" spellcheck="true">//即 --a === 5-1 &amp;&amp; a = 5-1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4</span><span class="token comment" spellcheck="true">//即 b-- === 5 &amp;&amp; b = b-1</span></code></pre><h3 id="比较运算符（关系运算符）"><a href="#比较运算符（关系运算符）" class="headerlink" title="比较运算符（关系运算符）"></a>比较运算符（关系运算符）</h3><p><code>&gt;</code> <code>&lt;</code> <code>==</code> <code>&gt;=</code> <code>&lt;=</code> <code>!=</code> <code>===</code> <code>!==</code></p><p>程序里面的等于符号 是==，默认转换数据类型，会把字符串的数据类型转换为数字型（隐式转换）。只判断值是否相等</p><p>程序里面的全等===，是代表数据类型、值完全一样</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符是用来进行布尔值运算的运算符，其返回值为布尔值</p><ul><li><p><strong>逻辑与：</strong> &amp;&amp; and 两侧都为true 结果才是true,只要有一侧为false，结果就为false</p></li><li><p><strong>逻辑或：</strong> || or 两侧都为false结果才是false,只要有一侧为true，结果就为true</p></li><li><p><strong>逻辑非：</strong> ! not     也叫取反符   <code>!true == false;</code></p></li></ul><h3 id="逻辑与-或的-短路运算（逻辑中断）（重要）"><a href="#逻辑与-或的-短路运算（逻辑中断）（重要）" class="headerlink" title="逻辑与/或的 短路运算（逻辑中断）（重要）"></a>逻辑与/或的 短路运算（逻辑中断）（重要）</h3><p><strong>短路运算的原理：</strong>当有多个<strong>表达式</strong>时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*先进行Boolean强制转换 遇到"",'',NaN,0,null,undefined 转换为false只要是真，就继续向下运算，遇到假或者执行到头，则短路（中断运算）返回当前值（即找false假）*/</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//c = 456;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span> <span class="token operator">&amp;&amp;</span> <span class="token number">789</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//c = 789;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">789</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//c = 0;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span> <span class="token operator">&amp;&amp;</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//c = "";</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span> <span class="token operator">+</span> <span class="token string">"Coder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "456Coder"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">456</span> <span class="token operator">+</span> <span class="token string">"Coder"</span> <span class="token operator">&amp;&amp;</span> <span class="token string">""</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ""</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">456</span> <span class="token operator">-</span> <span class="token string">"Coder"</span> <span class="token operator">&amp;&amp;</span> <span class="token string">""</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">456</span> <span class="token operator">+</span> <span class="token string">"Coder"</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"0"</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">// 4. 逻辑或短路运算 </span><span class="token comment" spellcheck="true">/*如果表达式1 结果为真 则返回表达式1 如果表达式1 结果为假 则返回表达式2（即找true真）*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">||</span> <span class="token number">456</span> <span class="token operator">||</span> <span class="token number">456</span> <span class="token operator">+</span> <span class="token string">"Coder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "0"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">456</span> <span class="token operator">+</span> <span class="token string">"Coder"</span> <span class="token operator">||</span> <span class="token string">""</span> <span class="token operator">||</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "456Coder"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">456</span> <span class="token operator">-</span> <span class="token string">"Coder"</span> <span class="token operator">||</span> <span class="token string">""</span> <span class="token operator">||</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "0"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">456</span> <span class="token operator">-</span> <span class="token string">"Coder"</span> <span class="token operator">||</span> <span class="token string">""</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">// 逻辑中断很重要 它会影响我们程序运行结果</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">||</span> num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">//因为结果123 为真，所以 num++就不会运算了，所以还是0</span></code></pre><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p><code>=</code> <code>+=</code> <code>-=</code> <code>\=</code> <code>*=</code> <code>%=</code></p><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p><code>()</code>  &gt; <code>一元运算符++ -- !</code>  &gt;  <code>数学运算符</code>  &gt;  <code>关系运算符</code></p><h3 id="拓展：表达式和返回值"><a href="#拓展：表达式和返回值" class="headerlink" title="拓展：表达式和返回值"></a>拓展：表达式和返回值</h3><p><strong>表达式：</strong>是由<strong>数字、运算符、变量</strong>等，以能求得数值的、有意义的排列方法，所得的组合。</p><p>简单理解：由数字、运算符、变量<strong>等组成的</strong>有意义的或能求得数值的<strong>式子</strong>。</p><p><strong>表达式的特点：</strong>表达式最终都会有一个结果，返回给我们，我们称之为<strong>返回值</strong></p><p>函数（方法）的特点和表达式的特点有些类似</p><pre><code>var num = 1 + 1;/*右边表达式计算完毕，把返回值赋值给num*/</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>在一个程序执行的过程中，各条代码的执行顺序对程序的结果会有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。</p><p>简单来说：流程控制就是来控制我们代码按照什么结构顺序来执行</p><p>流程控制主要有三种结构，分别是<strong>顺序结构、分支结构和循环结构</strong></p><p><img src="/images/image-20191215184830490.png" alt="image-20191215184830490"></p><h3 id="顺序流程控制"><a href="#顺序流程控制" class="headerlink" title="顺序流程控制"></a>顺序流程控制</h3><p>顺序流程控制，是依据代码的先后顺序，依次执行，即基本流程控制，没有特定的语法结构。</p><h3 id="分支流程控制if语句"><a href="#分支流程控制if语句" class="headerlink" title="分支流程控制if语句"></a>分支流程控制if语句</h3><p>由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码（执行代码多选一的过程），从而得到不同的结果</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//语法结构伪代码</span><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行语句</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行语句2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果if里面的条件表达式结果为真(true) 则执行花括号里面的执行语句，如果if里面的条件表达式结果为假(false) 则执行花括号里面的执行语句2</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//执行语句1</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//执行语句2   </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行语句3</span><span class="token punctuation">}</span></code></pre><h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><p>类似于双分支语句 if…else，可以做一些简单的条件选择。由三元运算符组成的式子，称为三元表达式</p><p>条件表达式 ? 表达式1 : 表达式2</p><pre><code>var num = 9;var res = num &gt; 10 ? &quot;大于10&quot; : &quot;不大于10&quot;;console.log(res);//不大于10/*用户输入0-59之间的数字如果数字小于10，就在数字前面补一个0，加&quot;0&quot;进行拼接*/var res = &quot;&quot;;var val = prompt(&quot;请输入小于大于0小于59之间的数字&quot;);res = parseInt(val) &lt; 10 ? 0 + val : val;alert(res);</code></pre><h3 id="分支流程控制switch语句"><a href="#分支流程控制switch语句" class="headerlink" title="分支流程控制switch语句"></a>分支流程控制switch语句</h3><p>switch 转换、开关 case 小例子或者选项的意思</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*条件表达式的返回值和里面的value对应，则执行相应语句，无对应，执行default里的语句*/</span><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> value1<span class="token punctuation">:</span>        执行语句<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value2<span class="token punctuation">:</span>        执行语句<span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">break</span>    <span class="token operator">...</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        执行最后的语句<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//样例  相匹配的时候 是全等关系 值和类型都要一样 遇到break才跳出循环（重要）</span><span class="token keyword">var</span> sw <span class="token operator">=</span> <span class="token string">"匹配项"</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>sw<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是匹配项1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"匹配项"</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是匹配项2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"没找到匹配项"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//结果为 "我是匹配项2"</span></code></pre><blockquote><p>switch  在结果为确定值的情况下可以使用</p><p>if else if 常用在范围判断 更加灵活</p></blockquote><h3 id="循环结构-重要"><a href="#循环结构-重要" class="headerlink" title="循环结构 重要"></a>循环结构 重要</h3><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>目的：可以重复执行某些代码（相同的代码或者不同的代码，因为存在计数器，所以可以通过变量控制执行体的执行内容）</p><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><p>被重复的代码 称为循环体</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*var i = 0只会执行一次，作为启动变量，然后执行第二句进行判断，然后执行循环体，然后就是i++，然后一直判断执行循环体，第一句就不再执行，直到不满足条件，结束循环*/</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// i(index)</span>    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 循环体</span><span class="token punctuation">}</span></code></pre><blockquote><p>断点操作：F12 –&gt;source–&gt;点击对应文件–&gt;点击需要设置断点处的行号。watch可以监视变量，点击小加号可以添加需要监视的变量。</p></blockquote><h5 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a>累加器</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*sum += i;sum = sum + i;*/</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="奇数-偶数和"><a href="#奇数-偶数和" class="headerlink" title="奇数/偶数和"></a>奇数/偶数和</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> even <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> odd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        even <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        odd <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"偶数和："</span> <span class="token operator">+</span> even <span class="token operator">+</span> <span class="token string">"奇数和："</span> <span class="token operator">+</span> odd<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="打印小星星"><a href="#打印小星星" class="headerlink" title="打印小星星"></a>打印小星星</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"☆"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一行显示多个同样的内容</span></code></pre><h4 id="双重for循环"><a href="#双重for循环" class="headerlink" title="双重for循环"></a>双重for循环</h4><p><img src="/images/image-20191218101719361.png" alt="image-20191218101719361"></p><p>很多情况下，单层for 循环并不能满足我们的需求，比如我们要打印一个5行5列的图形，或者有规律的变换，可能一个for循环无法满足我们的需求，那么循环嵌套就是我们的优选了。</p><p>循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，比较典型的就是双重for循环结构。</p><p><strong>思路：</strong>我们可以把里面的循环看作是外层循环的语句，外层循环一次，里面的循环全部执行</p><h5 id="五行五列小星星"><a href="#五行五列小星星" class="headerlink" title="五行五列小星星"></a>五行五列小星星</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*需要输出五次（外层控制执行内部循环五次） 打印五个小心心在一行的语句（内部语句每次执行打印五颗小心心）*/</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"♥ "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="五行累增小星星"><a href="#五行累增小星星" class="headerlink" title="五行累增小星星"></a>五行累增小星星</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*需要输出五次（外层控制执行内部循环五次） 打印从一行一个到一行五个小心心的语句（内部语句每次执行打印从1-5颗小心心，通过外层变量控制判断条件）*/</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"♥ "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="五行累减小星星"><a href="#五行累减小星星" class="headerlink" title="五行累减小星星"></a>五行累减小星星</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 外层循环控制行数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"♥ "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*或者*/</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 外层循环控制行数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 相当于用外层变量控制了起始变量的值</span>        str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"♥ "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="九九乘法表-重要算法"><a href="#九九乘法表-重要算法" class="headerlink" title="九九乘法表 重要算法"></a>九九乘法表 重要算法</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 外层循环控制行数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 内层控制列数，以及每列的数量</span>        <span class="token keyword">var</span> tab <span class="token operator">=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>        str <span class="token operator">+</span><span class="token operator">=</span> j <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> tab <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    str <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//循环体</span>    i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 操作表达式，避免死循环（完成计数器更新）</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 可以实现比较复杂的判断，只根据判断是否成立来执行</span><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"你爱我嘛？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>message <span class="token operator">!==</span> <span class="token string">"我爱你"</span> <span class="token operator">&amp;&amp;</span> message <span class="token operator">!==</span> <span class="token string">"爱"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    message <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"你爱我嘛？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我也爱你哟~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h4><p>先执行循环体，再执行while()  至少会执行一次循环体</p><pre class=" language-js"><code class="language-js"><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//循环体</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span></code></pre><h4 id="continue-break"><a href="#continue-break" class="headerlink" title="continue break"></a>continue break</h4><p><strong>continue</strong>：跳出此次循环，继续下一次循环，本次循环continue之后的代码不会执行</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>跳出循环的条件<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果执行了这句代码，本次循环alert(i)将不会执行</span>    <span class="token punctuation">}</span>    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>break</strong>：退出并结束循环</p><h4 id="拓展：代码书写规范"><a href="#拓展：代码书写规范" class="headerlink" title="拓展：代码书写规范"></a>拓展：代码书写规范</h4><ul><li>函数的命名一般为动词，变量一般为名词</li><li>单行注释的<code>\\</code>后面一般跟个空格</li><li>多元运算符前后一般跟空格</li><li>if<code>空格</code>()<code>空格</code>{}  for<code>空格</code>()<code>空格</code>{}</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript逻辑运算 </tag>
            
            <tag> JavaScript流程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie封装</title>
      <link href="/2019/12/16/cookie-feng-zhuang/"/>
      <url>/2019/12/16/cookie-feng-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Cookie封装"><a href="#Cookie封装" class="headerlink" title="Cookie封装"></a>Cookie封装</h1><h4 id="取某个cookie种的数据"><a href="#取某个cookie种的数据" class="headerlink" title="取某个cookie种的数据"></a>取某个cookie种的数据</h4><pre class=" language-js"><code class="language-js">    <span class="token keyword">function</span> getCookie <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> str <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>        <span class="token keyword">var</span> arrStr<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"; "</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//遍历数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">var</span> arr<span class="token operator">=</span>arrStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="存储某个cookie数据"><a href="#存储某个cookie数据" class="headerlink" title="存储某个cookie数据"></a>存储某个cookie数据</h4><pre class=" language-js"><code class="language-js">    <span class="token keyword">function</span> setCookie <span class="token punctuation">(</span>name<span class="token punctuation">,</span>val<span class="token punctuation">,</span>time<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//存的名称name,存的值val,存的天数time(过期时间)</span>        <span class="token keyword">var</span> oDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oDate<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span>oDate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>           document<span class="token punctuation">.</span>cookie<span class="token operator">=</span>name<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>val<span class="token operator">+</span><span class="token string">";expires="</span><span class="token operator">+</span>oDate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//过期时间           </span>    <span class="token punctuation">}</span></code></pre><h4 id="删除指定的数据-如何让cookie失效（过期）"><a href="#删除指定的数据-如何让cookie失效（过期）" class="headerlink" title="删除指定的数据,如何让cookie失效（过期）"></a>删除指定的数据,如何让cookie失效（过期）</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">removeCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-数据库</title>
      <link href="/2019/12/14/php-shu-ju-ku/"/>
      <url>/2019/12/14/php-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h3 id="PHP基础"><a href="#PHP基础" class="headerlink" title="PHP基础"></a>PHP基础</h3><p>PHP( Hypertext Preprocessor) 超文本预处理器<br> PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。<br> PHP安装<br> 1.本机地址:127.0.0.1   也可以用localhost代替,  也可以通过局域网IP代替<br> 2.输入到网址栏<br> 3.ok,找到安装的xampp地址，打开文件夹下的htdocs创建php文件夹。我们以后所有写的php文件都放在这里<br> 4.php目录里一定要用英文名，不能出现汉字<br> 5.php文件的后缀是.php<br> 6.php文件需要服务器环境。所以我们要用http协议才可以使php文件运行<br> 7.php文件中可以写html，写php要把php语言放到<?php?>标签中<br> 8.php中调试语言之一： echo XXX（注意空格）</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>      <span class="token keyword">echo</span> <span class="token string">"内容"</span><span class="token delimiter">?></span></code></pre><p>PHP基础语法<br> 1.注释<br> 单行注释：//(常用)或者 #(不常用)<br> 多行注释：/**/<br> 2.声明变量：<br> $变量名=变量<br> 规则与js声明变量一致</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>     <span class="token variable">$sum</span><span class="token operator">=</span><span class="token number">15</span><span class="token operator">+</span><span class="token string">'12'</span>      <span class="token variable">$sum</span><span class="token operator">=</span><span class="token string">'12'</span><span class="token operator">+</span><span class="token string">'13'</span><span class="token delimiter">?></span></code></pre><p>php中的+只有加法的作用，想要连接数据，要用点’.’</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//for循环</span>    <span class="token comment" spellcheck="true">//for循环中的循环变量，每用一次就要加个$</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">echo</span> “<span class="token number">2</span>丫 <span class="token variable">$i</span> 号<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span></span>”              <span class="token comment" spellcheck="true">//'2丫 $i 号&lt;/br>'</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>php中双引号自带解析变量功能,注意变量两边的空格,只能解析变量,<br> //不能解析运算.单引号是纯字符串.如果不想用空格也可以用大括号{}</p><p>&amp;取址运算符<br> 取出&amp;后面变量的内存地址,赋值给前面的变量,修改该值会影响前面的赋值结果</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>      <span class="token variable">$age</span><span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>      <span class="token variable">$yourAge</span><span class="token operator">=</span><span class="token variable">$age</span><span class="token punctuation">;</span>      <span class="token variable">$age</span><span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">;</span>      <span class="token keyword">echo</span> <span class="token variable">$yourAge</span>  <span class="token comment" spellcheck="true">//不加取址是18      加&amp;是19</span><span class="token delimiter">?></span></code></pre><p>变量的变量</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token string">"one"</span><span class="token punctuation">;</span>    $<span class="token variable">$a</span><span class="token operator">=</span><span class="token string">"two"</span><span class="token punctuation">;</span>      $$<span class="token variable">$a</span><span class="token operator">=</span><span class="token string">"three"</span><span class="token punctuation">;</span>    $$$<span class="token variable">$a</span><span class="token operator">=</span><span class="token string">"four"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$two</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;hr/>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>php中的函数与js中的函数一样,但是函数的参数要加$</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$a</span><span class="token operator">*</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$i</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span>  <span class="token variable">$i</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//不加取址是3    加&amp;了是30</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;hr/>"</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p>php中的数组分为3种,分别是索引数组,关联数组和多维数组<br> 索引数组        下标是0,1,2,3</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$arr</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//打印数组用print_r</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取数组的长度   </span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>       <span class="token keyword">echo</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//获取数组中某个值的方法与js一致</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;hr/>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>关联数组<br> 关联数组的下标不再是默认的0.1.2而是我们自定义的</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token variable">$arr2</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"1号"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token string">"2号"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"小红"</span><span class="token punctuation">,</span><span class="token string">"3号"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"小刚"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$arr2</span><span class="token punctuation">[</span><span class="token string">"2号"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;hr/>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>常量<br> 类似于变量,但是定义过常量就无法再更改值.用define()方法来定义常量.常量的命名通常大写</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"NAME"</span><span class="token punctuation">,</span><span class="token string">"duan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token constant">NAME</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//常量在php中任何位置都可以使用,一旦声明不可以更改</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;hr/>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>魔术常量(调试用的,了解即可)</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token string">'这是第 " '</span>  <span class="token punctuation">.</span> <span class="token constant">__LINE__</span> <span class="token punctuation">.</span> <span class="token string">' " 行'</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//返回当前的行        20</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token constant">__FUNCTION__</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>布尔值</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token variable">$bol</span><span class="token operator">=</span><span class="token constant">FALSE</span><span class="token punctuation">;</span>    <span class="token variable">$bol2</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$bol</span><span class="token punctuation">.</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">.</span><span class="token variable">$bol2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//php中false不打印,true转化为1,大小写不敏感.</span><span class="token delimiter">?></span></code></pre><p>gettype()用来检测数据类型</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$bol</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Boolean   布尔值     </span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//integer   整数          </span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//double    浮点数     </span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//string    字符串</span><span class="token delimiter">?></span></code></pre><p>打印数组</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$arr</span><span class="token operator">=</span><span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">345</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//Array ( [0] => 1 [1] => b [2] => 345 [3] => abc )                 </span>    <span class="token comment" spellcheck="true">//打印数组      //索引数组</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//array(4) { [0]=> int(1) [1]=> string(1) "b" [2]=> int(345) [3]=> string(3) "abc" }            </span>    <span class="token comment" spellcheck="true">//打印数组      var_dump会把数组中的每一个值的类型也打印出来</span><span class="token delimiter">?></span></code></pre><p>函数作用域</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$a</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">global</span> <span class="token variable">$a</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//引用全局变量要加global</span>        <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//函数内部如果要用外部变量不能直接使用，要加global。</span>    <span class="token punctuation">}</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>函数默认值</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">"and"</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>php文件引入<br> include遇到错误只会提示错误,不会阻止后面代码的运行<br> require遇到错误则会中断执行代码,阻止后面代码的运行<br> include(“test.php”);<br> include_once(“test.php”);       //只引入一遍<br> require(“test.php”);<br> 超全局变量</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>      <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token keyword">echo</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token constant">SERVER_NAME</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//返回localhost</span>      <span class="token keyword">echo</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token constant">REQUEST_METHOD</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//返回GET</span>      <span class="token comment" spellcheck="true">//SERVER  保存了当前运行环境的相关信息</span>      <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//$GLOBALS返回所有超全局变量</span><span class="token delimiter">?></span></code></pre><p>get和post的区别<br> 1.get方式传值的大小最多2兆,post无限制<br> 2.get用来读取数据,post可以写入数据<br> 3.get传入的数据会拼接在地址栏上,所以安全性不高.post更安全.</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//$_GET $_POST用来获取get方法或者post方法传入的数据。</span>    <span class="token comment" spellcheck="true">//$_REQUEST可以获取通过get或者post传入的数据，不推荐使用，传值速度慢。</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//$_GET用来获取get方法传入的数据       get会拼接到地址栏上,</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//最大传2兆 (URL最大2兆)</span>    <span class="token keyword">echo</span> <span class="token string">"用户名:"</span><span class="token punctuation">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"密码:"</span><span class="token punctuation">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//$_POST用来获取post方法传入的数据</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//post安全性更高     </span>    <span class="token keyword">echo</span> <span class="token string">"用户名:"</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"密码:"</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//get和post都可以获取到</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//传值速度慢(不推荐使用)</span>    <span class="token keyword">echo</span> <span class="token string">"用户名:"</span><span class="token punctuation">.</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"密码:"</span><span class="token punctuation">.</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>数组数组(array)<br> 向数组后面添加值</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>     <span class="token comment" spellcheck="true">//索引数组</span>    <span class="token variable">$arr</span><span class="token operator">=</span><span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span>               <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//关联数组</span>    <span class="token variable">$arr2</span><span class="token operator">=</span><span class="token keyword">Array</span><span class="token punctuation">(</span>        <span class="token string">"xiaoming"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"a"</span><span class="token punctuation">,</span>        <span class="token string">"xiaohong"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"b"</span><span class="token punctuation">,</span>        <span class="token string">"xiaogang"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"c"</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$arr2</span><span class="token punctuation">[</span><span class="token string">"xiaolv"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"d"</span><span class="token punctuation">;</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>创建指定范围的数组</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">//$arr3=range("a","z");         //a到z</span>    <span class="token comment" spellcheck="true">//$arr3=range(1,9);             //1到9</span>    <span class="token variable">$arr3</span><span class="token operator">=</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>     <span class="token keyword">echo</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//count方法用来获取数组的长度</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$arr3</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//删除数组中的元素,连同下标一起删除</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>数组的遍历</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token variable">$arr4</span><span class="token operator">=</span><span class="token keyword">Array</span><span class="token punctuation">(</span>        <span class="token string">"a"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"zxs"</span><span class="token punctuation">,</span>        <span class="token string">"b"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"mjh"</span><span class="token punctuation">,</span>        <span class="token string">"c"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"lal"</span><span class="token punctuation">,</span>        <span class="token string">"d"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"wbd"</span><span class="token punctuation">,</span>        <span class="token string">"e"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"dsb"</span><span class="token punctuation">,</span>        <span class="token string">"f"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"dhq"</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$arr4</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"第"</span><span class="token punctuation">.</span><span class="token variable">$key</span><span class="token punctuation">.</span><span class="token string">"个"</span><span class="token punctuation">.</span><span class="token variable">$value</span><span class="token punctuation">.</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>数组的排序</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">sort</span><span class="token punctuation">(</span><span class="token variable">$arr4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//升序        </span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token function">rsort</span><span class="token punctuation">(</span><span class="token variable">$arr4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//降序</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>字符串与数组的转换</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token variable">$arr4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数组转字符串    </span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token variable">$str</span><span class="token operator">=</span><span class="token string">"abcdef"</span><span class="token punctuation">;</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>字符串(string)<br> strpos 获取指定字符在字符串中的位置</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token variable">$str</span><span class="token operator">=</span><span class="token string">"Stay foolish stay hungry"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token string">"stay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//13</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token string">"stay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//0     不区分大小写</span><span class="token delimiter">?></span></code></pre><p>替换字符串</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"stay"</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Stay foolish abc hungry</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"stay"</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//abc foolish abc hungry  不区分大小写</span><span class="token delimiter">?></span></code></pre><p>截取字符串</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//y foolish stay hungry</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>               <span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//y foo</span><span class="token delimiter">?></span></code></pre><p>查找字符串,连同后面的所有字符一起返回</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token string">"stay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//stay hungry</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token string">"stay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Stay foolish stay hungry          //不区分大小写</span><span class="token delimiter">?></span></code></pre><p>字符串长度</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//24</span><span class="token delimiter">?></span></code></pre><p>大小写转换</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//STAY FOOLISH STAY HUNGRY  转换成大写</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//stay foolish stay hungry  转换成小写</span><span class="token delimiter">?></span></code></pre><p>空格转为换行</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$str</span><span class="token operator">=</span>"stay     foolish"<span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">nl2br</span><span class="token punctuation">(</span><span class="token string">"$str"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>去除首尾空格</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//str       去除首尾空格</span>    <span class="token keyword">echo</span> <span class="token function">ltrim</span><span class="token punctuation">(</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//str       去除左边空格</span>    <span class="token keyword">echo</span> <span class="token function">rtrim</span><span class="token punctuation">(</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//str       去除右边空格</span><span class="token delimiter">?></span></code></pre><p>tmlspecialchars()把标签转换为字符串<br> strip_tags() 删除字符串中的标签</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;h1>标题&lt;/h1>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>标题&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//&lt;h1>标题&lt;/h1>       不解析标签           斯白受差死</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">strip_tags</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>标题&lt;/h1>"</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//标题                忽略标签</span><span class="token delimiter">?></span></code></pre><hr><h3 id="初识数据库"><a href="#初识数据库" class="headerlink" title="初识数据库"></a>初识数据库</h3><p> 1.创建新数据库，找到排序方式为utf8_general_ci<br> 2.数据库中还要有数据表，字段代表表头的个数<br> 3.给数据表的每个字段添加名字，类型以及长度<br> 4.点击结构，可以查看数据表结构<br> 5.钥匙所在的名字就是主键<br> 6.点击插入，可以插入数据<br> 7.点击执行可以完成插入</p><h3 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h3><p> SELECT INSERT UPDATE DELETE<br> 增删改查<br> SELECT name,id FROM students<br> 获取指定的字段的数据<br> SELECT COUNT(id) FROM students<br> 确定表内有多少条数据<br> SELECT * FROM students WHERE sex=‘男’<br> 指定查询类型查询数据<br> sql语句中不光可以用=&gt; &lt; &gt;= &lt;= &lt;&gt;<br> SELECT * FROM students WHERE sex=‘男’ AND name=’王八蛋’<br> 多个并列查询条件用AND<br> SELECT * FROM students WHERE name=‘齐文蒸’ OR name=’王八蛋’’<br> OR表示或<br> SELECT * FROM students WHERE NOT name=王八蛋’<br> LIMIT限制语句，限制返回多少条语句<br> SELECT * FROM students LIMIT 1<br> 排序<br> SELECT * FROM user ORDER BY name ASC 升序<br> SELECT * FROM user ORDER BY name DESC 降序</p><p>1.插入数据记录(INSERT)<br> 例：INSERT INTO student (name,tel) VALUES (‘崔东阳’,’123456’)<br> 一次插入多条记录<br> INSERT INTO student (name, tel)<br> VALUES (‘user1’, ‘123456’),(‘user2’,’123456’)</p><p>2.修改数据记录（UPDATE）<br> 例：UPDATE student SET name = ‘周小帅’, tel=’12345678’  WHERE id = 2</p><p>3.删除数据记录（DELETE） 删了就没了，慎用<br> 例：DELETE FROM student WHERE id = 4</p><h3 id="小知识："><a href="#小知识：" class="headerlink" title="小知识："></a>小知识：</h3><p> 密码也会存在数据库，但是如果被破解了数据库，那么密码就会泄露。通常密码都会经过加密，再存储。（MD5加密，sha1加密）<br> 暴力破解：一个一个试。<br> 银行防止暴力破解，每天只能输入错误3次</p><h3 id="通过PHP连接数据库"><a href="#通过PHP连接数据库" class="headerlink" title="通过PHP连接数据库"></a>通过PHP连接数据库</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token constant">PHP_VERSION</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//php的版本        7.2.8</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在php中想要获取数据</span><span class="token comment" spellcheck="true">//1.连接数据库</span>    <span class="token comment" spellcheck="true">//5.0以前:mysql_connect()</span>    <span class="token variable">$mysqli</span><span class="token operator">=</span><span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      网络连接<span class="token comment" spellcheck="true">//  print_r($mysql);        成功啦,会返回一个对象</span>    <span class="token comment" spellcheck="true">//mysqli_connect()  可选三个参数</span>    <span class="token comment" spellcheck="true">//第一个参数是服务器地址</span>    <span class="token comment" spellcheck="true">//第二个是用户名</span>    <span class="token comment" spellcheck="true">//第三个是密码(通常本地的没有密码)</span><span class="token comment" spellcheck="true">//2.设置编码方式,防止中文乱码</span>    <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"set names utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.打开数据库</span>    <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">select_db</span><span class="token punctuation">(</span><span class="token string">'datebase'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//操作数据</span>    <span class="token variable">$res</span><span class="token operator">=</span><span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT * FROM `students`'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//$row=mysqli_fetch_assoc($res)</span>    <span class="token comment" spellcheck="true">//$res获取的是资源,我们想要获取到数据的话需要对资源进行转化,mysqli_fetch_assoc()是转化资源的函数</span><span class="token comment" spellcheck="true">//4.关闭数据库</span>    <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token delimiter">?></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据可视化库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式(Regular Expression)</title>
      <link href="/2019/12/14/zheng-ze-biao-da-shi-regular-expression/"/>
      <url>/2019/12/14/zheng-ze-biao-da-shi-regular-expression/</url>
      
        <content type="html"><![CDATA[<h2 id="正则表达式-Regular-Expression"><a href="#正则表达式-Regular-Expression" class="headerlink" title="正则表达式(Regular Expression)"></a>正则表达式(Regular Expression)</h2><h3 id="一、正则表达式是什么？"><a href="#一、正则表达式是什么？" class="headerlink" title="一、正则表达式是什么？"></a>一、正则表达式是什么？</h3><p> 匹配想要的东西<br> 为什么使用正则表达式：可以<br> 1.测试字符串内的模式<br> 2.替换文本<br> 3.基于模式匹配从字符串中提取字符串</p><h3 id="二、-正则表达式的创建"><a href="#二、-正则表达式的创建" class="headerlink" title="二、.正则表达式的创建"></a>二、.正则表达式的创建</h3><p> 语法：<br> var  reg=/内容/修饰词<br> var  reg=new RegExp（pattern，modifiers）<br> pattern：模式<br> modifiers：修饰词<br> 方法：<br> test（）<br> 验证字符串是否满足正则表达式<br> exec（）</p><h3 id="三、字符串的方法"><a href="#三、字符串的方法" class="headerlink" title="三、字符串的方法"></a>三、字符串的方法</h3><p> search（/haha/）<br> 根据正则表达式进行查找<br> replace（/haha/，“hehe”）<br> 根据正则表达式进行查找替换</p><h3 id="四、正则语法规则"><a href="#四、正则语法规则" class="headerlink" title="四、正则语法规则"></a>四、正则语法规则</h3><p> 修饰词<br> i      ignore      匹配时忽略大小写<br> g     global      全局验证<br> m                    验证多行</p><p>匹配模式<br> 小括号（）<br> （abc）                        查找abc这个单词<br> （abc|bcd|def）            查找这三个单词其中的一个<br> 中括号[]<br> [ 12345]                          包括12345其中的某一个<br> [abc]                包括abc其中的某一个<br> [0-9]  包括所有数字<br> [a-z]  包括所有小写字母<br> [A-Z]  包括所有大写字母<br> [A-z]  包括所有字母，Z-a之间包含一些特殊字符</p><p>元字符<br> .<br> 表示所有的字符，想要验证”.”用反斜杠\进行转义<br> \d<br> 任何数字<br> \D<br> 任何非数字<br> \s<br> 空白字符<br> \S<br> 非空白字符<br> \w<br> 任何字母，数字，下划线<br> \W<br> 任何非字母，数字，下划线</p><p>量词<br> ^n<br> 匹配开头为n的字符串<br> n$<br> 匹配结尾为n的字符串<br> n+<br> 匹配一个或多个<br> n(x)<br> 匹配任何包含x个n的字符串<br> n(x,y)<br> 匹配任何包含x到n的字符串<br> n(x,)<br> 匹配至少有x个指定字符<br> n?<br> 表示有0个或一个指定字符<br> n*<br> 表示有0个或多个指定字符</p><p><strong>例:</strong></p><h4 id="1-验证手机号"><a href="#1-验证手机号" class="headerlink" title="1.验证手机号"></a>1.验证手机号</h4><p> 以1开头,判断第二位可以是3,5,6,7,8,9后面是9位数字</p><pre class=" language-jsx"><code class="language-jsx">btn1<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> reg1<span class="token operator">=</span><span class="token regex">/^1[356789]\d{9}$/</span>            <span class="token keyword">var</span> str1<span class="token operator">=</span>ipt1<span class="token punctuation">.</span>value            <span class="token keyword">if</span><span class="token punctuation">(</span>reg1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'不成'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h4 id="2-正则验证密码"><a href="#2-正则验证密码" class="headerlink" title="2.正则验证密码"></a>2.正则验证密码</h4><p> 第一个字符是大写字母，最短8位，要求包括字母，数字</p><pre class=" language-jsx"><code class="language-jsx">btn2<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> reg2<span class="token operator">=</span><span class="token regex">/^[A-Z][a-zA-Z\d]{7,}$/</span>            <span class="token keyword">var</span> str2<span class="token operator">=</span>ipt2<span class="token punctuation">.</span>value            <span class="token keyword">if</span><span class="token punctuation">(</span>reg2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'不成'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h4 id="3-正则验证邮箱"><a href="#3-正则验证邮箱" class="headerlink" title="3.正则验证邮箱"></a>3.正则验证邮箱</h4><p> 邮箱的名字是\w    中间@符号       @符号后面是数字或者字母        后面.com</p><pre class=" language-jsx"><code class="language-jsx">btn3<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> reg3<span class="token operator">=</span><span class="token regex">/^\w+@[0-9a-zA-Z]+(\.com)$/</span>            <span class="token keyword">var</span> str3<span class="token operator">=</span>ipt3<span class="token punctuation">.</span>value            <span class="token keyword">if</span><span class="token punctuation">(</span>reg3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'不成'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h4 id="4-正则验证身份证号"><a href="#4-正则验证身份证号" class="headerlink" title="4.正则验证身份证号"></a>4.正则验证身份证号</h4><pre class=" language-jsx"><code class="language-jsx">btn4<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> reg4<span class="token operator">=</span><span class="token regex">/^\d{6}(19|20)\d{2}(0|1)\d(0|1|2|3)\d{4}(\d|X)$/</span>            <span class="token keyword">var</span> str4<span class="token operator">=</span>ipt4<span class="token punctuation">.</span>value            <span class="token keyword">if</span><span class="token punctuation">(</span>reg4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'不成'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h4 id="5-能够匹配“go-go”和“abc-abc”但不能匹配“go-abc”的正则"><a href="#5-能够匹配“go-go”和“abc-abc”但不能匹配“go-abc”的正则" class="headerlink" title="5.能够匹配“go go”和“abc abc”但不能匹配“go abc”的正则"></a>5.能够匹配“go go”和“abc abc”但不能匹配“go abc”的正则</h4><pre class=" language-js"><code class="language-js">btn5<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> reg5<span class="token operator">=</span><span class="token regex">/(^\w{2}\s\w{2}$)|(^\w{3}\s\w{3}$)/</span>            <span class="token keyword">var</span> str5<span class="token operator">=</span>ipt5<span class="token punctuation">.</span>value            <span class="token keyword">if</span><span class="token punctuation">(</span>reg5<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'不成'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿淘宝轮播图</title>
      <link href="/2019/12/12/fang-tao-bao-lun-bo-tu/"/>
      <url>/2019/12/12/fang-tao-bao-lun-bo-tu/</url>
      
        <content type="html"><![CDATA[<pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*index.css*/</span><span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">980</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">455</span>px<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">219</span>px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.focus</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">721</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">455</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.focus</span> ul </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.focus</span> ul li </span><span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.arrow-l</span>,<span class="token class">.arrow-r</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.arrow-r</span> </span><span class="token punctuation">{</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.circle</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.circle</span> li </span><span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*background-color: #fff;*/</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">3</span>px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*鼠标经过显示小手*/</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.current</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*清除元素默认的内外边距  */</span><span class="token selector">* </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*让所有斜体 不倾斜*/</span><span class="token selector">em,i </span><span class="token punctuation">{</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*去掉列表前面的小点*/</span><span class="token selector">li </span><span class="token punctuation">{</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*图片没有边框   去掉图片底侧的空白缝隙*/</span><span class="token selector">img </span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*ie6*/</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*让button 按钮 变成小手*/</span><span class="token selector">button </span><span class="token punctuation">{</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*取消链接的下划线*/</span><span class="token selector">a </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#e33333</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button,input </span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Microsoft YaHei'</span>, <span class="token string">'Heiti SC'</span>, tahoma, arial, <span class="token string">'Hiragino Sans GB'</span>, \<span class="token entity" title="\5B8B">\5B8B</span><span class="token entity" title="\4F53">\4F53</span>, sans-serif<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*取消轮廓线 蓝色的*/</span>    <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">font</span><span class="token punctuation">:</span> <span class="token number">12</span>px/<span class="token number">1.5</span> <span class="token string">'Microsoft YaHei'</span>, <span class="token string">'Heiti SC'</span>, tahoma, arial, <span class="token string">'Hiragino Sans GB'</span>, \<span class="token entity" title="\5B8B">\5B8B</span><span class="token entity" title="\4F53">\4F53</span>, sans-serif<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.hide</span>,<span class="token class">.none</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*清除浮动*/</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"."</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>    *<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>品优购-综合网购首选-正品低价、品质保障、配送及时、轻松购物！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>品优购JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,品优购<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入facicon.ico网页图标 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>favicon.ico<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/x-icon<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入 首页的css文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 这个animate.js 必须写到 index.js的上面引入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/move.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入我们首页的js文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>focus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 左侧按钮 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arrow-l<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token entity" title="&lt;">&amp;lt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 右侧按钮 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arrow-r<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 核心的滚动区域 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload/focus.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload/focus1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload/focus2.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload/focus3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 小圆圈 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*move.js*/</span><span class="token keyword">function</span> <span class="token function">css</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>currentStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>currentStyle<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> json<span class="token punctuation">,</span> during<span class="token punctuation">,</span> fx<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span>    <span class="token keyword">var</span> starttime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> d <span class="token operator">=</span> during <span class="token operator">||</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>attr <span class="token keyword">in</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>        j<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">==</span> <span class="token string">'opacity'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token function">css</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'opacity'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            j<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">css</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        j<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">=</span> json<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> currenttime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> t <span class="token operator">=</span> currenttime <span class="token operator">-</span> starttime<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">>=</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>            t <span class="token operator">=</span> d<span class="token punctuation">;</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>            callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>attr <span class="token keyword">in</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> v <span class="token operator">=</span> Tween<span class="token punctuation">[</span>fx <span class="token operator">||</span> <span class="token string">'linear'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> j<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">,</span> j<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">==</span> <span class="token string">'opacity'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> v<span class="token punctuation">;</span>                obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>filter <span class="token operator">=</span> <span class="token string">"alpha(opacity="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            obj<span class="token punctuation">.</span>style<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> v <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> Tween <span class="token operator">=</span> <span class="token punctuation">{</span>    linear<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//匀速</span>        <span class="token keyword">return</span> c <span class="token operator">*</span> t <span class="token operator">/</span> d <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    easeIn<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//加速曲线</span>        <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    easeOut<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//减速曲线</span>        <span class="token keyword">return</span> <span class="token operator">-</span>c <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    easeBoth<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//加速减速曲线</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> c <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span>c <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">--</span>t<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    easeInStrong<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//加加速曲线</span>        <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    easeOutStrong<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//减减速曲线</span>        <span class="token keyword">return</span> <span class="token operator">-</span>c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">=</span> t <span class="token operator">/</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    easeBothStrong<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//加加速减减速曲线</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> c <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span>c <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    elasticIn<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//正弦衰减曲线（弹动渐入）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p <span class="token operator">=</span> d <span class="token operator">*</span> <span class="token number">0.3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a <span class="token operator">||</span> a <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> p <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> p <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span>c <span class="token operator">/</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>a <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">*</span> d <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">/</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    elasticOut<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//正弦增强曲线（弹动渐出）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p <span class="token operator">=</span> d <span class="token operator">*</span> <span class="token number">0.3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a <span class="token operator">||</span> a <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> p <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> p <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span>c <span class="token operator">/</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">*</span> d <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">/</span> p<span class="token punctuation">)</span> <span class="token operator">+</span> c <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    elasticBoth<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p <span class="token operator">=</span> d <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0.3</span> <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a <span class="token operator">||</span> a <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> p <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> p <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span>c <span class="token operator">/</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">0.5</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span>                Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">*</span> d <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">/</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span>            Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">*</span> d <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">/</span> p<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> c <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    backIn<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//回退加速（回退渐入）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> s <span class="token operator">==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s <span class="token operator">=</span> <span class="token number">1.70158</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    backOut<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> s <span class="token operator">==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s <span class="token operator">=</span> <span class="token number">3.70158</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//回缩的距离</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">=</span> t <span class="token operator">/</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    backBoth<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> s <span class="token operator">==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s <span class="token operator">=</span> <span class="token number">1.70158</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> c <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">*</span> t <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">*</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.525</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">-</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> c <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">*</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.525</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    bounceIn<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//弹球减振（弹球渐出）</span>        <span class="token keyword">return</span> c <span class="token operator">-</span> Tween<span class="token punctuation">[</span><span class="token string">'bounceOut'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>d <span class="token operator">-</span> t<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    bounceOut<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">/</span><span class="token operator">=</span> d<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7.5625</span> <span class="token operator">*</span> t <span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7.5625</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.5</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">2.5</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7.5625</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2.25</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">0.9375</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7.5625</span> <span class="token operator">*</span> <span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2.625</span> <span class="token operator">/</span> <span class="token number">2.75</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> t <span class="token operator">+</span> <span class="token number">0.984375</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    bounceBoth<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> d <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Tween<span class="token punctuation">[</span><span class="token string">'bounceIn'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>t <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Tween<span class="token punctuation">[</span><span class="token string">'bounceOut'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>t <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> c <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*index.js*/</span>window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*获取轮播图主视口*/</span>    <span class="token keyword">var</span> focus <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".focus"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*获取左右切换按钮*/</span>    <span class="token keyword">var</span> btnNext <span class="token operator">=</span> focus<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".arrow-r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> btnPre <span class="token operator">=</span> focus<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".arrow-l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*获取轮播图胶片带 ul*/</span>    <span class="token keyword">var</span> uls <span class="token operator">=</span> focus<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*获取胶片带上的每一幅图片的承载框集合 li*/</span>    <span class="token keyword">var</span> lis <span class="token operator">=</span> uls<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*获取小圆点承载框 为后续遍历添加小圆点提供容器*/</span>    <span class="token keyword">var</span> ols <span class="token operator">=</span> focus<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".circle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*新建全局控制开关  主要用来控制动画的启停 但实质上并未停止定时器，只是控制了定时器中的执行函数*/</span>    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*声明并初始化全局 nums*/</span>    <span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*以轮播图片数量为遍历条件，向小圆点承载容器中遍历添加小圆点（即向其中添加li元素），    并且给第一个小圆点添加class的属性为"current"（在CSS里预定义好的当前选中的样式），    同时，所有添加的li标签，添加额外的对象属性为index:i 然后通过fatherNode.appendChild(sonNode)    将所有的li添加到ols中*/</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            li<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        li<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        ols<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*以下两句需要写在上述遍历完成之后，因为上述遍历的条件是i &lt; lis.length,而先执行下面两句，    上述遍历就会多一个小圆点，或者也可以通过i &lt; lis.length -1 进行修正，    克隆第一张图片，追加到轮播图胶片带的尾部，为了无缝轮播做准备*/</span>    <span class="token keyword">var</span> liEnd <span class="token operator">=</span> lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uls<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>liEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取添加完成后的ol下的小圆点的集合 li</span>    <span class="token keyword">var</span> olis <span class="token operator">=</span> ols<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历上述集合里的li元素对象，并且添加点击事件</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        olis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> olis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//遍历所有小圆点，清除所有小圆点的class值</span>                olis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//点击哪个小圆点就给哪个小圆点添加class="current"</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取当前点击小圆点的index值</span>            <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置ul的定位left值为index值乘以一个li的身位距离</span>            uls<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token operator">-</span> num <span class="token operator">*</span> lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将全局变量的nums设置为当前下标，为了让定时器与点击圆点同步</span>            nums <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//排他思想 清除所有小圆点的class属性值</span>    <span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> olis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//遍历所有小圆点，清除所有小圆点的class值</span>            olis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//轮播动画实现 -- 定时器 无缝轮播</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            nums<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*当轮播到uls.querySelectorAll("li").length-1（即最后一张的时候）*/</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">===</span> uls<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                olis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current"</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//先是500ms内切换到下一张，然后执行定位到第一张和执行</span>                <span class="token function">move</span><span class="token punctuation">(</span>uls<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"left"</span><span class="token punctuation">:</span> <span class="token operator">-</span> nums <span class="token operator">*</span> lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"easeOut"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    uls<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token function">move</span><span class="token punctuation">(</span>uls<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"left"</span><span class="token punctuation">:</span> <span class="token operator">-</span> nums <span class="token operator">*</span> lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"easeOut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                olis<span class="token punctuation">[</span>nums<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current"</span><span class="token punctuation">;</span>                <span class="token function">move</span><span class="token punctuation">(</span>uls<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"left"</span><span class="token punctuation">:</span> <span class="token operator">-</span> nums <span class="token operator">*</span> lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"easeOut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//以下通过flag控制定时器内的执行函数，来控制是否轮播</span>    <span class="token comment" spellcheck="true">//鼠标悬停 显示左右箭头</span>    focus<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseover"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        btnNext<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>        btnPre<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    focus<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseout"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        btnNext<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>        btnPre<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btnNext<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实现上一张效果</span>    btnPre<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*实现第一张到最后一张的无缝切换，原理：如果此时为第一张，点击上一张按钮，则立即        将轮播图胶片带定位到追加的最后一张（这一张和第一张相同，所以不会看出切换效果），        然后改变小圆点的当前选中为最后一张（不包含追加的那一张），然后执行move函数，切换到        最后一张（实质上是从追加的那一张切换到最后一张）*/</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            uls<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>olis<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">*</span> lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            nums <span class="token operator">=</span> olis<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            olis<span class="token punctuation">[</span>nums<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current"</span><span class="token punctuation">;</span>            <span class="token function">move</span><span class="token punctuation">(</span>uls<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"left"</span><span class="token punctuation">:</span> <span class="token operator">-</span> nums <span class="token operator">*</span> lis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"easeOut"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            nums <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><img src="/images/image-20191212104251554.png" alt="image-20191212104251554"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 手写轮播图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产品图片放大镜</title>
      <link href="/2019/12/09/chan-pin-tu-pian-fang-da-jing/"/>
      <url>/2019/12/09/chan-pin-tu-pian-fang-da-jing/</url>
      
        <content type="html"><![CDATA[<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>          <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>京东手机放大镜效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">* </span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">body </span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*鼠标移动事件 主体*/</span>        <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">vertical-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*可移动透明块*/</span>        <span class="token selector"><span class="token class">.moveBlock</span> </span><span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">.5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*放大镜显示块*/</span>        <span class="token selector"><span class="token class">.after</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">205</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("3.jpg")</span> no-repeat <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">600</span>px <span class="token number">600</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*放大镜遮罩层 显示JD水印*/</span>        <span class="token selector"><span class="token class">.cover</span> </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#e00000</span><span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">.4</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*播放键容器*/</span>        <span class="token selector"><span class="token class">.cover_btn</span> </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*播放键外圈*/</span>        <span class="token selector"><span class="token class">.cover_btn</span> a </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">100</span>,<span class="token number">120</span>,<span class="token number">150</span>,<span class="token number">.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid white<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">70%</span> auto <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cover_btn</span> a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*播放键 内三角*/</span>        <span class="token selector"><span class="token class">.cover_btn</span> a span </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid white<span class="token punctuation">;</span>            <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid transparent<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid transparent<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tu<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mainImg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>moveBlock<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>京东 JD.COM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cover_btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> mainView <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> moveBlock <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".moveBlock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> after <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".after"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mainView<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span>move<span class="token punctuation">)</span><span class="token punctuation">;</span>    mainView<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseout"</span><span class="token punctuation">,</span>dis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>        after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> point <span class="token operator">=</span> moveBlock<span class="token punctuation">.</span>offsetWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> maxWay <span class="token operator">=</span> mainView<span class="token punctuation">.</span>offsetWidth <span class="token operator">-</span> moveBlock<span class="token punctuation">.</span>offsetWidth <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//移动块的定位left值</span>        <span class="token keyword">var</span> lenX <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> mainView<span class="token punctuation">.</span>offsetLeft <span class="token operator">-</span> point<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//移动块的定位top值</span>        <span class="token keyword">var</span> lenY <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> mainView<span class="token punctuation">.</span>offsetTop <span class="token operator">-</span> point<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lenX <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> lenY <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lenX <span class="token operator">></span> maxWay<span class="token punctuation">)</span><span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> maxWay <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPositionX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">*</span> maxWay <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> lenX <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPositionX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">*</span> lenX <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lenY <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lenY <span class="token operator">></span> maxWay<span class="token punctuation">)</span><span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> maxWay <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPositionY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">*</span> maxWay <span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lenY <span class="token operator">></span> mainView<span class="token punctuation">)</span><span class="token punctuation">{</span>            after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> lenY <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPositionY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">*</span> lenY <span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*移出鼠标，全部隐藏*/</span>    <span class="token keyword">function</span> <span class="token function">dis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>        after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/images/image-20191209160123252.png" alt="image-20191209160123252"></p><p>效果如上图所示</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 手写JS效果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web API</title>
      <link href="/2019/12/01/web-api/"/>
      <url>/2019/12/01/web-api/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-DOM-amp-BOM"><a href="#JavaScript-DOM-amp-BOM" class="headerlink" title="JavaScript DOM&amp;BOM"></a>JavaScript DOM&amp;BOM</h1><ul><li>ECMAScript</li></ul><p><strong>Web APIs</strong>  负责页面交互效果</p><ul><li>DOM<ol><li>其实时我们操作页面元素的各种方法的集合，也可以称为是方法集合的对象。（操作页面的方法包括：让元素显示隐藏、改变元素的宽高颜色等）</li></ol></li><li>BOM</li></ul><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><ul><li>API(Application Programming Interface,应用程序编程接口)是一些<strong>预先定义的函数</strong>，目的是提供应用程序与开发人员基于某些软件或硬件得以访问一组例程的能力，但又无需访问源码或者理解内部工作机制的细节。<strong>简单来讲，API是给程序员提供的一种工具，以便能更轻松地实现想要完成的功能。</strong></li></ul><h4 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h4><ul><li>Web API是浏览器提供的一套操作<strong>浏览器功能</strong>和<strong>页面元素</strong>的API(BOM&amp;DOM)。</li></ul><h4 id="API-和-Web-API-总结"><a href="#API-和-Web-API-总结" class="headerlink" title="API 和 Web API 总结"></a>API 和 Web API 总结</h4><p>API 是为我们程序员提供的一个接口，帮助我们实现某种功能</p><p>API 其实就是一组方法的集合体</p><p>Web API 就是浏览器中的一组方法的集合体，我们 JS 程序运行在浏览器中的时候，就可以调用Web API 中的各种方法，如果运行在其他环境中，就需要调用其他环境提供的API方法。（比如让js程序在node.js环境中运行，则会报错）</p><p>Web APIs </p><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><ol><li><p>DOM(Document Object Model,文档对象模型)，是W3C组织推荐的处理可扩展标记语言（HTML或者XML）的标准编程接口。</p></li><li><p>DOM树（节点树）</p><p>在DOM中，我们认为网页中所有内容都是节点<code>node</code>（标签、属性、文本、注释等），我们整个页面都是由各种节点组成，因此，我们整个页面也可以被称为节点树或者DOM树。</p><p>DOM把以上内容都看作是对象。</p></li></ol><h2 id="一、DOM-获取元素"><a href="#一、DOM-获取元素" class="headerlink" title="一、DOM 获取元素"></a>一、DOM 获取元素</h2><h3 id="1-获取页面中元素的几种简单方法"><a href="#1-获取页面中元素的几种简单方法" class="headerlink" title="1. 获取页面中元素的几种简单方法"></a>1. 获取页面中元素的几种简单方法</h3><h4 id="1-1-根据-ID-（获取某个元素对象）"><a href="#1-1-根据-ID-（获取某个元素对象）" class="headerlink" title="1.1 根据 ID （获取某个元素对象）"></a>1.1 根据 ID （获取<strong>某个</strong>元素对象）</h4><p>使用 <code>getElementById(&quot;类选择器不带符号&quot;);</code></p><ol><li>因为我们文档页面从上往下加载，所以先要有标签，所以我们script写到对应的标签下面</li><li>get （获得）Element （元素） By （通过） 驼峰命名法</li><li>参数是大小写敏感的字符串</li><li>返回的是指定元素对象</li></ol><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>me<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个打印文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> d <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"me"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="1-2-通过标签名获取（某些元素对象的集合-同种元素对象）"><a href="#1-2-通过标签名获取（某些元素对象的集合-同种元素对象）" class="headerlink" title="1.2 通过标签名获取（某些元素对象的集合 - 同种元素对象）"></a>1.2 通过标签名获取（某些元素对象的集合 - 同种元素对象）</h4><p>使用<code>getElementsByTagName(&quot;标签选择器&quot;)</code></p><p>获取过来的是元素对象的集合，以伪数组的形式存储。HTMLCollection</p><p><img src="/images/image-20191209163814791.png" alt="image-20191209163814791"></p><h4 id="拓展1：伪数组"><a href="#拓展1：伪数组" class="headerlink" title="拓展1：伪数组"></a>拓展1：伪数组</h4><p>具有数组的形态，但是不具备数组的方法或者属性的数据集合被称为伪数组或者类数组，比较典型的有arguments还有<code>getElementsByTagName()</code>获取的页面元素的集合。</p><p>特点：有length属性且length属性的值为Number类型的对象，如果length的值不为零，则其他属性按照类似数组一样键（下标）：值对的形式存储。</p><p>这样也非常方便遍历得到获取的相应的元素对象。</p><p>Array.from(伪数组);可以把伪数组转化成真实的数组，值就是伪数组中的元素对象<code>HTMLLIElement</code>。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"con"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>我是li1<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>我是li2<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>我是li3<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>我是li4<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>我是li5<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="/images/image-20191209164920599.png" alt="image-20191209164920599"></p><h3 id="2-HTML5-新增的获取元素方法"><a href="#2-HTML5-新增的获取元素方法" class="headerlink" title="2. HTML5 新增的获取元素方法"></a>2. HTML5 新增的获取元素方法</h3><h4 id="2-1-通过类名获取（某些元素对象的集合-同类名元素对象）"><a href="#2-1-通过类名获取（某些元素对象的集合-同类名元素对象）" class="headerlink" title="2.1 通过类名获取（某些元素对象的集合 - 同类名元素对象）"></a>2.1 通过类名获取（某些元素对象的集合 - 同类名元素对象）</h4><p>使用<code>getElementsByClassName(&quot;类选择器名，不加符号&quot;)</code></p><p>获取过来的是元素对象的集合，以伪数组的形式存储。HTMLCollection</p><h4 id="2-2-全局CSS选择器获取"><a href="#2-2-全局CSS选择器获取" class="headerlink" title="2.2 全局CSS选择器获取"></a>2.2 全局CSS选择器获取</h4><p>使用</p><ol><li><p><code>querySelector(&quot;选择器加符号，标签选择器无符号&quot;)</code></p><p>返回指定选择器的第一个元素对象，类似<code>getElementById(&quot;idValue&quot;)</code></p></li><li><p><code>querySelectorAll(&quot;选择器加符号，标签选择器无符号&quot;)</code></p><p>返回指定选择器的所有元素对象的集合NodeList。</p></li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/images/image-20191209171701515.png" alt="image-20191209171701515"></p><h4 id="拓展2：NodeList"><a href="#拓展2：NodeList" class="headerlink" title="拓展2：NodeList"></a>拓展2：NodeList</h4><p><code>NodeList</code> 对象是一个节点的集合，是由 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/childNodes" target="_blank" rel="noopener"><code>Node.childNodes</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll" target="_blank" rel="noopener"><code>document.querySelectorAll</code></a> 返回的.</p><blockquote><p>NodeList<strong>不是一个数组</strong>，是一个类似数组的对象(<em>Like Array Object</em>).</p><p>虽然NodeList不是一个数组，但是可以使用forEach()对其进行迭代。</p><p>还可以使用Array.from()将其转换为实际数组。</p></blockquote><p>在一些情况下，<code>NodeList</code> 对象是一个实时集合，也就是说，如果文档中的节点树发生变化，则已经存在的实时 <code>NodeList</code> 对象也会随之变化。例如，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/childNodes" target="_blank" rel="noopener"><code>Node.childNodes</code></a> 是实时的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'parent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child_nodes <span class="token operator">=</span> parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child_nodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我们假设结果会是“2”</span>parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child_nodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 但此时的输出是“3”</span></code></pre><p>在其他情况下，<code>NodeList</code> 是一个静态集合，也就意味着随后对文档对象模型的任何改动都不会影响集合的内容。比如<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll" target="_blank" rel="noopener"><code>document.querySelectorAll</code></a> 就会返回一个静态的 <code>NodeList</code>。</p><p>最好牢记这种不同，尤其是在当你选择 <code>NodeList</code> 中所有项遍历的方式，或缓存它的长度的时候。</p><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/length" target="_blank" rel="noopener"><code>NodeList.length</code></a></p><p><code>NodeList</code> 中包含的节点个数。</p></li></ul><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for" target="_blank" rel="noopener">for</a> 循环遍历一个<code>NodeList</code> 对象中的所有的节点：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myNodeList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> item <span class="token operator">=</span> myNodeList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 调用 myNodeList.item(i) 是没有必要的</span><span class="token punctuation">}</span></code></pre><p><strong>不要尝试使用 <code>for...in</code> 或者 <code>for each...in</code> 来遍历一个 <code>NodeList</code> 对象中的元素</strong>，因为，如果你把上述两个属性也看成 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element" target="_blank" rel="noopener"><code>element</code></a> 对象的话，<code>NodeList</code> 对象中的 <code>length</code> 和 <code>item</code> 属性也会被遍历出来，这可能会导致你的脚本运行出错。此外，<code>for...in</code> 不能保证访问这些属性的顺序。</p><p><a href="https://developer.mozilla.org/zh-CN/JavaScript/Reference/Statements/for...of" target="_blank" rel="noopener">for…of</a> 循环<strong>将会</strong>正确的遍历 <code>NodeList</code> 对象：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'input[type=checkbox]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> checkbox <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>  checkbox<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最近，浏览器也支持一些遍历方法，比如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/forEach" target="_blank" rel="noopener"><code>forEach()</code></a> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/entries" target="_blank" rel="noopener"><code>entries()</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/values" target="_blank" rel="noopener"><code>values()</code></a>、和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/keys" target="_blank" rel="noopener"><code>keys()</code></a>。</p><p>也有一种使用数组 <code>Array</code> 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener"><code>Array.prototype.forEach</code></a> 来遍历 <code>NodeList</code> 的方法，这种方法兼容 Internet Explorer ：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'input[type=checkbox]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>checkbox<span class="token punctuation">)</span> <span class="token punctuation">{</span>  checkbox<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="为什么-NodeList-不是数组？"><a href="#为什么-NodeList-不是数组？" class="headerlink" title="为什么 NodeList 不是数组？"></a>为什么 NodeList 不是数组？</h5><p><code>NodeList</code> 对象在某些方面和数组非常相似，看上去可以直接使用从 <code>Array.prototype</code> 上继承的方法。然而，除了 <code>forEach</code> 方法，<code>NodeList</code> 没有这些类似数组的方法。</p><p>JavaScript 的继承机制是基于原型的。数组元素之所以有一些数组方法（比如 <code>forEach</code> 和 <code>map</code>），是因为它的原型链上有这些方法，如下:</p><p><code>myArray --&gt; Array.prototype --&gt; Object.prototype --&gt; null</code>（想要获取一个对象的原型链，可以连续地调用 <code>Object.getPrototypeOf</code>，直到原型链尽头）。</p><p><code>forEach</code>，<code>map</code> 这些方式其实是 <code>Array.prototype</code> 这个对象的方法。</p><p>和数组不一样的是，<code>NodeList</code> 的原型链是这样的：</p><pre><code>myNodeList --&gt; NodeList.prototype --&gt; Object.prototype --&gt; null</code></pre><p>NodeList的原型上除了类似数组的 <code>forEach</code> 方法之外，还有 <code>item</code>，<code>entries</code>，<code>keys</code> 和 <code>values</code> 方法。</p><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>一个解决办法就是把 <code>Array.prototype</code> 上的方法添加到 <code>NodeList.prototype</code> 上。可是，要注意<a href="http://perfectionkills.com/whats-wrong-with-extending-the-dom/" target="_blank" rel="noopener">扩展DOM对象的原型是非常危险的</a>，尤其是在旧版本的Internet Explorer（6，7，8）中。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arrayMethods <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span> Array<span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span>arrayMethods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> attachArrayMethodsToNodeList <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">attachArrayMethodsToNodeList</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>methodName <span class="token operator">!==</span> <span class="token string">"length"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    NodeList<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span> <span class="token string">'div'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> firstDiv <span class="token operator">=</span> divs<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>firstDiv<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span> divChild <span class="token punctuation">)</span><span class="token punctuation">{</span>  divChild<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'#0F0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不扩展 DOM 对象原型的解决办法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> forEach <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach<span class="token punctuation">;</span><span class="token keyword">var</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span> <span class="token string">'div'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> firstDiv <span class="token operator">=</span> divs<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>forEach<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>firstDiv<span class="token punctuation">.</span>childNodes<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span> divChild <span class="token punctuation">)</span><span class="token punctuation">{</span>  divChild<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'#0F0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>请注意，在上面的代码中，将某个宿主对象 （如 <code>NodeList</code>） 作为 <code>this</code> 传递给原生方法 （如 forEach） 不能保证在所有浏览器中工作，已知在一些浏览器中会失败。</p></blockquote><h4 id="拓展3：HTMLCollection"><a href="#拓展3：HTMLCollection" class="headerlink" title="拓展3：HTMLCollection"></a>拓展3：HTMLCollection</h4><p><strong><code>HTMLCollection</code></strong> 接口表示一个包含了元素（元素顺序为文档流中的顺序）的通用集合（generic collection），还提供了用来从该集合中选择元素的方法和属性。</p><p><strong>注意：由于历史原因（DOM4之前，实现该接口的集合只能包含 HTML 元素），该接口被称为</strong> <code>HTMLCollection</code>。</p><p>HTML DOM 中的 <code>HTMLCollection</code> 是即时更新的（live）；当其所包含的文档结构发生改变时，它会自动更新。</p><h5 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h5><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCollection/length" target="_blank" rel="noopener"><code>HTMLCollection.length</code></a> 只读</p><p>返回集合当中子元素的数目。</p></li></ul><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCollection/item" target="_blank" rel="noopener"><code>HTMLCollection.item()</code></a></p><p>根据给定的索引（从0开始），返回具体的节点。如果索引超出了范围，则返回 <code>null</code>。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCollection/namedItem" target="_blank" rel="noopener"><code>HTMLCollection.namedItem()</code></a></p><p>根据 Id 返回指定节点，或者作为备用，根据字符串所表示的 <code>name</code> 属性来匹配。根据 name 匹配只能作为最后的依赖，并且只有当被引用的元素支持 <code>name</code> 属性时才能被匹配。如果不存在符合给定 name 的节点，则返回 <code>null</code>。</p></li></ul><h5 id="在-JavaScript-中使用"><a href="#在-JavaScript-中使用" class="headerlink" title="在 JavaScript 中使用"></a>在 JavaScript 中使用</h5><p>在 JavaScript 中，为了获取给定的 HTMLCollection 的元素，可以使用方括号语法来代替直接调用 <code>item()</code> 或 <code>namedItem()</code> 方法。在方括号中，数值如同 <code>item()</code>，字符串值如同 <code>namedItem()。</code></p><p>例如，假定在文档中有一个元素，且它的 <code>id</code> 是 <code>&quot;myForm&quot;</code>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> elem1<span class="token punctuation">,</span> elem2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// document.forms 是一个 HTMLCollection</span>elem1 <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>elem2 <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>elem1 <span class="token operator">===</span> elem2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显示 "true"</span>elem1 <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token string">"myForm"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>elem2 <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">.</span><span class="token function">namedItem</span><span class="token punctuation">(</span><span class="token string">"myForm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>elem1 <span class="token operator">===</span> elem2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显示 "true"</span></code></pre><h5 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h5><p>当使用字符串作为 namedItem 的参数，且匹配的元素多于一个时，不同的浏览器表现不同。Firefox 8 表现如同 DOM 2 和 DOM 4 说明的，返回第一个匹配的元素。而 Webkit 浏览器和 IE 返回另外一个 HTMLCollection，Opera 返回一个包含所有元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList" target="_blank" rel="noopener"><code>NodeList</code></a>。</p><hr><h3 id="3-特殊元素的获取"><a href="#3-特殊元素的获取" class="headerlink" title="3. 特殊元素的获取"></a>3. 特殊元素的获取</h3><h4 id="3-1-获取-body-元素"><a href="#3-1-获取-body-元素" class="headerlink" title="3.1 获取 body 元素"></a>3.1 获取 body 元素</h4><p><code>document.body;</code></p><h4 id="3-2-获取-HTML-元素"><a href="#3-2-获取-HTML-元素" class="headerlink" title="3.2 获取 HTML 元素"></a>3.2 获取 HTML 元素</h4><p><code>document.documentElement;</code></p><h2 id="二、事件"><a href="#二、事件" class="headerlink" title="二、事件"></a>二、事件</h2><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。</p><p>简单理解：触发——响应机制。</p><p>网页中的每个元素都可以产生某些可以触发的 JavaScript 事件。就像<code>&lt;a&gt;</code>标签自带的转跳机制和鼠标变为小手。即点击（触发）转跳（响应）悬停（触发）变小手（响应）。</p><h4 id="1-事件三要素"><a href="#1-事件三要素" class="headerlink" title="1. 事件三要素"></a>1. 事件三要素</h4><ol><li><p>事件源</p><p>谁？ 页面元素</p></li><li><p>事件类型</p><p>如何触发 什么事件？鼠标点击（click）、悬停(mouseover)、键盘按下(keydown)、滑动滚轮(mousewheel)等</p></li></ol><table><thead><tr><th>鼠标事件</th><th>触发事件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过（悬停）触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发（表单）</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><ol><li><p>事件处理程序</p><p>通过一个函数赋值的方式完成</p></li></ol><h4 id="2-执行事件的步骤"><a href="#2-执行事件的步骤" class="headerlink" title="2. 执行事件的步骤"></a>2. 执行事件的步骤</h4><ol><li>获取事件源</li><li>注册事件（绑定事件类型）</li><li>添加事件处理程序（采取函数赋值的形式）</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"----"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="三、DOM-操作元素"><a href="#三、DOM-操作元素" class="headerlink" title="三、DOM 操作元素"></a>三、DOM 操作元素</h2><h3 id="1-DOM-操作元素之改变内容"><a href="#1-DOM-操作元素之改变内容" class="headerlink" title="1. DOM 操作元素之改变内容"></a>1. DOM 操作元素之改变内容</h3><p>JavaScript 的 DOM 操作可以改变网页的内容、结构和样式，我们可以利用DOM操作元素来改变元素里面的内容、属性等。</p><h4 id="1-1-Element-innerText"><a href="#1-1-Element-innerText" class="headerlink" title="1.1 Element.innerText"></a>1.1 Element.innerText</h4><p>非标准 不识别html标签，去除空格和换行</p><h4 id="1-2-Element-innerHTML"><a href="#1-2-Element-innerHTML" class="headerlink" title="1.2 Element.innerHTML"></a>1.2 Element.innerHTML</h4><p>W3C标准 识别html标签，保留空格和换行（用的多）</p><p>获取系统时间：</p><pre class=" language-html"><code class="language-html"></code></pre><p>以上两个属性，都是可读写的，并且向内部添加内容时，会覆盖原有内容，如需保留原有内容，则需要拼接原有的内容</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"要添加的内容"</span><span class="token punctuation">;</span></code></pre><p>事件驱动函数中的this永远指向当前时间函数所挂载的那个DOM对象，简单的来说，就是给哪个元素添加了事件，那么这个事件中的this就指向这个元素。</p><p>定位会影响他的层级，所以鼠标事件可能会受到影响</p><p>style对象里面保存了所有的css样式，作为他的属性名，任何一个元素都拥有style对象，对象中的属性都是一样的，如果当前没有默认的行内样式，则当前样式的属性值为空。</p><p>style对象的作用原理，就是但我们使用style给元素添加样式的时候，他会默认给元素添加一个行内样式，因此达到改变元素样式的效果。</p><p>我们可以通过修改元素的className更改元素的样式，从而达到更改样式的效果（适合样式较多或者功能复杂的情况）</p><p>class是个保留字，因此使用className</p><p>className属性会覆盖元素原有的class</p><h3 id="onkeydown、onkeypress、onkeyup三个事件有什么区别？"><a href="#onkeydown、onkeypress、onkeyup三个事件有什么区别？" class="headerlink" title="onkeydown、onkeypress、onkeyup三个事件有什么区别？"></a>onkeydown、onkeypress、onkeyup三个事件有什么区别？</h3><p>onmouseover onmousemove的区别</p><p>onmouseout</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>留言板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ww<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"textarea"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> u <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">.</span>onclick<span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入留言内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lis<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            u<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>链接不需要跳转（阻止链接跳转）：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>&lt;a href="javascript:void(0);"/a></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>自动填充表格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">table </span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>            <span class="token property">border-spacing</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">border-collapse</span><span class="token punctuation">:</span>collapse<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">thead </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">td </span><span class="token punctuation">{</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid gray<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>科目<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>分数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"唐三"</span><span class="token punctuation">,</span>            course<span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">,</span>            score<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"小舞"</span><span class="token punctuation">,</span>            course<span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">,</span>            score<span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"沐白"</span><span class="token punctuation">,</span>            course<span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">,</span>            score<span class="token punctuation">:</span> <span class="token number">92</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"大师"</span><span class="token punctuation">,</span>            course<span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">,</span>            score<span class="token punctuation">:</span> <span class="token number">190</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> tb <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"tbody"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> tr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//行</span>        <span class="token keyword">var</span> trs <span class="token operator">=</span> tb<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组中有几个对象，则生成多少行</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> td <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//列</span>            td<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组中对象的元素值插入td中</span>            trs<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>td<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> del <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        del<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;a class='del' href='javascript:;'>删除&lt;/a>"</span><span class="token punctuation">;</span>        trs<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tb<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="解除事件绑定的方式"><a href="#解除事件绑定的方式" class="headerlink" title="解除事件绑定的方式"></a>解除事件绑定的方式</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.设置事件触发源的事件为空</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.解除相应的绑定事件</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当发生事件的时候，事件流始终存在，与文档元素是否存在相应的事件无关</p><h2 id="动画实现原理"><a href="#动画实现原理" class="headerlink" title="动画实现原理"></a>动画实现原理</h2><p>核心原理：通过定时器setInterval()不断切换盒子的显示效果等。</p><ol><li><p>获得盒子的当前位置</p></li><li><p>让盒子在当前位置上加 1 个移动距离</p></li><li><p>利用定时器，不断重复这个操作<code>setInterval()</code></p></li><li><p>加一个结束定时器的条件</p><blockquote><p>注意：该盒子需要加定位，才能使用Element.style.left = Element.offsetLeft +1 + “px”;</p></blockquote></li></ol><p>简单动画函数的封装  <code>obj 目标对象</code> <code>target 目标位置</code></p><pre class=" language-html"><code class="language-html"></code></pre><p>JS自动化思想</p><p>一致性</p><p>可复用性</p><p>鼠标事件</p><table><thead><tr><th>鼠标事件名</th><th>事件触发时机</th></tr></thead><tbody><tr><td>onclick</td><td>左键点击</td></tr><tr><td>ondblclick</td><td>双击事件</td></tr><tr><td>onmousedown</td><td>按下鼠标键时触发</td></tr><tr><td>onmouseup</td><td>释放按下的鼠标键时触发</td></tr><tr><td>onmousemove</td><td>鼠标移动事件 连续触发</td></tr><tr><td>onmouseover</td><td>移入事件</td></tr><tr><td>onmouseout</td><td>移出事件</td></tr><tr><td>onmouseenter</td><td>移入事件</td></tr><tr><td>onmouseleave</td><td>移出事件</td></tr><tr><td>oncontextmenu</td><td>右键事件</td></tr></tbody></table><blockquote><p>mouseover事件和mouseenter事件，都是鼠标进入一个节点时触发。两者的区别是，mouseenter事件只触发一次，而只要鼠标在节点内部移动，mouseover事件会在子节点上触发多次。 事件冒泡</p></blockquote><p>键盘按键事件</p><table><thead><tr><th align="left">事件名</th><th>事件触发时机</th></tr></thead><tbody><tr><td align="left">onkeyup</td><td>按键弹起</td></tr><tr><td align="left">onkeydown</td><td>按键按下</td></tr><tr><td align="left">onkeypress</td><td>按键按下不松 连续触发</td></tr></tbody></table><h3 id="CSS操作"><a href="#CSS操作" class="headerlink" title="CSS操作"></a>CSS操作</h3><p>element.style<br> 既可以设置行内样式，也可以读取行内样式。可读可写</p><p>Element.style.cssText<br> 用来读写当前元素的所有行内样式。<br> 如果设置cssText值为“”（空字符串），则会清空该元素的所有行内样式。</p><p>Element.style.length<br> 返回该元素有多少条行内样式。</p><p>Element.style.getPropertyValue()<br> 获取某个属性的属性值</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token string">"width"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//200px</span><span class="token comment" spellcheck="true">//等同于div.style.width</span></code></pre><p>Element.style.setProperty()<br> 设置某个属性的属性值 。可传三个值<br> 第一个值是属性名，第二个是属性值。第三个只能传important，代表优先级最高，可选。</p><p>Element.style.removeProperty(）<br> 删除某个属性。</p><p>Element.style.item()<br> 用来返回指定位置的属性名。</p><p>获取非行内样式<br> element.style只能读写行内样式。并不能读取到非行内样式。<br> 我们可以通过window.getComputedStyle()方法来获取非行内样式。<br> 注意：此方法获取的是层叠之后的样式</p><p>window.getComputedStyle()<br> 方法还可以获取伪元素。<br> 注意:加在window对象上<br> 两个冒号代表伪元素,      假的元素<br> 一个冒号代表伪类            代表某种状态<br> 传两个值,第二个值可选,<br> 传一个值代表获取指定元素的某个样式,<br> 传两个值可以获取当前元素的伪元素的某个样式</p><hr><h3 id="事件对象和事件委托"><a href="#事件对象和事件委托" class="headerlink" title="事件对象和事件委托"></a>事件对象和事件委托</h3><p>事件对象<br> 事件发生的详细信息 在ie和chrome 事件详细信息保存到内置的 event对象中<br> Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。<br> 在火狐浏览器 事件信息保存到 事件函数 的第一个参数中<br> event.composedPath()<br> 返回一个数组，包含了目标节点冒泡经过的所有节点<br> event.target<br> 返回事件的目标节点（触发该事件的节点）<br> event.currentTarget<br> 返回当前事件所在的节点。与this一致。<br> event.srcElement<br> IE中返回目标节点</p><p>事件委托(事件代理)（delegation）。<br> 由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token keyword">var</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> p<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"我系新创建的P"</span>    div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">}</span>div<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token operator">=</span>e<span class="token operator">||</span>window<span class="token punctuation">.</span>event    <span class="token comment" spellcheck="true">//tagName 大写的标签名</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//target  返回事件的目标节点</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//多用于给手动创建的元素添加点击事件</span></code></pre><hr><h3 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM 浏览器对象模型"></a>BOM 浏览器对象模型</h3><h4 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h4><pre class=" language-js"><code class="language-js">window对象的属性window对象是是指浏览器窗口。它是当前页面的顶层对象console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>screenX<span class="token punctuation">,</span>window<span class="token punctuation">.</span>screenY<span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true">//这两个属性代表浏览器窗口左上角相对于当前屏幕左上角的水平距离和垂直距离（单位像素）。</span><span class="token comment" spellcheck="true">//这两个属性只读。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true">//返回网页在当前窗口中可见部分的高度和宽度，即“视口”（viewport）的大小（单位像素）。</span><span class="token comment" spellcheck="true">//这两个属性只读</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>outerHeight<span class="token punctuation">,</span>window<span class="token punctuation">.</span>outerWidth<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">//返回浏览器窗口的高度和宽度，包括浏览器菜单和边框（单位像素）。</span><span class="token comment" spellcheck="true">//这两个属性只读</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>scrollX<span class="token punctuation">,</span>window<span class="token punctuation">.</span>scrollY<span class="token punctuation">)</span>                              <span class="token comment" spellcheck="true">//window.scrollX属性返回页面的水平滚动距离，</span><span class="token comment" spellcheck="true">//window.scrollY属性返回页面的垂直滚动距离，</span><span class="token comment" spellcheck="true">//单位都为像素。这两个属性只读。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height<span class="token punctuation">,</span>window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">//返回当前屏幕的宽度和高度      </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>availHeight<span class="token punctuation">,</span>window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>availWidth<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//这两个属性代表屏幕的可用宽的和可用高度。</span><span class="token comment" spellcheck="true">//可用的高度不包括windows任务栏和macOS中的Dock栏。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>orientation<span class="token punctuation">)</span>                              <span class="token comment" spellcheck="true">//返回一个对象，表示屏幕的方向。该对象的type属性是一个字符串，表示屏幕的具体方向</span><span class="token comment" spellcheck="true">//landscape-primary                 表示横放，                                     </span><span class="token comment" spellcheck="true">//landscape-secondary               表示颠倒的横放，                </span><span class="token comment" spellcheck="true">//portrait-primary                  表示竖放，                                  </span><span class="token comment" spellcheck="true">//portrait-secondary                表示颠倒的竖放                          </span></code></pre><pre class=" language-js"><code class="language-js">window对象的方法<span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//弹出对话框</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//可传两个参数，第一个参数是提示信息。第二个参数是默认值。点取消返回null</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true">//弹出一个确认的对话框。返回一个布尔值。确定返回true，取消返回false</span>window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">,</span><span class="token string">"百度"</span><span class="token punctuation">,</span><span class="token string">"width=800,height=500"</span><span class="token punctuation">)</span>   window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 可传三个值<span class="token comment" spellcheck="true">//1.url 打开窗口的地址</span><span class="token comment" spellcheck="true">//2.窗口的名字。相同名字的窗口会被占用。</span><span class="token comment" spellcheck="true">//3.新窗口的参数。 </span>window<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//用来关闭自身的窗口。</span>window<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//相当于点击了浏览器的停止按钮。停止加载当前网页</span>window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//将文档滚动到指定位置。它接受两个参数，表示滚动后位于窗口左上角的页面坐标</span>window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>top<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>left<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>behavior<span class="token punctuation">:</span><span class="token string">"smooth"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//字符串,可选三个值:smooth平滑,instant瞬间,auto默认值                                                          </span>window<span class="token punctuation">.</span><span class="token function">scrollBy</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//用于将网页滚动指定距离（单位像素）它接受两个参数：水平向右滚动的像素，垂直向下滚动的像素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//获取选中的文本，返回一个对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回我们所选中的文本</span>window<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//弹出打印机对话框  和我们点击打印的按钮是一样的效果。</span></code></pre><h4 id="Navigator对象"><a href="#Navigator对象" class="headerlink" title="Navigator对象"></a>Navigator对象</h4><p>navigator属性指向一个包含浏览器信息的 Navigator 对象。js可以通过这个属性可以获取浏览器的信息。返回浏览器的信息</p><pre class=" language-js"><code class="language-js">navigator<span class="token punctuation">.</span>userAgent<span class="token comment" spellcheck="true">//返回浏览器的 User Agent 字符串，表示浏览器的厂商和版本信息以及操作系统信息。</span>navigator<span class="token punctuation">.</span>plugins   <span class="token comment" spellcheck="true">//返回浏览器所安装的插件</span>navigator<span class="token punctuation">.</span>platform<span class="token comment" spellcheck="true">//返回用户的操作系统信息，比如MacIntel、Win32、Linux x86_64等 。</span>navigator<span class="token punctuation">.</span>onLine<span class="token comment" spellcheck="true">//返回用户的在线状态。true在线，false离线</span>navigator<span class="token punctuation">.</span>language<span class="token comment" spellcheck="true">//返回浏览器的首选语言</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>languages<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回浏览器可接受的语言。</span></code></pre><h4 id="History对象"><a href="#History对象" class="headerlink" title="History对象"></a>History对象</h4><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>length              <span class="token comment" spellcheck="true">//表示浏览过的网页的个数</span>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//后退     </span>history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//前进</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//跳转指定页面</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">//相当于刷新页面</span></code></pre><h4 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h4><p>Location 对象包含有关当前 URL 的信息。<br> Location 对象是 Window 对象的一个部分，可通过 window.location 属性来访问。<br> url: Uniform Resource Locator  统一资源定位符,代表路径,俗称：网址</p><pre class=" language-js"><code class="language-js">location<span class="token punctuation">.</span>protocol                  <span class="token comment" spellcheck="true">//返回当前的url协议</span>location<span class="token punctuation">.</span>href                      <span class="token comment" spellcheck="true">//返回或设置当前完整的url</span>location<span class="token punctuation">.</span>hostname                 <span class="token comment" spellcheck="true">//返回或设置当前完整的服务器地址</span>location<span class="token punctuation">.</span>host                     <span class="token comment" spellcheck="true">//返回或设置当前完整的服务器地址和端口号</span>location<span class="token punctuation">.</span>port                     <span class="token comment" spellcheck="true">//返回或设置当前URL的端口号</span>location<span class="token punctuation">.</span>pathname                 <span class="token comment" spellcheck="true">//返回或设置当前URL路径部分</span>location<span class="token punctuation">.</span>search                   <span class="token comment" spellcheck="true">//返回或设置当前URL查询字符串</span>location<span class="token punctuation">.</span>hash                     <span class="token comment" spellcheck="true">//返回或设置当前URL的片段标识符</span><span class="token comment" spellcheck="true">//片段标识符，表示资源内的某一位置。在HTML文档里，浏览器会寻</span><span class="token comment" spellcheck="true">//找name属性为指定值的&lt;a>标签，找到后滚动页面到顶部位置进行展示</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">// 重载网页</span>location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">//加载新页面</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//替换新页面</span><span class="token comment" spellcheck="true">//此方法不会在历史记录中保留信息</span><span class="token function">encodeURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//方法用于转码整个 URL。</span><span class="token comment" spellcheck="true">//它会将元字符和转义字符之外的字符，都进行转义。</span><span class="token comment" spellcheck="true">//encodeURI('http://www.example.com/q=春节')</span><span class="token comment" spellcheck="true">// "http://www.example.com/q=%E6%98%A5%E8%8A%82"</span><span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//方法用于解码整个 URL。</span><span class="token comment" spellcheck="true">//它用于转义,转义之后的字符。</span><span class="token comment" spellcheck="true">//decodeURI（"http://www.example.com/q=%E6%98%A5%E8%8A%82"）</span><span class="token comment" spellcheck="true">//'http://www.example.com/q=春节'</span></code></pre><hr><h3 id="浏览器环境"><a href="#浏览器环境" class="headerlink" title="浏览器环境"></a>浏览器环境</h3><p>浏览器环境</p><p>五大主流浏览器内核<br>1.火狐Firefox： Gecko 引擎<br>2.苹果Safari： WebKit 引擎<br>3.谷歌Chrome： Blink 引擎<br>4.IE浏览器: Trident 引擎<br>5.欧朋Opera： presto引擎</p><p>浏览器内核主要分成两部分：<br>渲染引擎(layoutengineerRenderingEngine)和JS引擎。<br>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。<br>简单说就是把html和css音频视频等,转化成UI可以看到的东西<br>JS引擎则：解析和执行javascript来实现网页的动态效果。<br>最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎</p><p>浏览器渲染的工作原理<br>1.浏览器一边下载 HTML 网页，一边开始解析。也就是说，不等到下载完，就开始解析。<br>2.解析过程中，浏览器发现<script>元素，就暂停解析，把网页渲染的控制权转交给 JavaScript 引擎。<br>3.如果<script>元素引用了外部脚本，就下载该脚本再执行<br>4.JavaScript 引擎执行完毕，控制权交还渲染引擎，恢复往下解析 HTML 网页。<br>如果外部脚本加载时间过长(一直无法完成加载),那么浏览器就会一直<br>等待脚本下载完成,造成网页长时间失去响应,浏览器就会呈现"假死"<br>状态,这被称为"阻塞效应"<br>为了避免“阻塞效应”，我们要把js放在最后。<br>为了解决脚本文件下载阻塞网页渲染的问题，一个方法是对<script>元素加入defer属性。它的作用是延迟脚本的执行，等到 DOM 加载生成后，再执行脚本</p><p>添加defer属性渲染顺序<br>1.浏览器开始解析 HTML 网页。<br>2.解析过程中，发现带有defer属性的<script>元素。<br>3.浏览器继续往下解析 HTML 网页，同时并行下载<script>元素加载的外部脚本。<br>4.浏览器完成解析 HTML 网页，此时再回过头执行已经下载完成的脚本。</p><p>添加async属性渲染顺序<br>1.浏览器开始解析 HTML 网页。<br>2.解析过程中，发现带有async属性的script标签。<br>3.浏览器继续往下解析 HTML 网页，同时并行下载<script>标签中的外部脚本。<br>4.脚本下载完成，浏览器暂停解析 HTML 网页，开始执行下载的脚本。<br>5.脚本执行完毕，浏览器恢复解析 HTML 网页。<br>我们无法控制js的加载顺序，哪个先加载完成哪个先运行</p><p>何时使用async和defer<br>如果加载的两个外部文件没有依赖关系，就可以用async，有依赖关系，就要用defer属性。<br>如果两个都写，就执行async</p><hr><h3 id="定时器timer"><a href="#定时器timer" class="headerlink" title="定时器timer"></a>定时器timer</h3><p>JavaScript 提供定时执行代码的功能，叫做定时器。它们向任务队列添加定时任务。<br> setTimeout(  函数 || 执行的代码 ,time)<br> setTimeout只能运行一次,叫延时调用</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//第一种写法:</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"console.log(1)"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//第二种写法:</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//第三种写法:</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></code></pre><p>setInterval()       间歇调用<br> 用法与setTimeout完全一致，区别仅仅在于setInterval指定某个任务<br> 每隔一段时间就执行一次，也就是无限次的定时执行。<br> setInterval(function(){console.log(1)},1000)</p><p>清除定时器<br> clearTimeout()                clearInterval()<br> 先存储一个变量里,再直接清除</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> timer1 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> timer2 <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>timer2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行机制<br> js读取到setTimeout和setInterval会将这两种函数放到任务队列。直到所有的同步任务执行完毕之后才会执行任务队列里的任务。所以，这两种方法的执行时间我们无法保证。</p><pre class=" language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制台先显示2再显示1</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//递归函数:在函数内部调用函数本身</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//浏览器会把所有的性能集中到所看的页面</span>        <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span></code></pre><hr><h3 id="时间对象"><a href="#时间对象" class="headerlink" title="时间对象"></a>时间对象</h3><p>什么是时间对象<br> Date对象是 JavaScript 原生的时间库。它以1970年1月1日00:00:00作为时间的零点，可以表示的时间范围是前后各1亿天（单位为毫秒）。<br> 我们需要获取时间就需要用到时间对象。<br> 用法<br> 1.可以当做普通函数调用<br> 返回当前时间  Date（）<br> 2.也可以使用构造函数调用<br> var now = new Date（）<br> 不传参数返回当前时间</p><p>var then = new Date（1400000000000）<br> 可以传一个数字，表示时间戳<br> var then=new Date('January 10, 2018');<br> 也可以传入一个日期字符串<br> var then =new Date（2018,0,20,0,0,0）<br> 至少传两个参数，表示年月（日，时，分，秒）</p><h4 id="日期的运算"><a href="#日期的运算" class="headerlink" title="日期的运算"></a>日期的运算</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> then <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token operator">-</span>then<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//4548873355</span><span class="token comment" spellcheck="true">//两个日期相减，返回两个时间的时间差  单位毫秒数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token operator">+</span>then<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//Mon Jul 23 2018 15:34:33 GMT+0800 (中国标准时间)Fri Jun 01 2018 00:00:00 GMT+0800 (中国标准时间)</span><span class="token comment" spellcheck="true">//两个日期相加，返回两个日期字符串的拼接</span></code></pre><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">//返回时间戳</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//返回公元年 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">//返回距离1900年多少年 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//返回月份          从0开始   </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">//返回日期      从1开始</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">//返回星期          从1开始</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//返回时 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//返回分</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//返回秒 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//返回毫秒 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getTimezoneOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//返回当前时间与 UTC 的时区差异，以分钟表示，返回结果考虑到了夏令时因素</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> now<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">05</span><span class="token punctuation">,</span><span class="token number">09</span><span class="token punctuation">)</span>now<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true">//改变日期</span><span class="token function">setYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> now<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">05</span><span class="token punctuation">,</span><span class="token number">09</span><span class="token punctuation">)</span>now<span class="token punctuation">.</span><span class="token function">setYear</span><span class="token punctuation">(</span><span class="token number">119</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true">//改变距离1900年多少年</span><span class="token function">setFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> now<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">05</span><span class="token punctuation">,</span><span class="token number">09</span><span class="token punctuation">)</span>now<span class="token punctuation">.</span><span class="token function">setFullYear</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">//改变年</span><span class="token function">setHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true">//设置小时</span><span class="token function">setMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：                   <span class="token comment" spellcheck="true">//设置毫秒。</span><span class="token function">setMinutes</span><span class="token punctuation">(</span>min <span class="token punctuation">)</span>：                    <span class="token comment" spellcheck="true">//设置分钟setMonth(month )：设置月份（0-11）。</span><span class="token function">setSeconds</span><span class="token punctuation">(</span>sec<span class="token punctuation">)</span>：                     <span class="token comment" spellcheck="true">//设置秒。</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token comment" spellcheck="true">//设置时间戳</span></code></pre><hr><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>定义:<br> 字符串就是零个或多个排在一起的字符，放在单引号或双引号之中。<br> 转义:<br> 双引号中可以使用单引号,单引号中可以使用双引号.<br> 非要在双引号中使用双引号,需要转义.转义符号\</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str0<span class="token operator">=</span><span class="token string">"str'i'ng"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制台返回的值为str'i'ng</span><span class="token keyword">var</span> str1<span class="token operator">=</span><span class="token string">'str"i"ng'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制台返回的值为str"i"ng</span><span class="token keyword">var</span> str2<span class="token operator">=</span><span class="token string">"str\"i\"ng"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//控制台返回的值为str"i"ng</span></code></pre><p>字符串属性:<br> 以hello world为例,举例说明,控制台显示.<br> length 属性返回字符串的长度,空格也是一个字符串,一个空格字符串长度为1</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str3<span class="token operator">=</span><span class="token string">"hello world"</span>                 <span class="token comment" spellcheck="true">//length   长度</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//长度为11</span><span class="token keyword">var</span> str4<span class="token operator">=</span><span class="token string">"  "</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//空格也是一个字符串,一个空格字符串长度为1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str4<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制台返回值为2</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js">把字符串转化为小写<span class="token keyword">var</span> str5<span class="token operator">=</span><span class="token string">"HELLO"</span>                              <span class="token comment" spellcheck="true">//把字符串转化为小写</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str5<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//控制台返回值为hello</span>把字符串转化为大写<span class="token keyword">var</span> str6<span class="token operator">=</span><span class="token string">"hello"</span>                              <span class="token comment" spellcheck="true">//把字符串转化为大写</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str6<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//控制台返回值为HELLO</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">返回指定位置的字符</span><span class="token punctuation">(</span>就是第几个字符<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//控制台返回值为o</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//查找指定字符是否在字符串中，若存在，返回字符所在索引号，若不存在，返回-1</span><span class="token comment" spellcheck="true">//重复出现的字符只返回第一个符合字符所在索引号</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//控制台返回的值为8</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//控制台返回的值为2          </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//控制台返回的值为-1</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//查找指定字符是否在字符串中，若存在，返回字符最后一次出现所在索引号，若不存在，返回-1</span><span class="token comment" spellcheck="true">//重复出现的字符只返回最后一个符合字符所在索引号</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//控制台返回的值为8</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//控制台返回的值为9   </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//控制台返回的值为-1</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">substring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回传入数值之间的字符串,如果只传一个参数，则返回传入参数开始到结束的所有字符串</span><span class="token comment" spellcheck="true">//两个值可以不按顺序写,会自动转化为从小到大</span><span class="token comment" spellcheck="true">//返回指定数值之间的字符串(包括前面)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//控制台返回的值为ello world         </span><span class="token comment" spellcheck="true">//一个值返回从传入值开始到最后的字符(也是包括1)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//控制台返回的值为llow               </span>两个值返回从第一个值开始<span class="token punctuation">,</span>到第二个值之前的字符<span class="token punctuation">.</span><span class="token punctuation">(</span>包括<span class="token number">2</span><span class="token punctuation">,</span>不包括<span class="token number">7</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">substr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//截取指定长度的字符串如果只传一个参数，则返回传入参数开始到结束的所 </span><span class="token comment" spellcheck="true">//有字符串</span><span class="token comment" spellcheck="true">//substr跟substring区别是substr可以传负数,substring第二个值是下标,而 </span><span class="token comment" spellcheck="true">//substr第二个值 是截取长度</span><span class="token comment" spellcheck="true">//一个值返回从传入值开始到最后的字符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制台返回的值为lo world   (包括第三个)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制台返回的值为lo w                  </span><span class="token comment" spellcheck="true">//第一个值代表从第几个开始(包括所第一个值所指代的字符)    第二个值代表截取的长度</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制台返回的值为worl               </span><span class="token comment" spellcheck="true">//负数从倒数第几位开始截取   从-1开始数   第二个值代表截取的长度</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回传入数值之间的字符串,如果只传一个参数，则返回传入参数开始到结束的所有字符串</span><span class="token comment" spellcheck="true">//负数从倒数第几位开始截取到第二个数值的下标结束</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制台返回的值为llo w        </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制台返回的值为ello world</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制台返回的值为wo</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//分割字符串转化为数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制台返回的值为["h", "e", "l", "l", "o", " ", "w", "o", "r", "l", "d"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制台返回的值为["hello", "world"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制台返回的值为["", "ello world"]</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//反转字符串</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制台返回的值为dlrow olleh</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>两个参数，第一个参数是要被替换的字符串，第二个参数是替换的字符串console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'he'</span><span class="token punctuation">,</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制台返回的值为hillo world</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>去除首尾空格console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true">//控制台返回的值为"hello world"</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Web API </tag>
            
            <tag> DOM&amp;BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery使用基础</title>
      <link href="/2018/12/18/jquery-shi-yong-ji-chu/"/>
      <url>/2018/12/18/jquery-shi-yong-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>JQuery封装了JavaScript常用的功能函数</p><p>轻量级，核心文件只有十几KB，不会影响页面的加载速度</p><p>跨浏览器兼容，基本兼容了现在主流的浏览器</p><p>链式编程</p><p>jQuery获取的 —– document.querySelectorAll(“cssSelector”);然后更改protocol</p><p>$(“cssSelector”)get(0) === $(“cssSelector”)[0] === document.querySelectorAll(“cssSelector”)[0]</p><p>jQuery中给元素添加事件是 addEventListener方式 所以可以添加多个同一事件</p><p>隐式迭代   给jQuery对象添加事件    </p><p>因为jQuery对象是一个集合，按照原生的思路，则无法直接给一个集合添加事件，但是jQuery对象直接添加事件相当于隐式迭代了jQuery对象内的所有DOM对象，分别统一添加了此事件</p><p>$(this)</p><p>$(this).children(“li”).show() === this.querySelector(“li”).style.display = “block”;</p><p>$(“div”).siblims(“.current”) //邻居元素的带class=”current”被选中</p><p>JQuery的排他思想</p><p>$(this).css(“background”,”pink”);</p><p>$(this).siblings(“button”).css(“background”,””)</p><p>$(this).index()  当前元素的索引</p><p>链式编程</p><p>$(this).css(“background”,”pink”).siblings(“button”).css(“background”,””)；</p><p>手写JQuery链式编程源码</p><p>返回值！！！方法调用会把当前调用作为返回值返回，相当于执行动作，并且返回当前调用者</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    fn1<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//return = obj;</span>        <span class="token keyword">return</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fn2<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//return = obj;</span>        <span class="token keyword">return</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>动画里面的回调函数要合理利用</p><blockquote><p>JQuery是一个优秀的js库,简化了js的操作,考虑了浏览器兼容,提供了大量的实用方法</p></blockquote><blockquote><p>链式操作原理:jq对象调用jq方法时  当方法执行结束后返回当前的这个jq对象本身,继续进行方法调用.</p></blockquote><h4 id="里面可以传哪几种类型的对象"><a href="#里面可以传哪几种类型的对象" class="headerlink" title="$()     里面可以传哪几种类型的对象"></a>$()     里面可以传哪几种类型的对象</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token number">1</span><span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"选择器"</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token operator">--</span><span class="token operator">></span>        <span class="token punctuation">(</span>window<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>                    <span class="token punctuation">(</span>obj<span class="token punctuation">:</span>DOM对象  window<span class="token punctuation">,</span>document<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">></span>DOM对象转换为jq对象</code></pre><h4 id="jq对象和dom对象之间的相互转换"><a href="#jq对象和dom对象之间的相互转换" class="headerlink" title="jq对象和dom对象之间的相互转换"></a>jq对象和dom对象之间的相互转换</h4><pre class=" language-jsx"><code class="language-jsx">js对象<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>转换为jq对象               <span class="token function">$</span><span class="token punctuation">(</span>DOM对象<span class="token punctuation">)</span>jq节点对象<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>转换为js对象       <span class="token number">1</span><span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".box"</span><span class="token punctuation">)</span>转换为js                 <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".box"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   DOM节点<span class="token number">2</span><span class="token punctuation">.</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>下标<span class="token punctuation">)</span>转换为js        DOM节点</code></pre><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h4 id="1-基础选择器"><a href="#1-基础选择器" class="headerlink" title="1.基础选择器"></a>1.基础选择器</h4><pre class=" language-kotlin"><code class="language-kotlin">id<span class="token punctuation">,</span><span class="token punctuation">.</span>class<span class="token punctuation">,</span>tag<span class="token punctuation">,</span>群组<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">,</span>子选择器<span class="token punctuation">,</span>后代选择器<span class="token punctuation">.</span>      $<span class="token punctuation">(</span><span class="token string">"选择器"</span><span class="token punctuation">)</span></code></pre><h4 id="2-筛选选择器"><a href="#2-筛选选择器" class="headerlink" title="2.筛选选择器"></a>2.筛选选择器</h4><pre class=" language-ruby"><code class="language-ruby"><span class="token symbol">:not</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  选择除去选择的元素<span class="token symbol">:eq</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   选择到某一个  从<span class="token number">0</span>开始<span class="token symbol">:nth</span><span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            选择到某一个  从<span class="token number">1</span>开始<span class="token punctuation">:</span>$<span class="token punctuation">(</span><span class="token string">"tr:odd"</span><span class="token punctuation">)</span>            选取奇数位置的 <span class="token operator">&lt;</span>tr<span class="token operator">></span> 元素     <span class="token punctuation">:</span>$<span class="token punctuation">(</span><span class="token string">"tr:even"</span><span class="token punctuation">)</span>           选取偶数位置的 <span class="token operator">&lt;</span>tr<span class="token operator">></span> 元素         <span class="token symbol">:first</span><span class="token symbol">:last</span></code></pre><h4 id="3-属性选择器"><a href="#3-属性选择器" class="headerlink" title="3.属性选择器"></a>3.属性选择器</h4><pre class=" language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>attr<span class="token operator">=</span><span class="token string">"val"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>attr<span class="token operator">|</span><span class="token operator">=</span><span class="token string">"val"</span><span class="token punctuation">]</span>               属性值以指定字符开头，识别带有<span class="token operator">-</span>的字符<span class="token punctuation">[</span>attr<span class="token operator">^</span><span class="token operator">=</span><span class="token string">"val"</span><span class="token punctuation">]</span>               属性值以指定字符开始的节点<span class="token punctuation">[</span>attr$<span class="token operator">=</span><span class="token string">"val"</span><span class="token punctuation">]</span>               属性值以指定字符结尾的节点<span class="token punctuation">[</span>attr<span class="token operator">*</span><span class="token operator">=</span><span class="token string">"val"</span><span class="token punctuation">]</span>   </code></pre><h4 id="4-form表单选择器"><a href="#4-form表单选择器" class="headerlink" title="4.form表单选择器"></a>4.form表单选择器</h4><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span><span class="token property">checked</span><span class="token punctuation">:</span><span class="token property">checkbox</span><span class="token punctuation">:</span><span class="token property">button</span><span class="token punctuation">:</span><span class="token property">text</span><span class="token punctuation">:</span><span class="token property">selected</span><span class="token punctuation">:</span>submit</code></pre><h1 id="JQ的一些方法"><a href="#JQ的一些方法" class="headerlink" title="JQ的一些方法"></a>JQ的一些方法</h1><pre class=" language-jsx"><code class="language-jsx"><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   给jQ对象设置样式<span class="token operator">/</span>获取元素的样式           可支持对象<span class="token punctuation">{</span><span class="token punctuation">}</span>来设置多个样式<span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  给jQ对象设置标签属性<span class="token operator">/</span>获取元素某个属性        注意jq    attr设置的属性要用attr来获取<span class="token function">prop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  jq对象的方法，用于设置js  <span class="token function">DOM对象指定的属性</span><span class="token punctuation">(</span>传一个参代表取址<span class="token punctuation">,</span>传两个参代表赋值<span class="token punctuation">)</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  获取jq对象的所有内容<span class="token operator">/</span>设置对象的内容<span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  获取jq对象的所有文本内容<span class="token operator">/</span>设置文本<span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">(</span>不传参代表取址<span class="token punctuation">,</span>传参代表赋值<span class="token punctuation">)</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>     给jQ对象设置点击事件<span class="token function">eq</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                   遍历所有对象<span class="token punctuation">,</span>获取指定的某个i<span class="token punctuation">:</span>下标</code></pre><h4 id="index-通过事件来获取某个对象的下标"><a href="#index-通过事件来获取某个对象的下标" class="headerlink" title="index()  通过事件来获取某个对象的下标"></a>index()  通过事件来获取某个对象的下标</h4><pre class=" language-undefined"><code class="language-undefined">1-不传参数  获取当前元素的下标2-传参数   获取指定元素的索引       参数:某个元素 DOM对象       jq对象3-传参数   如果找不到   返回-1        注意:类似于js中的indexOf()</code></pre><h5 id="例"><a href="#例" class="headerlink" title="例:"></a>例:</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".box p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取p标签的对应下标</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//获取当前点击的p标签  在所有兄弟节点中的下标</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".box p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//DOM对象</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".box p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//jq对象</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="筛选的一些方法"><a href="#筛选的一些方法" class="headerlink" title="筛选的一些方法"></a>筛选的一些方法</h4><pre class=" language-ruby"><code class="language-ruby"><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    $<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           查找div的父元素parents     $<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          查找长辈节点<span class="token punctuation">(</span>可以传参数<span class="token punctuation">)</span><span class="token keyword">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      $<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             下一个兄弟节点<span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      $<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             上一个兄弟节点<span class="token function">nextAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   $<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          查找div下面所有的兄弟节点<span class="token function">prevAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   $<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prevAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          查找div前面所有的兄弟元素<span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     $<span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              查找页面中第一个p元素<span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      $<span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               查找页面中最后一个p元素<span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      $<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span>          查找父级中的所 有子元素p<span class="token function">eq</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        $<span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 查找页面中第n个p元素      下标从<span class="token number">0</span>开始<span class="token keyword">not</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       $<span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">not</span><span class="token punctuation">(</span><span class="token string">':first'</span><span class="token punctuation">)</span>        筛选不包含的      查找页面中除了第一个p元素之外的所有的p<span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    $<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span>        筛选出         只要div下的p<span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       $<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span>           附带某个元素<span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       $<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span>           选取包含某个元素的父元素<span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  $<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span>      查找父级中的子元素       参数<span class="token punctuation">:</span><span class="token string">"选择器"</span><span class="token number">1</span><span class="token punctuation">.</span>不传参数                               指所有子元素<span class="token number">2</span><span class="token punctuation">.</span>传参数                                 指定的某类子元素<span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  $<span class="token punctuation">(</span><span class="token string">"li:first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    查找第一个li的所有兄弟，注意不包括第一个li<span class="token number">1</span><span class="token punctuation">.</span>不传参数                              选择某个元素所有的兄弟节点<span class="token number">2</span><span class="token punctuation">.</span>传参数                               选择指定的兄弟节点       参数<span class="token punctuation">:</span><span class="token string">"选择器"</span></code></pre><h1 id="JQuery动画"><a href="#JQuery动画" class="headerlink" title="JQuery动画"></a>JQuery动画</h1><pre class=" language-dart"><code class="language-dart"><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span>            显示<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span>            隐藏<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span>          往复显示或隐藏<span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span>          淡入<span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span>         淡出<span class="token punctuation">.</span><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>             淡入到指定的透明渡<span class="token punctuation">.</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token string">"slow"</span><span class="token punctuation">)</span>      淡入淡出<span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             下拉<span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               合上<span class="token comment" spellcheck="true">//这些方法都可以传入三个参数</span><span class="token comment" spellcheck="true">//第一个参数:代表动画完成的时间,默认(normal),可选slow,fast或者毫秒数</span><span class="token comment" spellcheck="true">//第二个参数:动画切换效果,可选linear</span><span class="token comment" spellcheck="true">//第三个参数:回调函数,代表动画完成后执行的函数</span></code></pre><h2 id="动画函数-animate"><a href="#动画函数-animate" class="headerlink" title="动画函数 animate()"></a>动画函数 animate()</h2><pre class=" language-undefined"><code class="language-undefined">可传四个参数1.作为动画的属性是一个对象2.动画完成的时间3.动画的效果,liner和swing(默认)4.动画完成之后执行的回调函数stop()       立即结束前面,执行后面的动画delay(time)设置一个延时来推迟执行队列中 之后的项目</code></pre><h1 id="JQuery事件"><a href="#JQuery事件" class="headerlink" title="JQuery事件"></a>JQuery事件</h1><pre class=" language-js"><code class="language-js"><span class="token function">事件绑定bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">解除绑定unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span>区别<span class="token punctuation">:</span>事件委托<span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  一次性事件</code></pre><h1 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h1><pre class=" language-js"><code class="language-js"><span class="token function">append</span><span class="token punctuation">(</span>节点<span class="token punctuation">)</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">prependTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">after</span><span class="token punctuation">(</span>节点<span class="token punctuation">)</span>          before <span class="token punctuation">(</span>节点<span class="token punctuation">)</span>    <span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">afterBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token function">replaceWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">replaceWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">wrapAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">wrapInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="元素的尺寸"><a href="#元素的尺寸" class="headerlink" title="元素的尺寸"></a>元素的尺寸</h1><pre class=" language-css"><code class="language-css"><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        width<span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       height<span class="token function">innerWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            width+padding<span class="token function">innerHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           height+padding<span class="token function">outerWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            width+padding+border<span class="token function">outerHeight</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span>    height+padding+border+margin<span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">.</span>left              距离文档左侧的位移<span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">.</span>top              距离  </code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础初识</title>
      <link href="/2018/12/07/javascript-ji-chu-chu-shi/"/>
      <url>/2018/12/07/javascript-ji-chu-chu-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h1><h2 id="1-程序运行之内存条"><a href="#1-程序运行之内存条" class="headerlink" title="1. 程序运行之内存条"></a>1. 程序运行之内存条</h2><ol><li><p>打开某个程序时，先从硬盘中把程序的代码加载到内存中</p></li><li><p>CPU执行内存中的代码（此时读取的应该是机器码<code>0</code>，<code>1</code>）</p><p>之所以要内存的一个重要原因，是因为CPU运行太快了，如果只从硬盘中读取数据会浪费CPU性能，所以，才使用存取速度更快的内存来保存<strong>运行时</strong>的数据。（内存是电，硬盘是机械）</p></li></ol><h2 id="2-JavaScript-是什么"><a href="#2-JavaScript-是什么" class="headerlink" title="2. JavaScript 是什么"></a>2. JavaScript 是什么</h2><ol><li><p>JavaScript 是运行在客户端的脚本语言 (script 脚本的意思)，运行过程中不需要编译，由 JS 解释器（如chrome V8引擎）<strong>逐行解释</strong>执行（<strong>如果执行到错误代码，直接报错，后面不再执行</strong>）</p><p>浏览器本身并不会执行JS代码，而是通过内置JavaScript引擎（解释器）来执行JS代码。JS引擎执行代码时逐行解释每一句源码（转为机器语言），然后由计算机去执行，所以JavaScript语言归为脚本语言，会逐行解释执行。</p></li><li><p>现在也可以基于Node.js实现服务器端编程</p></li></ol><h2 id="3-JavaScript-的作用"><a href="#3-JavaScript-的作用" class="headerlink" title="3. JavaScript 的作用"></a>3. JavaScript 的作用</h2><ol><li><p>表单动态校验（<strong>密码强度检测</strong>）(JS产生的最初目的)</p></li><li><p>页面特效</p></li><li><p>服务端开发（Node.js）</p><p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p><p>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</p><p>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p></li><li><p>桌面程序 （Electron）</p></li><li><p>APP（Cordova）</p></li><li><p>控制硬件-物联网（Ruff）</p></li><li><p>游戏开发（cocos2d-js）</p></li></ol><h2 id="4-JavaScript-与-HTML-与-CSS-之间的关系"><a href="#4-JavaScript-与-HTML-与-CSS-之间的关系" class="headerlink" title="4. JavaScript 与 HTML 与 CSS 之间的关系"></a>4. JavaScript 与 HTML 与 CSS 之间的关系</h2><ol><li><strong>HTML</strong> 定义了网页的内容</li><li><strong>CSS</strong> 描述了网页的布局</li><li><strong>JavaScript</strong> 网页的行为</li></ol><h2 id="5-Javascript-的组成"><a href="#5-Javascript-的组成" class="headerlink" title="5. Javascript 的组成"></a>5. Javascript 的组成</h2><ol><li><p><code>ECMAScript</code>  JavaScript语法</p><p>ECMAScript 是由ECMA国际（原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为<code>JavaScript</code>（网景公司）或<code>JScript</code>（微软公司），但实际上后两者是ECMAScript语言的实现和扩展。</p><p>ECMAScript规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</p></li><li><p><code>DOM</code>  页面文档对象模型 Document Object Model</p><p>是W3C组织推荐的处理可扩展标记语言的<strong>标准编程接口</strong>，通过DOM提供的接口可以对页面中各种元素进行操作（大小、位置、颜色等）；</p></li><li><p><code>BOM</code>  浏览器对象模型 Browser Object Model</p><p>他提供了独立于内容的、可以与<strong>浏览器窗口进行互动</strong>的对象结构。通过BOM可以<strong>操作浏览器窗口</strong>，比如：弹出框、控制浏览器跳转、获取分辨率等。</p></li></ol><h2 id="6-JavaScript-的三种引入方式"><a href="#6-JavaScript-的三种引入方式" class="headerlink" title="6. JavaScript 的三种引入方式"></a>6. JavaScript 的三种引入方式</h2><ol><li><p>行内式的 JS</p></li><li><p>内嵌式的 JS</p></li><li><p>外部式的 JS 双标签</p><p><code>&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</code></p></li></ol><h2 id="7-JavaScript-输入输出语句"><a href="#7-JavaScript-输入输出语句" class="headerlink" title="7. JavaScript 输入输出语句"></a>7. JavaScript 输入输出语句</h2><table><thead><tr><th>方法</th><th>说明</th><th>归属</th><th>返回值</th></tr></thead><tbody><tr><td>aler(msg)</td><td>浏览器弹出警示框</td><td>浏览器</td><td>undefined</td></tr><tr><td>console.log(msg)</td><td>浏览器控制台打印输出信息</td><td>浏览器</td><td>undefined</td></tr><tr><td>prompt(info)</td><td>浏览器弹出输入框，用户可以输入</td><td>浏览器</td><td>输入的内容</td></tr></tbody></table><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>复习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p><strong>控制台结果分析</strong></p><p><code>输入的内容</code> prompt的返回值<br><code>undefined</code>  alert不属于JavaScript的内部函数，属于web API<br><code>请输入</code>  console.log()执行的结果<br><code>undefined</code>  console.log()不属于JavaScript的内部函数，属于web API</p></blockquote><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>白话说：装东西的盒子</p><p>通俗：<strong>变量是用于存放数据的容器</strong>。我们通过变量名获取数据，数据可以修改。</p><p>本质：变量是程序在<strong>内存</strong>中申请一块用来存放数据的空间。</p><h2 id="1-变量的使用"><a href="#1-变量的使用" class="headerlink" title="1. 变量的使用"></a>1. 变量的使用</h2><ol><li><p>声明变量</p><p><code>var 变量名;</code></p><p><code>var</code> 是 JS 关键字，用来声明变量（variable）。使用该关键字声明变量后，计算机会自动为变量分配内存空间。</p><p><code>变量名</code> 是我们定义的变量名，我们需要通过变量名访问内存中分配的空间。</p></li><li><p>赋值</p><p>变量名 = 10;</p></li><li><p>变量初始化</p><p>声明一个变量并赋值，称之为<code>变量的初始化</code>。</p><p>var 变量名 = 值；</p></li></ol><blockquote><p>变量名的命名规则遵循小驼峰命名法</p></blockquote><ol start="4"><li><p>更新变量（同一作用域内）</p><p>一个变量被重新赋值后，它的原有值会被覆盖，变量值以最后一次付的值为准。</p></li><li><p>同时声明/初始化多个变量</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span>    address <span class="token operator">=</span> <span class="token string">"中国安徽"</span><span class="token punctuation">,</span>    salary <span class="token operator">=</span> <span class="token number">8000</span><span class="token punctuation">;</span></code></pre></li><li><p>声明变量的特殊情况</p><table><thead><tr><th>情况</th><th>consol.log()的结果是</th></tr></thead><tbody><tr><td>只声明 不赋值</td><td>undefined</td></tr><tr><td>不声明 不赋值</td><td>报错</td></tr><tr><td>不声明 直接赋值</td><td>正常输出（默认加上var关键字，为全局变量，即使在函数中，也提升为全局变量）</td></tr></tbody></table></li></ol><h2 id="2-变量的命名规范"><a href="#2-变量的命名规范" class="headerlink" title="2. 变量的命名规范"></a>2. 变量的命名规范</h2><ol><li>字母 数字 下划线 <code>_</code> 美元符号 <code>$</code>（不能有空格）</li><li><strong>严格区分大小写</strong></li><li><strong>不能以数字开头</strong></li><li><strong>不能是关键字、保留字</strong>：var for while等 及特殊含义的<code>name</code></li><li>变量名必须有意义，最好转化为对应的单词，或者单词简写</li><li>遵循小驼峰命名法：首字母小写，后面单词的首字母需要大写。如<code>myFirstName</code></li></ol><h2 id="3-练习：简单交换变量"><a href="#3-练习：简单交换变量" class="headerlink" title="3. 练习：简单交换变量"></a>3. 练习：简单交换变量</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//思想：（新声明一个临时变量，作为交换媒介）</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>结果</p><p>(2) [“age”, 10]*</p><ol><li><p>0: “age”</p></li><li><p>1: 10</p></li><li><p>length: 2</p></li></ol></blockquote><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>变量是用来存储值的，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。<strong>JavaScript是一种弱类型或者动态语言</strong>。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定，而且数据类型是可以变化的。</p><h2 id="1-数据类型的分类"><a href="#1-数据类型的分类" class="headerlink" title="1. 数据类型的分类"></a>1. 数据类型的分类</h2><ol><li><p>简单数据类型</p><p>Number,String,Boolean,Undefined,Null</p></li><li><p>复杂数据类型</p><p>Object</p></li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> boo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> boo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>0 false 0 undefined null  第一个值是Number的默认值<code>0</code>；第二个值是Boolean的默认值<code>false</code>;第三个值是String的默认值为<code>“”</code>的索引。</p></blockquote><h3 id="1-1-Number-数字型"><a href="#1-1-Number-数字型" class="headerlink" title="1.1 Number 数字型"></a>1.1 Number 数字型</h3><blockquote><p><strong>进制</strong></p><p>八进制：<code>0</code>开头  0~7     <code>8 = 010；</code></p><p>十六进制：<code>0x</code>开头 0-9  a~f  <code>16 = 0x10;</code></p></blockquote><blockquote><p><strong>数字型范围</strong></p><p>最大值：<code>Number.MAX_VALUE</code></p><p>最小值：<code>Number.MIN_VALUE</code></p></blockquote><blockquote><p><strong>数字型三个特殊值</strong></p><ol><li><p><code>Infinity</code> 无穷大，大于任何值</p><p><code>console.log(Number.MAX_VALUE * 2);</code></p></li><li><p><code>-Infinity</code> 无穷小，小于任何值</p><p><code>console.log(-Number.MAX_VALUE * 2);</code></p></li><li><p><code>NaN</code> Not a Number，非数值（用了数学运算符，无法算出内容）</p><p><code>console.log(&quot;Coder Rat&quot; - 20);</code></p></li></ol></blockquote><blockquote><p><strong>isNaN()</strong></p><p>用来判断一个变量是否为<strong>非数字</strong>的类型，返回true或者false</p><p>用法：<code>isNaN(a);</code> </p><p>如果a为数字  则返回 false</p><p>如果a为非数字  则返回 true</p><p>可以用来判断用户输入的是否为数字</p><pre class=" language-js"><code class="language-js"><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// strings</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"37"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// false: 可以被转换成数值37</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"37.37"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// false: 可以被转换成数值37.37</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"37,5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'123ABC'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true:  parseInt("123ABC")的结果是 123, 但是Number("123ABC")结果是 NaN</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// false: 空字符串被转换成0</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// false: 包含空格的字符串被转换成0</span><span class="token comment" spellcheck="true">// dates</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"blabla"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// true: "blabla"不能转换成数值</span>                  <span class="token comment" spellcheck="true">// 转换成数值失败， 返回NaN</span></code></pre></blockquote><blockquote><p><strong><code>isNaN</code> 函数的必要性</strong></p><p>与 JavaScript 中其他的值不同，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN" target="_blank" rel="noopener"><code>NaN</code></a>不能通过相等操作符（== 和 ===）来判断 ，因为 <code>NaN == NaN</code> 和 <code>NaN === NaN</code> 都会返回 <code>false</code>。 因此，<code>isNaN</code> 就很有必要了。</p></blockquote><blockquote><p> <strong><code>NaN值</code>的产生</strong></p><p>当算术运算返回一个未定义的或无法表示的值时，<code>NaN</code>就产生了。但是，<code>NaN</code>并不一定用于表示某些值超出表示范围的情况。将某些不能强制转换为数值的非数值转换为数值的时候，也会得到<code>NaN</code>。</p><p>例如，0 除以0会返回<code>NaN</code>—— 但是其他数除以0则不会返回<code>NaN</code>。</p></blockquote><h3 id="1-2-String-字符串型"><a href="#1-2-String-字符串型" class="headerlink" title="1.2 String 字符串型"></a>1.2 String 字符串型</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'我是字符串'</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'我是"Coder Rat",是个程序员'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//嵌套使用的话，遵循外单内双，或者外双内单</span></code></pre><h4 id="1-2-1-字符串转义字符"><a href="#1-2-1-字符串转义字符" class="headerlink" title="1.2.1 字符串转义字符"></a>1.2.1 字符串转义字符</h4><ol><li><code>\n</code>  换行符，newline</li><li><code>\\</code>  斜杠</li><li><code>\&#39;</code>  单引号</li><li><code>\&quot;</code>  双引号</li><li><code>\t</code>  tab缩进，制表符</li><li><code>\b</code>  空格，b是blank的意思 一个空格的话等同于直接空格</li></ol><pre class=" language-js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'酷热难耐，火辣的太阳底下，我挺拔的身姿，成为了最独特的风景。\n我审视四周，这里，是我的舞台，我就是天地间的王者。\n这一刻，我豪气冲天，大喊一声："收破烂啦~"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="1-2-2-字符串长度-length"><a href="#1-2-2-字符串长度-length" class="headerlink" title="1.2.2 字符串长度 length"></a>1.2.2 字符串长度 length</h4><p>用于检测字符串的长度</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> strMsg <span class="token operator">=</span> <span class="token string">"I am Coder Rat."</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strMsg <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> strMsg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>I am Coder Rat.<br>15</p><p>–注意：空格和符号也占字符串长度–</p></blockquote><h4 id="1-2-3-字符串的拼接"><a href="#1-2-3-字符串的拼接" class="headerlink" title="1.2.3 字符串的拼接"></a>1.2.3 字符串的拼接</h4><p>多个字符串之间可以使用 <code>+</code> 进行拼接，其拼接方式为 :</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//拼接后的新字符串 = 字符串 + 任何类型;</span><span class="token keyword">var</span> strNew <span class="token operator">=</span> <span class="token string">"我是Coder Rat，我"</span> <span class="token operator">+</span> <span class="token number">18</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">"岁了"</span><span class="token punctuation">,</span><span class="token string">"你呢？"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"不告诉你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token boolean">false</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strNew<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"12"</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"1212"</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"1212" 这就是正常的数字相加，数字+数字+String</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//24 这就是正常的数字相加，数字+数字</span></code></pre><blockquote><p> 我是Coder Rat，我18岁了,你呢？Thu Dec 05 2018 21:16:36 GMT+0800 (中国标准时间)function () {<br>        alert(“不告诉你”);<br>    }false<br>null</p></blockquote><p>– 注意：拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串，函数的话也不会执行，直接返回函数体，方法调用会执行，将结果转为字符串以供拼接 –</p><h3 id="1-3-Boolean-布尔型"><a href="#1-3-Boolean-布尔型" class="headerlink" title="1.3 Boolean 布尔型"></a>1.3 Boolean 布尔型</h3><p>布尔型有两个值：<code>true</code> <code>false</code>，其中true表示真（对），false表示假（错）</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*Boolean类型的值，可以参与数学运算true === 1false === 0*/</span><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">var</span> flag1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> flag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> flag1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> flag <span class="token operator">+</span> flag1<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>2<br>1<br>1</p></blockquote><h3 id="1-4-Undefined-amp-Null"><a href="#1-4-Undefined-amp-Null" class="headerlink" title="1.4 Undefined &amp; Null"></a>1.4 Undefined &amp; Null</h3><p>一个声明变量，没赋值，则这个变量为undefined类型</p><p>一个声明的变量，赋值为null，则此类型变量为Null类型的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> variable <span class="token operator">=</span> undefined <span class="token operator">+</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为undefinedCoder Rat</span><span class="token keyword">var</span> variable1 <span class="token operator">=</span> undefined <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为NaN 因为undefined == NaN</span><span class="token keyword">var</span> variable2 <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">+</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为nullCoder Rat</span><span class="token keyword">var</span> variable3 <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为 1 null为空，相当于向内存中填充了1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>undefinedCoder Rat<br>NaN<br>nullCoder Rat<br>1</p></blockquote><h2 id="2-typeof-获取变量数据类型"><a href="#2-typeof-获取变量数据类型" class="headerlink" title="2. typeof 获取变量数据类型"></a>2. typeof 获取变量数据类型</h2><p>用法：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//返回值为变量的数据类型</span><span class="token keyword">typeof</span> 变量<span class="token punctuation">;</span></code></pre><h2 id="3-字面量"><a href="#3-字面量" class="headerlink" title="3. 字面量"></a>3. 字面量</h2><p>字面量是在代源码中，一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span><span class="token keyword">var</span> boo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">var</span> und <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token keyword">var</span> nul <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是匿名函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="4-数据类型转换"><a href="#4-数据类型转换" class="headerlink" title="4. 数据类型转换"></a>4. 数据类型转换</h2><p><strong>变量的数据类型为什么需要进行转换？</strong></p><p>使用表单、prompt获取过来的数据默认是字符串类型的，此时就不能直接简单地进行数学运算，而需要转换变量的数据类型，从而达到目的。</p><p>通俗来说：数据类型转换就是把一种数据类型的变量转换成另一种想要的数据类型。</p><p><strong>常用的转换</strong></p><ol><li>转换为字符串类型</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*--调用对象的内置方法--变量/(字面量).toString();*/</span><span class="token comment" spellcheck="true">/*-- 强制转换方法 --String(变量/字面量); 调用String构造器interface StringConstructor {    new(value?: any): String;    (value?: any): string;    readonly prototype: String;    fromCharCode(...codes: number[]): string;}*/</span><span class="token comment" spellcheck="true">/*字面量的话，使用.toString()最好是加上括号，比如数字.toString();不加括号就会报错*/</span><span class="token comment" spellcheck="true">/*-- 隐式转换 --  最常用的方法加号拼接字符串任何类型的数据与字符串以 + 号相连，则数据会被先强制转换为字符串，再和字符串相连*/</span></code></pre><ol start="2"><li>转换为数字型</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. parseInt();  将String类型转换为整数数值型2. parseFloat(); 将String类型转换为浮点数型3. Number(); 强制转换4. - * / 隐式转换 通过数学运算符，不包括 +*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"18.18"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"rem12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"18.18"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"rem12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"12px"</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"12"</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"126"</span> <span class="token operator">-</span> <span class="token string">"120"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>18<br />18<br />12<br />NaN<br />18.18<br />12<br />NaN<br />NaN<br />12<br />NaN<br />12<br />6</p></blockquote><pre class=" language-js"><code class="language-js">简单的加法器<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入第一个值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入第二个值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> b <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// var sum = Number(a) + Number(b);</span><span class="token comment" spellcheck="true">// var sum = parseFloat(a) + parseFloat(b);</span><span class="token function">alert</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>转换为布尔型</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*方法：Boolean()函数代表空、否定的值会被转为false如 ""、0、NaN、null、undefined其余的值都会被转换为true*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"Coder Rat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"NaN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span></code></pre><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="1-解释型语言和编译型语言"><a href="#1-解释型语言和编译型语言" class="headerlink" title="1. 解释型语言和编译型语言"></a>1. 解释型语言和编译型语言</h3><p>计算机不能直接理解任何除机器语言以外的其他语言，所以必须要把程序员所编写的程序语言翻译成机器语言才能执行程序。程序语言翻译成机器语言的工具，被称为翻译器。</p><p>编程语言 :point_right:翻译器:point_right:机器语言（二进制）</p><p>翻译器翻译的方式有两种：一个是<strong>编译</strong>，另外一个是<strong>解释</strong>。</p><p>两者的区别在于：<strong>翻译的时间点不同</strong></p><p>编译器：是在代码执行之前进行编译，生成中间代码文件</p><p>解释器：是在运行时进行及时解释，并立即执行（当编译器以解释方式运行的时候，也称之为解释器，如Java的 JIT 机制）</p><h3 id="JIT概念"><a href="#JIT概念" class="headerlink" title="JIT概念"></a>JIT概念</h3><p>JIT：Just In Time Compiler，一般翻译为即时编译器，这是是针对解释型语言而言的，而且并非虚拟机必须，是一种优化手段，Java的商用虚拟机HotSpot就有这种技术手段，Java虚拟机标准对JIT的存在没有作出任何规范，所以这是虚拟机实现的自定义优化技术。</p><p>  HotSpot虚拟机的执行引擎在执行Java代码是可以采用【解释执行】和【编译执行】两种方式的，如果采用的是编译执行方式，那么就会使用到JIT，而解释执行就不会使用到JIT，所以，早期说Java是解释型语言，是没有任何问题的，而在拥有JIT的Java虚拟机环境下，说Java是解释型语言严格意义上已经不正确了。</p><p>  HotSpot中的编译器是javac，他的工作是将源代码编译成字节码，这部分工作是完全独立的，完全不需要运行时参与，所以Java程序的编译是半独立的实现。有了字节码，就有解释器来进行解释执行，这是早期虚拟机的工作流程，后来，虚拟机会将执行频率高的方法或语句块通过JIT编译成本地机器码，提高了代码执行的效率，至此你已经了解了JIT在Java虚拟机中所处的地位和工作的主要内容。</p><p><strong>1.JIT的工作原理图</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2hpLmNzZG4ubmV0L2F0dGFjaG1lbnQvMjAxMTA5LzE2LzBfMTMxNjE1OTYwNGRTNjAuZ2lm" alt="img"></p><p>工作原理<br>当JIT编译启用时（默认是启用的），JVM读入.class文件解释后，将其发给JIT编译器。JIT编译器将字节码编译成本机机器代码。 </p><p>通常javac将程序源码编译，转换成java字节码，JVM通过解释字节码将其翻译成相应的机器指令，逐条读入，逐条解释翻译。非常显然，经过解释运行，其运行速度必定会比可运行的二进制字节码程序慢。为了提高运行速度，引入了JIT技术。 </p><p>在执行时JIT会把翻译过的机器码保存起来，已备下次使用，因此从理论上来说，採用该JIT技术能够，能够接近曾经纯编译技术。 </p><p><strong>2.相关知识</strong><br>JIT是just in time,即时编译技术。使用该技术，可以加速java程序的运行速度。 </p><p>JIT并不总是奏效，不能期望JIT一定可以加速你代码运行的速度，更糟糕的是她有可能减少代码的运行速度。这取决于你的代码结构，当然非常多情况下我们还是可以如愿以偿的。 </p><p>从上面我们知道了之所以要关闭JITjava.lang.Compiler.disable(); 是由于加快运行的速度。由于JIT对每条字节码都进行编译，造成了编译过程负担过重。为了避免这样的情况，当前的JIT仅仅对常常运行的字节码进行编译，如循环等。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
