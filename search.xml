<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>产品图片放大镜</title>
      <link href="/2019/12/09/chan-pin-tu-pian-fang-da-jing/"/>
      <url>/2019/12/09/chan-pin-tu-pian-fang-da-jing/</url>
      
        <content type="html"><![CDATA[<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>          <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>京东手机放大镜效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">* </span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">body </span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*鼠标移动事件 主体*/</span>        <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">vertical-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*可移动透明块*/</span>        <span class="token selector"><span class="token class">.moveBlock</span> </span><span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">.5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*放大镜显示块*/</span>        <span class="token selector"><span class="token class">.after</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">205</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("3.jpg")</span> no-repeat <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">600</span>px <span class="token number">600</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*放大镜遮罩层 显示JD水印*/</span>        <span class="token selector"><span class="token class">.cover</span> </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#e00000</span><span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">.4</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*播放键容器*/</span>        <span class="token selector"><span class="token class">.cover_btn</span> </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*播放键外圈*/</span>        <span class="token selector"><span class="token class">.cover_btn</span> a </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">100</span>,<span class="token number">120</span>,<span class="token number">150</span>,<span class="token number">.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid white<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">70%</span> auto <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.cover_btn</span> a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*播放键 内三角*/</span>        <span class="token selector"><span class="token class">.cover_btn</span> a span </span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid white<span class="token punctuation">;</span>            <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid transparent<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">5</span>px solid transparent<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tu<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mainImg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>moveBlock<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>京东 JD.COM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cover_btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> mainView <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> moveBlock <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".moveBlock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> after <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".after"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mainView<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span>move<span class="token punctuation">)</span><span class="token punctuation">;</span>    mainView<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseout"</span><span class="token punctuation">,</span>dis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>        after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> point <span class="token operator">=</span> moveBlock<span class="token punctuation">.</span>offsetWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> maxWay <span class="token operator">=</span> mainView<span class="token punctuation">.</span>offsetWidth <span class="token operator">-</span> moveBlock<span class="token punctuation">.</span>offsetWidth <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//移动块的定位left值</span>        <span class="token keyword">var</span> lenX <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> mainView<span class="token punctuation">.</span>offsetLeft <span class="token operator">-</span> point<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//移动块的定位top值</span>        <span class="token keyword">var</span> lenY <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> mainView<span class="token punctuation">.</span>offsetTop <span class="token operator">-</span> point<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lenX <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> lenY <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lenX <span class="token operator">></span> maxWay<span class="token punctuation">)</span><span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> maxWay <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPositionX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">*</span> maxWay <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> lenX <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPositionX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">*</span> lenX <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lenY <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lenY <span class="token operator">></span> maxWay<span class="token punctuation">)</span><span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> maxWay <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPositionY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">*</span> maxWay <span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lenY <span class="token operator">></span> mainView<span class="token punctuation">)</span><span class="token punctuation">{</span>            after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> lenY <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>            after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPositionY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token operator">*</span> lenY <span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*移出鼠标，全部隐藏*/</span>    <span class="token keyword">function</span> <span class="token function">dis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        moveBlock<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>        after<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/images/image-20191209160123252.png" alt="image-20191209160123252"></p><p>效果如上图所示</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 手写JS效果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web API</title>
      <link href="/2019/12/01/web-api/"/>
      <url>/2019/12/01/web-api/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-DOM-amp-BOM"><a href="#JavaScript-DOM-amp-BOM" class="headerlink" title="JavaScript DOM&amp;BOM"></a>JavaScript DOM&amp;BOM</h1><ul><li>ECMAScript</li></ul><p><strong>Web APIs</strong>  负责页面交互效果</p><ul><li>DOM<ol><li>其实时我们操作页面元素的各种方法的集合，也可以称为是方法集合的对象。（操作页面的方法包括：让元素显示隐藏、改变元素的宽高颜色等）</li></ol></li><li>BOM</li></ul><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><ul><li>API(Application Programming Interface,应用程序编程接口)是一些<strong>预先定义的函数</strong>，目的是提供应用程序与开发人员基于某些软件或硬件得以访问一组例程的能力，但又无需访问源码或者理解内部工作机制的细节。<strong>简单来讲，API是给程序员提供的一种工具，以便能更轻松地实现想要完成的功能。</strong></li></ul><h4 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h4><ul><li>Web API是浏览器提供的一套操作<strong>浏览器功能</strong>和<strong>页面元素</strong>的API(BOM&amp;DOM)。</li></ul><h4 id="API-和-Web-API-总结"><a href="#API-和-Web-API-总结" class="headerlink" title="API 和 Web API 总结"></a>API 和 Web API 总结</h4><p>API 是为我们程序员提供的一个接口，帮助我们实现某种功能</p><p>API 其实就是一组方法的集合体</p><p>Web API 就是浏览器中的一组方法的集合体，我们 JS 程序运行在浏览器中的时候，就可以调用Web API 中的各种方法，如果运行在其他环境中，就需要调用其他环境提供的API方法。（比如让js程序在node.js环境中运行，则会报错）</p><p>Web APIs </p><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><ol><li><p>DOM(Document Object Model,文档对象模型)，是W3C组织推荐的处理可扩展标记语言（HTML或者XML）的标准编程接口。</p></li><li><p>DOM树（节点树）</p><p>在DOM中，我们认为网页中所有内容都是节点<code>node</code>（标签、属性、文本、注释等），我们整个页面都是由各种节点组成，因此，我们整个页面也可以被称为节点树或者DOM树。</p><p>DOM把以上内容都看作是对象。</p></li></ol><h2 id="一、DOM-获取元素"><a href="#一、DOM-获取元素" class="headerlink" title="一、DOM 获取元素"></a>一、DOM 获取元素</h2><h3 id="1-获取页面中元素的几种简单方法"><a href="#1-获取页面中元素的几种简单方法" class="headerlink" title="1. 获取页面中元素的几种简单方法"></a>1. 获取页面中元素的几种简单方法</h3><h4 id="1-1-根据-ID-（获取某个元素对象）"><a href="#1-1-根据-ID-（获取某个元素对象）" class="headerlink" title="1.1 根据 ID （获取某个元素对象）"></a>1.1 根据 ID （获取<strong>某个</strong>元素对象）</h4><p>使用 <code>getElementById(&quot;类选择器不带符号&quot;);</code></p><ol><li>因为我们文档页面从上往下加载，所以先要有标签，所以我们script写到对应的标签下面</li><li>get （获得）Element （元素） By （通过） 驼峰命名法</li><li>参数是大小写敏感的字符串</li><li>返回的是指定元素对象</li></ol><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>me<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个打印文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> d <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"me"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="1-2-通过标签名获取（某些元素对象的集合-同种元素对象）"><a href="#1-2-通过标签名获取（某些元素对象的集合-同种元素对象）" class="headerlink" title="1.2 通过标签名获取（某些元素对象的集合 - 同种元素对象）"></a>1.2 通过标签名获取（某些元素对象的集合 - 同种元素对象）</h4><p>使用<code>getElementsByTagName(&quot;标签选择器&quot;)</code></p><p>获取过来的是元素对象的集合，以伪数组的形式存储。HTMLCollection</p><p><img src="/images/image-20191209163814791.png" alt="image-20191209163814791"></p><h4 id="拓展1：伪数组"><a href="#拓展1：伪数组" class="headerlink" title="拓展1：伪数组"></a>拓展1：伪数组</h4><p>具有数组的形态，但是不具备数组的方法或者属性的数据集合被称为伪数组或者类数组，比较典型的有arguments还有<code>getElementsByTagName()</code>获取的页面元素的集合。</p><p>特点：有length属性且length属性的值为Number类型的对象，如果length的值不为零，则其他属性按照类似数组一样键（下标）：值对的形式存储。</p><p>这样也非常方便遍历得到获取的相应的元素对象。</p><p>Array.from(伪数组);可以把伪数组转化成真实的数组，值就是伪数组中的元素对象<code>HTMLLIElement</code>。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>ul id<span class="token operator">=</span><span class="token string">"con"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>我是li1<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>我是li2<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>我是li3<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>我是li4<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>我是li5<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><img src="/images/image-20191209164920599.png" alt="image-20191209164920599"></p><h3 id="2-HTML5-新增的获取元素方法"><a href="#2-HTML5-新增的获取元素方法" class="headerlink" title="2. HTML5 新增的获取元素方法"></a>2. HTML5 新增的获取元素方法</h3><h4 id="2-1-通过类名获取（某些元素对象的集合-同类名元素对象）"><a href="#2-1-通过类名获取（某些元素对象的集合-同类名元素对象）" class="headerlink" title="2.1 通过类名获取（某些元素对象的集合 - 同类名元素对象）"></a>2.1 通过类名获取（某些元素对象的集合 - 同类名元素对象）</h4><p>使用<code>getElementsByClassName(&quot;类选择器名，不加符号&quot;)</code></p><p>获取过来的是元素对象的集合，以伪数组的形式存储。HTMLCollection</p><h4 id="2-2-全局CSS选择器获取"><a href="#2-2-全局CSS选择器获取" class="headerlink" title="2.2 全局CSS选择器获取"></a>2.2 全局CSS选择器获取</h4><p>使用</p><ol><li><p><code>querySelector(&quot;选择器加符号，标签选择器无符号&quot;)</code></p><p>返回指定选择器的第一个元素对象，类似<code>getElementById(&quot;idValue&quot;)</code></p></li><li><p><code>querySelectorAll(&quot;选择器加符号，标签选择器无符号&quot;)</code></p><p>返回指定选择器的所有元素对象的集合NodeList。</p></li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/images/image-20191209171701515.png" alt="image-20191209171701515"></p><h4 id="拓展2：NodeList"><a href="#拓展2：NodeList" class="headerlink" title="拓展2：NodeList"></a>拓展2：NodeList</h4><p><code>NodeList</code> 对象是一个节点的集合，是由 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/childNodes" target="_blank" rel="noopener"><code>Node.childNodes</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll" target="_blank" rel="noopener"><code>document.querySelectorAll</code></a> 返回的.</p><blockquote><p>NodeList<strong>不是一个数组</strong>，是一个类似数组的对象(<em>Like Array Object</em>).</p><p>虽然NodeList不是一个数组，但是可以使用forEach()对其进行迭代。</p><p>还可以使用Array.from()将其转换为实际数组。</p></blockquote><p>在一些情况下，<code>NodeList</code> 对象是一个实时集合，也就是说，如果文档中的节点树发生变化，则已经存在的实时 <code>NodeList</code> 对象也会随之变化。例如，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/childNodes" target="_blank" rel="noopener"><code>Node.childNodes</code></a> 是实时的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'parent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child_nodes <span class="token operator">=</span> parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child_nodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我们假设结果会是“2”</span>parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child_nodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 但此时的输出是“3”</span></code></pre><p>在其他情况下，<code>NodeList</code> 是一个静态集合，也就意味着随后对文档对象模型的任何改动都不会影响集合的内容。比如<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll" target="_blank" rel="noopener"><code>document.querySelectorAll</code></a> 就会返回一个静态的 <code>NodeList</code>。</p><p>最好牢记这种不同，尤其是在当你选择 <code>NodeList</code> 中所有项遍历的方式，或缓存它的长度的时候。</p><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/length" target="_blank" rel="noopener"><code>NodeList.length</code></a></p><p><code>NodeList</code> 中包含的节点个数。</p></li></ul><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for" target="_blank" rel="noopener">for</a> 循环遍历一个<code>NodeList</code> 对象中的所有的节点：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myNodeList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> item <span class="token operator">=</span> myNodeList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 调用 myNodeList.item(i) 是没有必要的</span><span class="token punctuation">}</span></code></pre><p><strong>不要尝试使用 <code>for...in</code> 或者 <code>for each...in</code> 来遍历一个 <code>NodeList</code> 对象中的元素</strong>，因为，如果你把上述两个属性也看成 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element" target="_blank" rel="noopener"><code>element</code></a> 对象的话，<code>NodeList</code> 对象中的 <code>length</code> 和 <code>item</code> 属性也会被遍历出来，这可能会导致你的脚本运行出错。此外，<code>for...in</code> 不能保证访问这些属性的顺序。</p><p><a href="https://developer.mozilla.org/zh-CN/JavaScript/Reference/Statements/for...of" target="_blank" rel="noopener">for…of</a> 循环<strong>将会</strong>正确的遍历 <code>NodeList</code> 对象：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'input[type=checkbox]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> checkbox <span class="token keyword">of</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>  checkbox<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最近，浏览器也支持一些遍历方法，比如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/forEach" target="_blank" rel="noopener"><code>forEach()</code></a> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/entries" target="_blank" rel="noopener"><code>entries()</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/values" target="_blank" rel="noopener"><code>values()</code></a>、和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/keys" target="_blank" rel="noopener"><code>keys()</code></a>。</p><p>也有一种使用数组 <code>Array</code> 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener"><code>Array.prototype.forEach</code></a> 来遍历 <code>NodeList</code> 的方法，这种方法兼容 Internet Explorer ：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'input[type=checkbox]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>checkbox<span class="token punctuation">)</span> <span class="token punctuation">{</span>  checkbox<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="为什么-NodeList-不是数组？"><a href="#为什么-NodeList-不是数组？" class="headerlink" title="为什么 NodeList 不是数组？"></a>为什么 NodeList 不是数组？</h5><p><code>NodeList</code> 对象在某些方面和数组非常相似，看上去可以直接使用从 <code>Array.prototype</code> 上继承的方法。然而，除了 <code>forEach</code> 方法，<code>NodeList</code> 没有这些类似数组的方法。</p><p>JavaScript 的继承机制是基于原型的。数组元素之所以有一些数组方法（比如 <code>forEach</code> 和 <code>map</code>），是因为它的原型链上有这些方法，如下:</p><p><code>myArray --&gt; Array.prototype --&gt; Object.prototype --&gt; null</code>（想要获取一个对象的原型链，可以连续地调用 <code>Object.getPrototypeOf</code>，直到原型链尽头）。</p><p><code>forEach</code>，<code>map</code> 这些方式其实是 <code>Array.prototype</code> 这个对象的方法。</p><p>和数组不一样的是，<code>NodeList</code> 的原型链是这样的：</p><pre><code>myNodeList --&gt; NodeList.prototype --&gt; Object.prototype --&gt; null</code></pre><p>NodeList的原型上除了类似数组的 <code>forEach</code> 方法之外，还有 <code>item</code>，<code>entries</code>，<code>keys</code> 和 <code>values</code> 方法。</p><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>一个解决办法就是把 <code>Array.prototype</code> 上的方法添加到 <code>NodeList.prototype</code> 上。可是，要注意<a href="http://perfectionkills.com/whats-wrong-with-extending-the-dom/" target="_blank" rel="noopener">扩展DOM对象的原型是非常危险的</a>，尤其是在旧版本的Internet Explorer（6，7，8）中。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arrayMethods <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span> Array<span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span>arrayMethods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> attachArrayMethodsToNodeList <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">attachArrayMethodsToNodeList</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>methodName <span class="token operator">!==</span> <span class="token string">"length"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    NodeList<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span> <span class="token string">'div'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> firstDiv <span class="token operator">=</span> divs<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>firstDiv<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span> divChild <span class="token punctuation">)</span><span class="token punctuation">{</span>  divChild<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'#0F0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不扩展 DOM 对象原型的解决办法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> forEach <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach<span class="token punctuation">;</span><span class="token keyword">var</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span> <span class="token string">'div'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> firstDiv <span class="token operator">=</span> divs<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>forEach<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>firstDiv<span class="token punctuation">.</span>childNodes<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span> divChild <span class="token punctuation">)</span><span class="token punctuation">{</span>  divChild<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'#0F0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>请注意，在上面的代码中，将某个宿主对象 （如 <code>NodeList</code>） 作为 <code>this</code> 传递给原生方法 （如 forEach） 不能保证在所有浏览器中工作，已知在一些浏览器中会失败。</p></blockquote><h4 id="拓展3：HTMLCollection"><a href="#拓展3：HTMLCollection" class="headerlink" title="拓展3：HTMLCollection"></a>拓展3：HTMLCollection</h4><p><strong><code>HTMLCollection</code></strong> 接口表示一个包含了元素（元素顺序为文档流中的顺序）的通用集合（generic collection），还提供了用来从该集合中选择元素的方法和属性。</p><p><strong>注意：由于历史原因（DOM4之前，实现该接口的集合只能包含 HTML 元素），该接口被称为</strong> <code>HTMLCollection</code>。</p><p>HTML DOM 中的 <code>HTMLCollection</code> 是即时更新的（live）；当其所包含的文档结构发生改变时，它会自动更新。</p><h5 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h5><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCollection/length" target="_blank" rel="noopener"><code>HTMLCollection.length</code></a> 只读</p><p>返回集合当中子元素的数目。</p></li></ul><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCollection/item" target="_blank" rel="noopener"><code>HTMLCollection.item()</code></a></p><p>根据给定的索引（从0开始），返回具体的节点。如果索引超出了范围，则返回 <code>null</code>。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCollection/namedItem" target="_blank" rel="noopener"><code>HTMLCollection.namedItem()</code></a></p><p>根据 Id 返回指定节点，或者作为备用，根据字符串所表示的 <code>name</code> 属性来匹配。根据 name 匹配只能作为最后的依赖，并且只有当被引用的元素支持 <code>name</code> 属性时才能被匹配。如果不存在符合给定 name 的节点，则返回 <code>null</code>。</p></li></ul><h5 id="在-JavaScript-中使用"><a href="#在-JavaScript-中使用" class="headerlink" title="在 JavaScript 中使用"></a>在 JavaScript 中使用</h5><p>在 JavaScript 中，为了获取给定的 HTMLCollection 的元素，可以使用方括号语法来代替直接调用 <code>item()</code> 或 <code>namedItem()</code> 方法。在方括号中，数值如同 <code>item()</code>，字符串值如同 <code>namedItem()。</code></p><p>例如，假定在文档中有一个元素，且它的 <code>id</code> 是 <code>&quot;myForm&quot;</code>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> elem1<span class="token punctuation">,</span> elem2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// document.forms 是一个 HTMLCollection</span>elem1 <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>elem2 <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>elem1 <span class="token operator">===</span> elem2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显示 "true"</span>elem1 <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token string">"myForm"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>elem2 <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">.</span><span class="token function">namedItem</span><span class="token punctuation">(</span><span class="token string">"myForm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>elem1 <span class="token operator">===</span> elem2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显示 "true"</span></code></pre><h5 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h5><p>当使用字符串作为 namedItem 的参数，且匹配的元素多于一个时，不同的浏览器表现不同。Firefox 8 表现如同 DOM 2 和 DOM 4 说明的，返回第一个匹配的元素。而 Webkit 浏览器和 IE 返回另外一个 HTMLCollection，Opera 返回一个包含所有元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList" target="_blank" rel="noopener"><code>NodeList</code></a>。</p><hr><h3 id="3-特殊元素的获取"><a href="#3-特殊元素的获取" class="headerlink" title="3. 特殊元素的获取"></a>3. 特殊元素的获取</h3><h4 id="3-1-获取-body-元素"><a href="#3-1-获取-body-元素" class="headerlink" title="3.1 获取 body 元素"></a>3.1 获取 body 元素</h4><p><code>document.body;</code></p><h4 id="3-2-获取-HTML-元素"><a href="#3-2-获取-HTML-元素" class="headerlink" title="3.2 获取 HTML 元素"></a>3.2 获取 HTML 元素</h4><p><code>document.documentElement;</code></p><h2 id="二、事件"><a href="#二、事件" class="headerlink" title="二、事件"></a>二、事件</h2><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。</p><p>简单理解：触发——响应机制。</p><p>网页中的每个元素都可以产生某些可以触发的 JavaScript 事件。就像<code>&lt;a&gt;</code>标签自带的转跳机制和鼠标变为小手。即点击（触发）转跳（响应）悬停（触发）变小手（响应）。</p><h4 id="1-事件三要素"><a href="#1-事件三要素" class="headerlink" title="1. 事件三要素"></a>1. 事件三要素</h4><ol><li><p>事件源</p><p>谁？ 页面元素</p></li><li><p>事件类型</p><p>如何触发 什么事件？鼠标点击（click）、悬停(mouseover)、键盘按下(keydown)、滑动滚轮(mousewheel)等</p></li></ol><table><thead><tr><th>鼠标事件</th><th>触发事件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过（悬停）触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发（表单）</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><ol><li><p>事件处理程序</p><p>通过一个函数赋值的方式完成</p></li></ol><h4 id="2-执行事件的步骤"><a href="#2-执行事件的步骤" class="headerlink" title="2. 执行事件的步骤"></a>2. 执行事件的步骤</h4><ol><li>获取事件源</li><li>注册事件（绑定事件类型）</li><li>添加事件处理程序（采取函数赋值的形式）</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"----"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="三、DOM-操作元素"><a href="#三、DOM-操作元素" class="headerlink" title="三、DOM 操作元素"></a>三、DOM 操作元素</h2><h3 id="1-DOM-操作元素之改变内容"><a href="#1-DOM-操作元素之改变内容" class="headerlink" title="1. DOM 操作元素之改变内容"></a>1. DOM 操作元素之改变内容</h3><p>JavaScript 的 DOM 操作可以改变网页的内容、结构和样式，我们可以利用DOM操作元素来改变元素里面的内容、属性等。</p><h4 id="1-1-Element-innerText"><a href="#1-1-Element-innerText" class="headerlink" title="1.1 Element.innerText"></a>1.1 Element.innerText</h4><p>非标准 不识别html标签，去除空格和换行</p><h4 id="1-2-Element-innerHTML"><a href="#1-2-Element-innerHTML" class="headerlink" title="1.2 Element.innerHTML"></a>1.2 Element.innerHTML</h4><p>W3C标准 识别html标签，保留空格和换行（用的多）</p><p>获取系统时间：</p><pre class=" language-html"><code class="language-html"></code></pre><p>以上两个属性，都是可读写的，并且向内部添加内容时，会覆盖原有内容，如需保留原有内容，则需要拼接原有的内容</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"要添加的内容"</span><span class="token punctuation">;</span></code></pre><p>事件驱动函数中的this永远指向当前时间函数所挂载的那个DOM对象，简单的来说，就是给哪个元素添加了事件，那么这个事件中的this就指向这个元素。</p><p>定位会影响他的层级，所以鼠标事件可能会受到影响</p><p>style对象里面保存了所有的css样式，作为他的属性名，任何一个元素都拥有style对象，对象中的属性都是一样的，如果当前没有默认的行内样式，则当前样式的属性值为空。</p><p>style对象的作用原理，就是但我们使用style给元素添加样式的时候，他会默认给元素添加一个行内样式，因此达到改变元素样式的效果。</p><p>我们可以通过修改元素的className更改元素的样式，从而达到更改样式的效果（适合样式较多或者功能复杂的情况）</p><p>class是个保留字，因此使用className</p><p>className属性会覆盖元素原有的class</p><h3 id="onkeydown、onkeypress、onkeyup三个事件有什么区别？"><a href="#onkeydown、onkeypress、onkeyup三个事件有什么区别？" class="headerlink" title="onkeydown、onkeypress、onkeyup三个事件有什么区别？"></a>onkeydown、onkeypress、onkeyup三个事件有什么区别？</h3><p>onmouseover onmousemove的区别</p><p>onmouseout</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>留言板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ww<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"textarea"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> u <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">.</span>onclick<span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入留言内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lis<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            u<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>链接不需要跳转（阻止链接跳转）：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>&lt;a href="javascript:void(0);"/a></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>自动填充表格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">table </span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>            <span class="token property">border-spacing</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">border-collapse</span><span class="token punctuation">:</span>collapse<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">thead </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">td </span><span class="token punctuation">{</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid gray<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>科目<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>分数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"唐三"</span><span class="token punctuation">,</span>            course<span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">,</span>            score<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"小舞"</span><span class="token punctuation">,</span>            course<span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">,</span>            score<span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"沐白"</span><span class="token punctuation">,</span>            course<span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">,</span>            score<span class="token punctuation">:</span> <span class="token number">92</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"大师"</span><span class="token punctuation">,</span>            course<span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">,</span>            score<span class="token punctuation">:</span> <span class="token number">190</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> tb <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"tbody"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> tr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//行</span>        <span class="token keyword">var</span> trs <span class="token operator">=</span> tb<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组中有几个对象，则生成多少行</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> td <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//列</span>            td<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组中对象的元素值插入td中</span>            trs<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>td<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> del <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        del<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;a class='del' href='javascript:;'>删除&lt;/a>"</span><span class="token punctuation">;</span>        trs<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tb<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="解除事件绑定的方式"><a href="#解除事件绑定的方式" class="headerlink" title="解除事件绑定的方式"></a>解除事件绑定的方式</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.设置事件触发源的事件为空</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.解除相应的绑定事件</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当发生事件的时候，事件流始终存在，与文档元素是否存在相应的事件无关</p><h2 id="动画实现原理"><a href="#动画实现原理" class="headerlink" title="动画实现原理"></a>动画实现原理</h2><p>核心原理：通过定时器setInterval()不断切换盒子的显示效果等。</p><ol><li><p>获得盒子的当前位置</p></li><li><p>让盒子在当前位置上加 1 个移动距离</p></li><li><p>利用定时器，不断重复这个操作<code>setInterval()</code></p></li><li><p>加一个结束定时器的条件</p><blockquote><p>注意：该盒子需要加定位，才能使用Element.style.left = Element.offsetLeft +1 + “px”;</p></blockquote></li></ol><p>简单动画函数的封装  <code>obj 目标对象</code> <code>target 目标位置</code></p><pre class=" language-html"><code class="language-html"></code></pre><p>JS自动化思想</p><p>一致性</p><p>可复用性</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web API </tag>
            
            <tag> DOM&amp;BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5与CSS3权威指南</title>
      <link href="/2019/11/29/du-shu-bi-ji-html-yu-css3-quan-wei-zhi-nan-shang-xia/"/>
      <url>/2019/11/29/du-shu-bi-ji-html-yu-css3-quan-wei-zhi-nan-shang-xia/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/HTML5%E4%B8%8ECSS3.jpg" alt="HTML5与CSS3权威指南.jpg"></p><h1 id="前言-此版本为第三版"><a href="#前言-此版本为第三版" class="headerlink" title="前言 此版本为第三版"></a>前言 此版本为第三版</h1><p>技术范围：截止2015年5月前</p><p><strong>HTML5：</strong>基于2014年10月28日，W3C的HTML工作组正式发布的HTML5的正式推荐标准。</p><p>增加了支持web应用开发者的许多新特性，以及更符合开发者使用习惯的新元素，并重点关注定义<strong>清晰的、一致的准则</strong>，以确保web应用和内容在不同用户代理（浏览器）中的互操作性。</p><p>HTML5是构建<strong>开放web平台</strong>的核心。</p><p><strong>CSS3:</strong> 2015年4月9日，W3C的CSS工作组发布CSS基本用户接口模块（CSS Basic User Interface Module Level 3,CSS3 UI）的标准工作草案。该文档描述了CSS3中对HTML、XML（包括 XHTML）进行样式处理所需的与用户界面相关的CSS选择器（selectors）、属性及属性值。它包含并扩展了在CSS Level 2 及 Selector 规范中定义的与用户接口有关的特性。</p><p><strong>新体验：</strong>web的音频和视频不再需要插件，通过Canvas更灵活地完成图像绘制，而不必考虑屏幕的分辨率，浏览器对<strong>可扩展矢量图</strong>（SVG）和数学标记语言(MathML)的本地支持，通过引入新的注释信息以增强对东亚文字呈现（Ruby）的支持，对富web应用信息无障碍新特性的支持，等等。</p><h1 id="拓展-SGML-XML-HTML"><a href="#拓展-SGML-XML-HTML" class="headerlink" title="拓展 SGML XML HTML"></a>拓展 SGML XML HTML</h1><h2 id="HTML-5-已经不是-SGML-的子集，那么-SGML-、XML-、-HTML-之间有什么关联与区别呢"><a href="#HTML-5-已经不是-SGML-的子集，那么-SGML-、XML-、-HTML-之间有什么关联与区别呢" class="headerlink" title="HTML 5 已经不是 SGML 的子集，那么 SGML 、XML 、 HTML 之间有什么关联与区别呢?"></a>HTML 5 已经不是 SGML 的子集，那么 SGML 、XML 、 HTML 之间有什么关联与区别呢?</h2><p><strong>SGML</strong>是指“标准通用标记语言”(Standard Generalized Markup Language), 是1986年出版发布的一个信息管理方面的国际标准(ISO 8879)，它是国际上定义电子文件结构和内容描述的标准，是一种非常复杂的文档的结构，主要用于大量高度结构化数据的防卫区和其他各种工业领域，利于分类和索引。SGML规定了在文档中嵌入描述标记的标准格式，指定了描述文档结构的标准方法，目前在WEB上使用的HTML格式便是使用固定标签集的一种SGML文档。由于SGML可以支持无数的文档结构类型，并且可以创建与特定的软硬件无关的文档，因此很容易与使用不同计算机系统的用户交换文档。同XML相比，定义的功能很强大，缺点是它不适用于Web数据描述，而且SGML软件价格非常价格昂贵。 </p><p><strong>HTML</strong>即“HyperText Markup Language” （超文本标记语言）,它的优点是比较适合web 页面的开发。但它有一个缺点是标记相对较少，只有固定的标记集如<code>&lt;p&gt; &lt;strong&gt;</code> 等。缺少 SGML  的柔性和适应性。不能支持特定领域的标记语言，如对数学、化学、音乐等领域的表示支持较少。</p><p>所谓的XML（Extensible Markup Language）, 翻译成中文就是“可扩展标识语言“，在国内很多人理解<code>xml</code>为<code>html</code>的简单扩展，这实际上是一种误解。尽管 <code>xml</code> 同 <code>html</code> 关系非常密切。 它由万维网协会（W3C）创建，用来克服  HTML 的局限。和 HTML 一样，XML 也基于 SGML。XML 是为 Web 设计的。  <strong>XML 实际上是Web上表示结构化信息的一种标准文本格式</strong>，它没有复杂的语法和包罗万象的数据定义。</p><p><strong>SGML</strong> 是一种在Web发明之前就早已存在的用标记来描述文档资料的通用语言。但SGML<strong>十分庞大且难于学习和使用</strong>。鉴于此，人们提出了HTML语言。但近年来，随着Web应用的不断深入，HTML在需求广泛的应用中已显得捉襟见肘，有人建议直接使用 SGML 作为Web语言。但SGML太庞大了，学用两难尚且不说，就是全面实现SGML的浏览器也非常困难。于是Web标准化组织W3C建议使用一种精简的SGML版本——XML。XML与SGML一样，是一个用来定义其他语言的元语言。与SGML相比，XML规范不到SGML规范的1/10，简单易懂，是一门既无标签集也无语法的新一代标记语言。</p><h1 id="第一章-HTML-5-的优势"><a href="#第一章-HTML-5-的优势" class="headerlink" title="第一章 HTML 5 的优势"></a>第一章 HTML 5 的优势</h1><h2 id="HTML-5-为什么如此受欢迎？"><a href="#HTML-5-为什么如此受欢迎？" class="headerlink" title="HTML 5 为什么如此受欢迎？"></a>HTML 5 为什么如此受欢迎？</h2><ol><li><p>时代的要求</p><p>现在时代迫切要求有一个统一的互联网通用标准，以往由于各浏览器之间的不统一，所以<strong>解决浏览器之间的兼容性问题</strong>成为了开发者最为头疼的问题。</p><p>而HTML 5 的目标就是将Web带入一个成熟的应用平台，在HTML 5 平台上，视频、音频、图像、动画，以及同电脑的交互都被标准化。</p></li><li><p>Internet Explorer 8 以上的版本对HTML 5 的支持，随着其他浏览器针对此次 HTML 5 的更新的改变，抢占了许多市场份额，所以IE 8 以上版本，都对HTML 5 做了相应的支持，所以 HTML 5 在市场上大面积推广的势头是非常猛的。</p></li></ol><h2 id="为何可以放心使用-HTML-5-技术"><a href="#为何可以放心使用-HTML-5-技术" class="headerlink" title="为何可以放心使用 HTML 5 技术"></a>为何可以放心使用 HTML 5 技术</h2><ol><li><p>兼容性：HTML 4 在<strong>新版本的浏览器上</strong>也可以正常运行。（本书写的是HTML 5 在<strong>老版本的浏览器上</strong>也可以正常运行。觉得稍有问题，还是需要针对兼容性，做些调整的）</p></li><li><p>实用性：HTML 5 内部并没有封装什么很复杂的、不切实际的功能，而只是封装了简单实用的功能。</p></li><li><p>并非革命性的发展：HTML 5 的内部功能不是革命性的，只是发展性的。</p><p>以上三点就是所谓的“HTML 设计原则”，HTML 5 也是以该设计原则为基本原则而开发出来的，各主流浏览器使用 HTML 5 的前提也就是要求 HTML 5 能够符合这些原则，今后也将以此为前提来支持 HTML 5.</p></li></ol><h2 id="HTML-5-版本之前的Web技术存在的问题"><a href="#HTML-5-版本之前的Web技术存在的问题" class="headerlink" title="HTML 5 版本之前的Web技术存在的问题"></a>HTML 5 版本之前的Web技术存在的问题</h2><ol><li><p>Web 浏览器之间的兼容性很低（即规范不统一）</p></li><li><p>文档结构不够明确（即语义化不明确）</p></li><li><p>Web 应用程序的功能受到了限制（Web应用程序的功能实现无保障）</p><p>HTML 5 针对以上问题，统一了一个通用标准，追加了许多结构相关的语义化元素，并结合了包括<strong>微格式、无障碍应用</strong>在内的各种各样的周边技术。同时 HTML 5 开始提供各种各样Web应用上的新API，各浏览器也在快速地封装着这些API，HTML 5 已经使富Web应用地实现变成了可能。</p></li></ol><h1 id="第二章-HTML-5-与-HTML-4-的区别"><a href="#第二章-HTML-5-与-HTML-4-的区别" class="headerlink" title="第二章 HTML 5 与 HTML 4 的区别"></a>第二章 HTML 5 与 HTML 4 的区别</h1><h2 id="从-HTML-5-开始，对于文件的字符编码，推荐使用UTF-8。"><a href="#从-HTML-5-开始，对于文件的字符编码，推荐使用UTF-8。" class="headerlink" title="从 HTML 5 开始，对于文件的字符编码，推荐使用UTF-8。"></a>从 HTML 5 开始，对于文件的字符编码，推荐使用UTF-8。</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/*HTML 4 中指定文档的字符编码*/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/*HTML 5 中指定文档的字符编码*//*以上两种方法都可以使用，但是不可以同时混合使用，如像下面使用是错误的*/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript面向对象</title>
      <link href="/2019/11/28/js-mian-xiang-dui-xiang/"/>
      <url>/2019/11/28/js-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript-面向对象-精选"><a href="#JavaScript-面向对象-精选" class="headerlink" title="JavaScript 面向对象 精选"></a>JavaScript 面向对象 精选</h3><p>模拟京东倒计时</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">countTime</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> nowTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> inputTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> countSum <span class="token operator">=</span> <span class="token punctuation">(</span>inputTime <span class="token operator">-</span> nowTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出秒数</span>    <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countSum <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出剩余天数</span>    d <span class="token operator">=</span> d <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> d <span class="token punctuation">:</span> d<span class="token punctuation">;</span>    <span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countSum <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出剩余小时数</span>    h <span class="token operator">=</span> h <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> h <span class="token punctuation">:</span> h<span class="token punctuation">;</span>    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countSum <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出剩余分钟数</span>    m <span class="token operator">=</span> m <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> m <span class="token punctuation">:</span> m<span class="token punctuation">;</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>countSum <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出剩余秒数</span>    s <span class="token operator">=</span> s <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> s <span class="token punctuation">:</span> s<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"剩余时间为："</span> <span class="token operator">+</span> d <span class="token operator">+</span> <span class="token string">"天 "</span> <span class="token operator">+</span> h <span class="token operator">+</span> <span class="token string">"小时 "</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">"分钟 "</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"现在时间为："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token function">countTime</span><span class="token punctuation">(</span><span class="token string">"2019-11-29 19:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>添加 删除数组元素的方法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1.尾部追加数组元素  push2.头部追加数组元素  unshift*/</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vaar arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span><span class="token string">"是个帅哥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>数组排序 翻转数组&amp;升序、降序</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//reverse() 翻转数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"pink"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sort() 升降序</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//升序</span>    <span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//降序</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//面试的话使用冒泡排序</span></code></pre><p>数组索引读取  <strong>有面试点</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*数组去重面试重点目标：把旧数组里面不重复的元素取出来放到新数组中，重复的元素只保留一个，放到新数组中去重；核心算法：我们遍历旧数组元素，在新数组查看是否存在此元素，存在舍弃，不存在就在新数组追加此元素*/</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span><span class="token string">"Coder"</span><span class="token punctuation">,</span><span class="token string">"Rat"</span><span class="token punctuation">,</span><span class="token string">"coder"</span><span class="token punctuation">,</span><span class="token string">"rat"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arrNew <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arrNew<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arrNew<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arrNew<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>基本包装类型 和 复杂数据类型的区别</p><p>基本包装类型 也属于对象，只不过，后来销毁了他的对象内存指向，（即有生命周期）</p><p>调用方法的时候 相当于对象 不调用方法和属性，仅是简单的赋值操作，则不会执行包装成对象再销毁的过程。</p><p>var  str = “angy”; //简单过程</p><p>var l = str.length;=&gt;</p><p>字符串的不可变性：</p><p>当重新赋值字符串，会开辟新的内存空间 原来的地址保留</p><p>因为<strong>数组</strong>的重新赋值 会把之前的干掉 不会重新开辟内存地址</p><pre class=" language-javascript"><code class="language-javascript"></code></pre><p>自调用函数</p><pre class=" language-js"><code class="language-js"></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"aoccdrrojkokdopp"</span><span class="token punctuation">;</span><span class="token keyword">var</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    num<span class="token operator">++</span><span class="token punctuation">;</span>    index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础初识</title>
      <link href="/2018/12/07/javascript-ji-chu-chu-shi/"/>
      <url>/2018/12/07/javascript-ji-chu-chu-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h1><h2 id="1-程序运行之内存条"><a href="#1-程序运行之内存条" class="headerlink" title="1. 程序运行之内存条"></a>1. 程序运行之内存条</h2><ol><li><p>打开某个程序时，先从硬盘中把程序的代码加载到内存中</p></li><li><p>CPU执行内存中的代码（此时读取的应该是机器码<code>0</code>，<code>1</code>）</p><p>之所以要内存的一个重要原因，是因为CPU运行太快了，如果只从硬盘中读取数据会浪费CPU性能，所以，才使用存取速度更快的内存来保存<strong>运行时</strong>的数据。（内存是电，硬盘是机械）</p></li></ol><h2 id="2-JavaScript-是什么"><a href="#2-JavaScript-是什么" class="headerlink" title="2. JavaScript 是什么"></a>2. JavaScript 是什么</h2><ol><li><p>JavaScript 是运行在客户端的脚本语言 (script 脚本的意思)，运行过程中不需要编译，由 JS 解释器（如chrome V8引擎）<strong>逐行解释</strong>执行（<strong>如果执行到错误代码，直接报错，后面不再执行</strong>）</p><p>浏览器本身并不会执行JS代码，而是通过内置JavaScript引擎（解释器）来执行JS代码。JS引擎执行代码时逐行解释每一句源码（转为机器语言），然后由计算机去执行，所以JavaScript语言归为脚本语言，会逐行解释执行。</p></li><li><p>现在也可以基于Node.js实现服务器端编程</p></li></ol><h2 id="3-JavaScript-的作用"><a href="#3-JavaScript-的作用" class="headerlink" title="3. JavaScript 的作用"></a>3. JavaScript 的作用</h2><ol><li><p>表单动态校验（<strong>密码强度检测</strong>）(JS产生的最初目的)</p></li><li><p>页面特效</p></li><li><p>服务端开发（Node.js）</p><p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p><p>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</p><p>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p></li><li><p>桌面程序 （Electron）</p></li><li><p>APP（Cordova）</p></li><li><p>控制硬件-物联网（Ruff）</p></li><li><p>游戏开发（cocos2d-js）</p></li></ol><h2 id="4-JavaScript-与-HTML-与-CSS-之间的关系"><a href="#4-JavaScript-与-HTML-与-CSS-之间的关系" class="headerlink" title="4. JavaScript 与 HTML 与 CSS 之间的关系"></a>4. JavaScript 与 HTML 与 CSS 之间的关系</h2><ol><li><strong>HTML</strong> 定义了网页的内容</li><li><strong>CSS</strong> 描述了网页的布局</li><li><strong>JavaScript</strong> 网页的行为</li></ol><h2 id="5-Javascript-的组成"><a href="#5-Javascript-的组成" class="headerlink" title="5. Javascript 的组成"></a>5. Javascript 的组成</h2><ol><li><p><code>ECMAScript</code>  JavaScript语法</p><p>ECMAScript 是由ECMA国际（原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为<code>JavaScript</code>（网景公司）或<code>JScript</code>（微软公司），但实际上后两者是ECMAScript语言的实现和扩展。</p><p>ECMAScript规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</p></li><li><p><code>DOM</code>  页面文档对象模型 Document Object Model</p><p>是W3C组织推荐的处理可扩展标记语言的<strong>标准编程接口</strong>，通过DOM提供的接口可以对页面中各种元素进行操作（大小、位置、颜色等）；</p></li><li><p><code>BOM</code>  浏览器对象模型 Browser Object Model</p><p>他提供了独立于内容的、可以与<strong>浏览器窗口进行互动</strong>的对象结构。通过BOM可以<strong>操作浏览器窗口</strong>，比如：弹出框、控制浏览器跳转、获取分辨率等。</p></li></ol><h2 id="6-JavaScript-的三种引入方式"><a href="#6-JavaScript-的三种引入方式" class="headerlink" title="6. JavaScript 的三种引入方式"></a>6. JavaScript 的三种引入方式</h2><ol><li><p>行内式的 JS</p></li><li><p>内嵌式的 JS</p></li><li><p>外部式的 JS 双标签</p><p><code>&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</code></p></li></ol><h2 id="7-JavaScript-输入输出语句"><a href="#7-JavaScript-输入输出语句" class="headerlink" title="7. JavaScript 输入输出语句"></a>7. JavaScript 输入输出语句</h2><table><thead><tr><th>方法</th><th>说明</th><th>归属</th><th>返回值</th></tr></thead><tbody><tr><td>aler(msg)</td><td>浏览器弹出警示框</td><td>浏览器</td><td>undefined</td></tr><tr><td>console.log(msg)</td><td>浏览器控制台打印输出信息</td><td>浏览器</td><td>undefined</td></tr><tr><td>prompt(info)</td><td>浏览器弹出输入框，用户可以输入</td><td>浏览器</td><td>输入的内容</td></tr></tbody></table><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>复习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p><strong>控制台结果分析</strong></p><p><code>输入的内容</code> prompt的返回值<br><code>undefined</code>  alert不属于JavaScript的内部函数，属于web API<br><code>请输入</code>  console.log()执行的结果<br><code>undefined</code>  console.log()不属于JavaScript的内部函数，属于web API</p></blockquote><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>白话说：装东西的盒子</p><p>通俗：<strong>变量是用于存放数据的容器</strong>。我们通过变量名获取数据，数据可以修改。</p><p>本质：变量是程序在<strong>内存</strong>中申请一块用来存放数据的空间。</p><h2 id="1-变量的使用"><a href="#1-变量的使用" class="headerlink" title="1. 变量的使用"></a>1. 变量的使用</h2><ol><li><p>声明变量</p><p><code>var 变量名;</code></p><p><code>var</code> 是 JS 关键字，用来声明变量（variable）。使用该关键字声明变量后，计算机会自动为变量分配内存空间。</p><p><code>变量名</code> 是我们定义的变量名，我们需要通过变量名访问内存中分配的空间。</p></li><li><p>赋值</p><p>变量名 = 10;</p></li><li><p>变量初始化</p><p>声明一个变量并赋值，称之为<code>变量的初始化</code>。</p><p>var 变量名 = 值；</p></li></ol><blockquote><p>变量名的命名规则遵循小驼峰命名法</p></blockquote><ol start="4"><li><p>更新变量（同一作用域内）</p><p>一个变量被重新赋值后，它的原有值会被覆盖，变量值以最后一次付的值为准。</p></li><li><p>同时声明/初始化多个变量</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span>    address <span class="token operator">=</span> <span class="token string">"中国安徽"</span><span class="token punctuation">,</span>    salary <span class="token operator">=</span> <span class="token number">8000</span><span class="token punctuation">;</span></code></pre></li><li><p>声明变量的特殊情况</p><table><thead><tr><th>情况</th><th>consol.log()的结果是</th></tr></thead><tbody><tr><td>只声明 不赋值</td><td>undefined</td></tr><tr><td>不声明 不赋值</td><td>报错</td></tr><tr><td>不声明 直接赋值</td><td>正常输出（默认加上var关键字，为全局变量，即使在函数中，也提升为全局变量）</td></tr></tbody></table></li></ol><h2 id="2-变量的命名规范"><a href="#2-变量的命名规范" class="headerlink" title="2. 变量的命名规范"></a>2. 变量的命名规范</h2><ol><li>字母 数字 下划线 <code>_</code> 美元符号 <code>$</code>（不能有空格）</li><li><strong>严格区分大小写</strong></li><li><strong>不能以数字开头</strong></li><li><strong>不能是关键字、保留字</strong>：var for while等 及特殊含义的<code>name</code></li><li>变量名必须有意义，最好转化为对应的单词，或者单词简写</li><li>遵循小驼峰命名法：首字母小写，后面单词的首字母需要大写。如<code>myFirstName</code></li></ol><h2 id="3-练习：简单交换变量"><a href="#3-练习：简单交换变量" class="headerlink" title="3. 练习：简单交换变量"></a>3. 练习：简单交换变量</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//思想：（新声明一个临时变量，作为交换媒介）</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>结果</p><p>(2) [“age”, 10]*</p><ol><li><p>0: “age”</p></li><li><p>1: 10</p></li><li><p>length: 2</p></li></ol></blockquote><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>变量是用来存储值的，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。<strong>JavaScript是一种弱类型或者动态语言</strong>。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定，而且数据类型是可以变化的。</p><h2 id="1-数据类型的分类"><a href="#1-数据类型的分类" class="headerlink" title="1. 数据类型的分类"></a>1. 数据类型的分类</h2><ol><li><p>简单数据类型</p><p>Number,String,Boolean,Undefined,Null</p></li><li><p>复杂数据类型</p><p>Object</p></li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> boo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> boo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>0 false 0 undefined null  第一个值是Number的默认值<code>0</code>；第二个值是Boolean的默认值<code>false</code>;第三个值是String的默认值为<code>“”</code>的索引。</p></blockquote><h3 id="1-1-Number-数字型"><a href="#1-1-Number-数字型" class="headerlink" title="1.1 Number 数字型"></a>1.1 Number 数字型</h3><blockquote><p><strong>进制</strong></p><p>八进制：<code>0</code>开头  0~7     <code>8 = 010；</code></p><p>十六进制：<code>0x</code>开头 0-9  a~f  <code>16 = 0x10;</code></p></blockquote><blockquote><p><strong>数字型范围</strong></p><p>最大值：<code>Number.MAX_VALUE</code></p><p>最小值：<code>Number.MIN_VALUE</code></p></blockquote><blockquote><p><strong>数字型三个特殊值</strong></p><ol><li><p><code>Infinity</code> 无穷大，大于任何值</p><p><code>console.log(Number.MAX_VALUE * 2);</code></p></li><li><p><code>-Infinity</code> 无穷小，小于任何值</p><p><code>console.log(-Number.MAX_VALUE * 2);</code></p></li><li><p><code>NaN</code> Not a Number，非数值（用了数学运算符，无法算出内容）</p><p><code>console.log(&quot;Coder Rat&quot; - 20);</code></p></li></ol></blockquote><blockquote><p><strong>isNaN()</strong></p><p>用来判断一个变量是否为<strong>非数字</strong>的类型，返回true或者false</p><p>用法：<code>isNaN(a);</code> </p><p>如果a为数字  则返回 false</p><p>如果a为非数字  则返回 true</p><p>可以用来判断用户输入的是否为数字</p><pre class=" language-js"><code class="language-js"><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// strings</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"37"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// false: 可以被转换成数值37</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"37.37"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// false: 可以被转换成数值37.37</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"37,5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'123ABC'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true:  parseInt("123ABC")的结果是 123, 但是Number("123ABC")结果是 NaN</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// false: 空字符串被转换成0</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// false: 包含空格的字符串被转换成0</span><span class="token comment" spellcheck="true">// dates</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"blabla"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// true: "blabla"不能转换成数值</span>                  <span class="token comment" spellcheck="true">// 转换成数值失败， 返回NaN</span></code></pre></blockquote><blockquote><p><strong><code>isNaN</code> 函数的必要性</strong></p><p>与 JavaScript 中其他的值不同，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN" target="_blank" rel="noopener"><code>NaN</code></a>不能通过相等操作符（== 和 ===）来判断 ，因为 <code>NaN == NaN</code> 和 <code>NaN === NaN</code> 都会返回 <code>false</code>。 因此，<code>isNaN</code> 就很有必要了。</p></blockquote><blockquote><p> <strong><code>NaN值</code>的产生</strong></p><p>当算术运算返回一个未定义的或无法表示的值时，<code>NaN</code>就产生了。但是，<code>NaN</code>并不一定用于表示某些值超出表示范围的情况。将某些不能强制转换为数值的非数值转换为数值的时候，也会得到<code>NaN</code>。</p><p>例如，0 除以0会返回<code>NaN</code>—— 但是其他数除以0则不会返回<code>NaN</code>。</p></blockquote><h3 id="1-2-String-字符串型"><a href="#1-2-String-字符串型" class="headerlink" title="1.2 String 字符串型"></a>1.2 String 字符串型</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'我是字符串'</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'我是"Coder Rat",是个程序员'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//嵌套使用的话，遵循外单内双，或者外双内单</span></code></pre><h4 id="1-2-1-字符串转义字符"><a href="#1-2-1-字符串转义字符" class="headerlink" title="1.2.1 字符串转义字符"></a>1.2.1 字符串转义字符</h4><ol><li><code>\n</code>  换行符，newline</li><li><code>\\</code>  斜杠</li><li><code>\&#39;</code>  单引号</li><li><code>\&quot;</code>  双引号</li><li><code>\t</code>  tab缩进，制表符</li><li><code>\b</code>  空格，b是blank的意思 一个空格的话等同于直接空格</li></ol><pre class=" language-js"><code class="language-js"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'酷热难耐，火辣的太阳底下，我挺拔的身姿，成为了最独特的风景。\n我审视四周，这里，是我的舞台，我就是天地间的王者。\n这一刻，我豪气冲天，大喊一声："收破烂啦~"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="1-2-2-字符串长度-length"><a href="#1-2-2-字符串长度-length" class="headerlink" title="1.2.2 字符串长度 length"></a>1.2.2 字符串长度 length</h4><p>用于检测字符串的长度</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> strMsg <span class="token operator">=</span> <span class="token string">"I am Coder Rat."</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strMsg <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> strMsg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>I am Coder Rat.<br>15</p><p>–注意：空格和符号也占字符串长度–</p></blockquote><h4 id="1-2-3-字符串的拼接"><a href="#1-2-3-字符串的拼接" class="headerlink" title="1.2.3 字符串的拼接"></a>1.2.3 字符串的拼接</h4><p>多个字符串之间可以使用 <code>+</code> 进行拼接，其拼接方式为 :</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//拼接后的新字符串 = 字符串 + 任何类型;</span><span class="token keyword">var</span> strNew <span class="token operator">=</span> <span class="token string">"我是Coder Rat，我"</span> <span class="token operator">+</span> <span class="token number">18</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">"岁了"</span><span class="token punctuation">,</span><span class="token string">"你呢？"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"不告诉你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token boolean">false</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strNew<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"12"</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"1212"</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"1212" 这就是正常的数字相加，数字+数字+String</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//24 这就是正常的数字相加，数字+数字</span></code></pre><blockquote><p> 我是Coder Rat，我18岁了,你呢？Thu Dec 05 2018 21:16:36 GMT+0800 (中国标准时间)function () {<br>        alert(“不告诉你”);<br>    }false<br>null</p></blockquote><p>– 注意：拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串，函数的话也不会执行，直接返回函数体，方法调用会执行，将结果转为字符串以供拼接 –</p><h3 id="1-3-Boolean-布尔型"><a href="#1-3-Boolean-布尔型" class="headerlink" title="1.3 Boolean 布尔型"></a>1.3 Boolean 布尔型</h3><p>布尔型有两个值：<code>true</code> <code>false</code>，其中true表示真（对），false表示假（错）</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*Boolean类型的值，可以参与数学运算true === 1false === 0*/</span><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">var</span> flag1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> flag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> flag1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> flag <span class="token operator">+</span> flag1<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>2<br>1<br>1</p></blockquote><h3 id="1-4-Undefined-amp-Null"><a href="#1-4-Undefined-amp-Null" class="headerlink" title="1.4 Undefined &amp; Null"></a>1.4 Undefined &amp; Null</h3><p>一个声明变量，没赋值，则这个变量为undefined类型</p><p>一个声明的变量，赋值为null，则此类型变量为Null类型的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> variable <span class="token operator">=</span> undefined <span class="token operator">+</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为undefinedCoder Rat</span><span class="token keyword">var</span> variable1 <span class="token operator">=</span> undefined <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为NaN 因为undefined == NaN</span><span class="token keyword">var</span> variable2 <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">+</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为nullCoder Rat</span><span class="token keyword">var</span> variable3 <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为 1 null为空，相当于向内存中填充了1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>undefinedCoder Rat<br>NaN<br>nullCoder Rat<br>1</p></blockquote><h2 id="2-typeof-获取变量数据类型"><a href="#2-typeof-获取变量数据类型" class="headerlink" title="2. typeof 获取变量数据类型"></a>2. typeof 获取变量数据类型</h2><p>用法：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//返回值为变量的数据类型</span><span class="token keyword">typeof</span> 变量<span class="token punctuation">;</span></code></pre><h2 id="3-字面量"><a href="#3-字面量" class="headerlink" title="3. 字面量"></a>3. 字面量</h2><p>字面量是在代源码中，一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"Coder Rat"</span><span class="token punctuation">;</span><span class="token keyword">var</span> boo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">var</span> und <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token keyword">var</span> nul <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"Coder Rat"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是匿名函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="4-数据类型转换"><a href="#4-数据类型转换" class="headerlink" title="4. 数据类型转换"></a>4. 数据类型转换</h2><p><strong>变量的数据类型为什么需要进行转换？</strong></p><p>使用表单、prompt获取过来的数据默认是字符串类型的，此时就不能直接简单地进行数学运算，而需要转换变量的数据类型，从而达到目的。</p><p>通俗来说：数据类型转换就是把一种数据类型的变量转换成另一种想要的数据类型。</p><p><strong>常用的转换</strong></p><ol><li>转换为字符串类型</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*--调用对象的内置方法--变量/(字面量).toString();*/</span><span class="token comment" spellcheck="true">/*-- 强制转换方法 --String(变量/字面量); 调用String构造器interface StringConstructor {    new(value?: any): String;    (value?: any): string;    readonly prototype: String;    fromCharCode(...codes: number[]): string;}*/</span><span class="token comment" spellcheck="true">/*字面量的话，使用.toString()最好是加上括号，比如数字.toString();不加括号就会报错*/</span><span class="token comment" spellcheck="true">/*-- 隐式转换 --  最常用的方法加号拼接字符串任何类型的数据与字符串以 + 号相连，则数据会被先强制转换为字符串，再和字符串相连*/</span></code></pre><ol start="2"><li>转换为数字型</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*1. parseInt();  将String类型转换为整数数值型2. parseFloat(); 将String类型转换为浮点数型3. Number(); 强制转换4. - * / 隐式转换 通过数学运算符，不包括 +*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"18.18"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"rem12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"18.18"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"rem12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"12px"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"12px"</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"12"</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"126"</span> <span class="token operator">-</span> <span class="token string">"120"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>18<br />18<br />12<br />NaN<br />18.18<br />12<br />NaN<br />NaN<br />12<br />NaN<br />12<br />6</p></blockquote><pre class=" language-js"><code class="language-js">简单的加法器<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入第一个值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入第二个值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> b <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// var sum = Number(a) + Number(b);</span><span class="token comment" spellcheck="true">// var sum = parseFloat(a) + parseFloat(b);</span><span class="token function">alert</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>转换为布尔型</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*方法：Boolean()函数代表空、否定的值会被转为false如 ""、0、NaN、null、undefined其余的值都会被转换为true*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"Coder Rat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"NaN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span></code></pre><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="1-解释型语言和编译型语言"><a href="#1-解释型语言和编译型语言" class="headerlink" title="1. 解释型语言和编译型语言"></a>1. 解释型语言和编译型语言</h3><p>计算机不能直接理解任何除机器语言以外的其他语言，所以必须要把程序员所编写的程序语言翻译成机器语言才能执行程序。程序语言翻译成机器语言的工具，被称为翻译器。</p><p>编程语言 :point_right:翻译器:point_right:机器语言（二进制）</p><p>翻译器翻译的方式有两种：一个是<strong>编译</strong>，另外一个是<strong>解释</strong>。</p><p>两者的区别在于：<strong>翻译的时间点不同</strong></p><p>编译器：是在代码执行之前进行编译，生成中间代码文件</p><p>解释器：是在运行时进行及时解释，并立即执行（当编译器以解释方式运行的时候，也称之为解释器，如Java的 JIT 机制）</p><h3 id="JIT概念"><a href="#JIT概念" class="headerlink" title="JIT概念"></a>JIT概念</h3><p>JIT：Just In Time Compiler，一般翻译为即时编译器，这是是针对解释型语言而言的，而且并非虚拟机必须，是一种优化手段，Java的商用虚拟机HotSpot就有这种技术手段，Java虚拟机标准对JIT的存在没有作出任何规范，所以这是虚拟机实现的自定义优化技术。</p><p>  HotSpot虚拟机的执行引擎在执行Java代码是可以采用【解释执行】和【编译执行】两种方式的，如果采用的是编译执行方式，那么就会使用到JIT，而解释执行就不会使用到JIT，所以，早期说Java是解释型语言，是没有任何问题的，而在拥有JIT的Java虚拟机环境下，说Java是解释型语言严格意义上已经不正确了。</p><p>  HotSpot中的编译器是javac，他的工作是将源代码编译成字节码，这部分工作是完全独立的，完全不需要运行时参与，所以Java程序的编译是半独立的实现。有了字节码，就有解释器来进行解释执行，这是早期虚拟机的工作流程，后来，虚拟机会将执行频率高的方法或语句块通过JIT编译成本地机器码，提高了代码执行的效率，至此你已经了解了JIT在Java虚拟机中所处的地位和工作的主要内容。</p><p><strong>1.JIT的工作原理图</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2hpLmNzZG4ubmV0L2F0dGFjaG1lbnQvMjAxMTA5LzE2LzBfMTMxNjE1OTYwNGRTNjAuZ2lm" alt="img"></p><p>工作原理<br>当JIT编译启用时（默认是启用的），JVM读入.class文件解释后，将其发给JIT编译器。JIT编译器将字节码编译成本机机器代码。 </p><p>通常javac将程序源码编译，转换成java字节码，JVM通过解释字节码将其翻译成相应的机器指令，逐条读入，逐条解释翻译。非常显然，经过解释运行，其运行速度必定会比可运行的二进制字节码程序慢。为了提高运行速度，引入了JIT技术。 </p><p>在执行时JIT会把翻译过的机器码保存起来，已备下次使用，因此从理论上来说，採用该JIT技术能够，能够接近曾经纯编译技术。 </p><p><strong>2.相关知识</strong><br>JIT是just in time,即时编译技术。使用该技术，可以加速java程序的运行速度。 </p><p>JIT并不总是奏效，不能期望JIT一定可以加速你代码运行的速度，更糟糕的是她有可能减少代码的运行速度。这取决于你的代码结构，当然非常多情况下我们还是可以如愿以偿的。 </p><p>从上面我们知道了之所以要关闭JITjava.lang.Compiler.disable(); 是由于加快运行的速度。由于JIT对每条字节码都进行编译，造成了编译过程负担过重。为了避免这样的情况，当前的JIT仅仅对常常运行的字节码进行编译，如循环等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 初识JS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
